#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
"""

import sqlite3
import json
from datetime import datetime, timedelta
import os

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "database/dev.db"

def analyze_funnel_steps(days=7):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è card_of_day
        cursor = conn.execute("""
            SELECT DISTINCT step, COUNT(*) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND timestamp >= datetime('now', '-{} days')
            GROUP BY step
            ORDER BY count DESC
        """.format(days))
        
        steps = cursor.fetchall()
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –í–û–†–û–ù–ö–ò '–ö–ê–†–¢–ê –î–ù–Ø' (–∑–∞ {days} –¥–Ω–µ–π)")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        print("\nüîç –í–°–ï –®–ê–ì–ò –°–¶–ï–ù–ê–†–ò–Ø:")
        for step in steps:
            print(f"  ‚Ä¢ {step['step']}: {step['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤
        print(f"\nüìà –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –®–ê–ì–û–í:")
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'started'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        started = cursor.fetchone()['count']
        print(f"1Ô∏è‚É£ –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é: {started} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 2: –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'initial_resource_selected'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        resource_selected = cursor.fetchone()['count']
        print(f"2Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å: {resource_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 3: –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'request_type_selected'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        request_type_selected = cursor.fetchone()['count']
        print(f"3Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 4: –ù–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏)
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'text_request_provided'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        text_request_provided = cursor.fetchone()['count']
        print(f"4Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {text_request_provided} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 5: –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'card_drawn'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        card_drawn = cursor.fetchone()['count']
        print(f"5Ô∏è‚É£ –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É: {card_drawn} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 6: –ù–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'initial_response_provided'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        initial_response_provided = cursor.fetchone()['count']
        print(f"6Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é: {initial_response_provided} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 7: –í—ã–±—Ä–∞–ª–∏ —É–≥–ª—É–±–ª—è—é—â–∏–π –¥–∏–∞–ª–æ–≥
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_reflection_choice'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        ai_reflection_choice = cursor.fetchone()['count']
        print(f"7Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —É–≥–ª—É–±–ª—è—é—â–∏–π –¥–∏–∞–ª–æ–≥: {ai_reflection_choice} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 8: –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'completed'
            AND timestamp >= datetime('now', '-{} days')
        """.format(days))
        completed = cursor.fetchone()['count']
        print(f"8Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: {completed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å
        print(f"\nüö® –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–†–¨:")
        if started > 0:
            print(f"  ‚Ä¢ –®–∞–≥ 1‚Üí2: {started - resource_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((started - resource_selected) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 2‚Üí3: {resource_selected - request_type_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((resource_selected - request_type_selected) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 3‚Üí5: {request_type_selected - card_drawn} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((request_type_selected - card_drawn) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 5‚Üí6: {card_drawn - initial_response_provided} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((card_drawn - initial_response_provided) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 6‚Üí7: {initial_response_provided - ai_reflection_choice} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((initial_response_provided - ai_reflection_choice) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 7‚Üí8: {ai_reflection_choice - completed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((ai_reflection_choice - completed) / started * 100):.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        print(f"\nüìù –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –ó–ê–ü–†–û–°–û–í:")
        cursor = conn.execute("""
            SELECT metadata, COUNT(*) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'request_type_selected'
            AND timestamp >= datetime('now', '-{} days')
            GROUP BY metadata
        """.format(days))
        request_types = cursor.fetchall()
        
        for req_type in request_types:
            try:
                meta = json.loads(req_type['metadata'])
                request_type = meta.get('request_type', 'unknown')
                print(f"  ‚Ä¢ {request_type}: {req_type['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            except:
                print(f"  ‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {req_type['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—ã–±–æ—Ä–∞ —É–≥–ª—É–±–ª—è—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        print(f"\nü§ñ –ê–ù–ê–õ–ò–ó –í–´–ë–û–†–ê –£–ì–õ–£–ë–õ–Ø–Æ–©–ï–ì–û –î–ò–ê–õ–û–ì–ê:")
        cursor = conn.execute("""
            SELECT metadata, COUNT(*) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_reflection_choice'
            AND timestamp >= datetime('now', '-{} days')
            GROUP BY metadata
        """.format(days))
        ai_choices = cursor.fetchall()
        
        for choice in ai_choices:
            try:
                meta = json.loads(choice['metadata'])
                choice_type = meta.get('choice', 'unknown')
                print(f"  ‚Ä¢ {choice_type}: {choice['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            except:
                print(f"  ‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä: {choice['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print(f"\n‚úÖ –ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø: {completed}/{started} = {(completed/started*100):.1f}%" if started > 0 else "\n‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    analyze_funnel_steps(7) 