#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ bot (7).db
"""

import sqlite3
import os

db_path = "bot (7).db"

if not os.path.exists(db_path):
    print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    exit(1)

print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
print()

sql_migration = """
-- ============================================================================
-- –°–ò–°–¢–ï–ú–ê –ú–ï–¢–†–ò–ö: –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê (AUTO MIGRATION)
-- ============================================================================

-- 1. –¢–∞–±–ª–∏—Ü–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã)
CREATE TABLE IF NOT EXISTS ignored_users (
    user_id INTEGER PRIMARY KEY,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
INSERT OR IGNORE INTO ignored_users(user_id) VALUES 
    (171507422),   -- KosarevPG
    (6682555021);  -- Admin

-- 2. –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
CREATE TABLE IF NOT EXISTS settings (
    key TEXT PRIMARY KEY,
    value TEXT NOT NULL,
    description TEXT,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
INSERT OR REPLACE INTO settings (key, value, description) VALUES 
    ('report_tz', '+03:00', '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ (–ú–°–ö)');

-- 3. VIEW –±–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–¥–º–∏–Ω–æ–≤)
DROP VIEW IF EXISTS v_events;
CREATE VIEW v_events AS
WITH tz AS (
    SELECT value AS offset FROM settings WHERE key='report_tz'
)
SELECT
    l.rowid AS event_id,
    l.user_id,
    l.scenario,
    l.step AS event,
    l.metadata,
    datetime(l.timestamp, (SELECT offset FROM tz)) AS ts_local,
    date(datetime(l.timestamp, (SELECT offset FROM tz))) AS d_local,
    json_extract(l.metadata, '$.session_id') AS session_id
FROM scenario_logs l
LEFT JOIN ignored_users i ON i.user_id = l.user_id
WHERE i.user_id IS NULL;

-- 4. VIEW —Å–µ—Å—Å–∏–π
DROP VIEW IF EXISTS v_sessions;
CREATE VIEW v_sessions AS
SELECT 
    scenario,
    session_id,
    MIN(CASE WHEN event = 'scenario_started' THEN ts_local END) AS started_at,
    MIN(CASE WHEN event = 'scenario_started' THEN d_local END) AS started_date,
    MAX(CASE WHEN event = 'completed' THEN ts_local END) AS completed_at,
    CASE WHEN MAX(CASE WHEN event = 'completed' THEN 1 ELSE 0 END) > 0 
         THEN 1 ELSE 0 END AS is_completed,
    COUNT(*) AS total_events
FROM v_events
WHERE session_id IS NOT NULL
GROUP BY scenario, session_id;

-- 5. VIEW DAU –ø–æ –¥–Ω—è–º
DROP VIEW IF EXISTS v_dau_daily;
CREATE VIEW v_dau_daily AS
SELECT 
    d_local,
    COUNT(DISTINCT user_id) AS dau
FROM v_events
GROUP BY d_local
ORDER BY d_local DESC;

-- 6. VIEW —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –ø–æ –¥–Ω—è–º
DROP VIEW IF EXISTS v_sessions_daily;
CREATE VIEW v_sessions_daily AS
SELECT 
    scenario,
    started_date AS d_local,
    COUNT(*) AS started,
    SUM(is_completed) AS completed,
    ROUND(100.0 * SUM(is_completed) / COUNT(*), 1) AS completion_rate
FROM v_sessions
GROUP BY scenario, started_date
ORDER BY started_date DESC;

-- 7. VIEW —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–¥ –ø–æ –¥–Ω—è–º
DROP VIEW IF EXISTS v_decks_daily;
CREATE VIEW v_decks_daily AS
SELECT 
    d_local,
    json_extract(metadata, '$.deck') AS deck,
    COUNT(*) AS draws,
    COUNT(DISTINCT user_id) AS uniq_users
FROM v_events
WHERE event = 'card_drawn' AND json_extract(metadata, '$.deck') IS NOT NULL
GROUP BY d_local, deck
ORDER BY d_local DESC, draws DESC;

-- 8. –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_scenario_logs_timestamp ON scenario_logs(timestamp);
CREATE INDEX IF NOT EXISTS idx_scenario_logs_user_scenario ON scenario_logs(user_id, scenario);
CREATE INDEX IF NOT EXISTS idx_scenario_logs_step ON scenario_logs(step);
"""

try:
    conn = sqlite3.connect(db_path)
    conn.executescript(sql_migration)
    conn.commit()
    conn.close()
    
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print()
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º VIEW...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ VIEW
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='view' AND name LIKE 'v_%'")
    views = cursor.fetchall()
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ VIEW: {len(views)}")
    for view in views:
        print(f"  ‚úÖ {view['name']}")
    
    print()
    
    # –¢–µ—Å—Ç v_sessions_daily –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("""
        SELECT scenario, started, completed, completion_rate
        FROM v_sessions_daily
        WHERE d_local = date('now', '+3 hours')
    """)
    sessions_today = cursor.fetchall()
    
    print("üìä –°–µ—Å—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
    if sessions_today:
        for s in sessions_today:
            print(f"  ‚Ä¢ {s['scenario']}: –∑–∞–ø—É—â–µ–Ω–æ {s['started']}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ {s['completed']} ({s['completion_rate']:.1f}%)")
    else:
        print("  ‚ÑπÔ∏è  –ù–µ—Ç —Å–µ—Å—Å–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    
    print()
    
    # –¢–µ—Å—Ç DAU
    cursor.execute("""
        SELECT dau FROM v_dau_daily
        WHERE d_local = date('now', '+3 hours')
    """)
    dau_today = cursor.fetchone()
    
    if dau_today:
        print(f"üìä DAU —Å–µ–≥–æ–¥–Ω—è: {dau_today['dau']}")
    else:
        print("üìä DAU —Å–µ–≥–æ–¥–Ω—è: 0")
    
    conn.close()
    
    print()
    print("üéâ –ì–æ—Ç–æ–≤–æ! VIEW —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

