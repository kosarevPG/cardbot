#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import requests
import re
import json
from datetime import datetime

class AuthenticatedDBClient:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.username = "admin"
        self.password = "root"
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        self.session.auth = (self.username, self.password)
        
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        print("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô")
        print("=" * 50)
        
        url = f"{self.base_url}/actions/content/"
        
        try:
            print(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫: {url}")
            print(f"–õ–æ–≥–∏–Ω: {self.username}")
            print(f"–ü–∞—Ä–æ–ª—å: {self.password}")
            
            response = self.session.get(url, timeout=15)
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return True
            elif response.status_code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401)")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def execute_sql_query(self, sql_query):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        print(f"üîç –í–´–ü–û–õ–ù–ï–ù–ò–ï SQL-–ó–ê–ü–†–û–°–ê")
        print("=" * 40)
        print(f"SQL: {sql_query}")
        print()
        
        url = f"{self.base_url}/actions/query/"
        
        try:
            data = {
                'sql': sql_query
            }
            
            response = self.session.post(url, data=data, timeout=15)
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return self.parse_query_results(response.text)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def parse_query_results(self, html_content):
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            table_pattern = r'<table[^>]*>(.*?)</table>'
            table_match = re.search(table_pattern, html_content, re.DOTALL)
            
            if table_match:
                table_html = table_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                header_pattern = r'<th[^>]*>(.*?)</th>'
                for match in re.findall(header_pattern, table_html):
                    headers.append(match.strip())
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                rows = []
                row_pattern = r'<tr[^>]*>(.*?)</tr>'
                for row_match in re.findall(row_pattern, table_html):
                    cell_pattern = r'<td[^>]*>(.*?)</td>'
                    cells = []
                    for cell_match in re.findall(cell_pattern, row_match):
                        cells.append(cell_match.strip())
                    if cells:
                        rows.append(cells)
                
                return {
                    'headers': headers,
                    'rows': rows
                }
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return None
    
    def check_admin_requests_viewed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è admin_requests_viewed"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –î–ï–ô–°–¢–í–ò–ô admin_requests_viewed")
        print("=" * 50)
        
        sql = """
        SELECT id, user_id, username, name, action, timestamp, details
        FROM actions 
        WHERE action = 'admin_requests_viewed'
        ORDER BY id DESC
        """
        
        results = self.execute_sql_query(sql)
        
        if results and results['rows']:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results['rows'])}")
            print()
            
            for row in results['rows']:
                if len(row) >= 7:
                    id_val, user_id, username, name, action, timestamp, details = row
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                    admin_ids = ['6682555021', '392141189', '239719200', '7494824111', '171507422', '138192985']
                    
                    if user_id in admin_ids:
                        status = "‚úÖ –õ–ï–ì–ò–¢–ò–ú–ù–´–ô –ê–î–ú–ò–ù"
                    else:
                        status = "üö® –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ô –î–û–°–¢–£–ü"
                    
                    print(f"ID: {id_val}")
                    print(f"User ID: {user_id}")
                    print(f"Username: {username}")
                    print(f"Name: {name}")
                    print(f"Action: {action}")
                    print(f"Timestamp: {timestamp}")
                    print(f"Status: {status}")
                    print("-" * 30)
        else:
            print("‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–π admin_requests_viewed –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def check_user_actions(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –î–ï–ô–°–¢–í–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
        print("=" * 50)
        
        sql = f"""
        SELECT id, user_id, username, name, action, timestamp, details
        FROM actions 
        WHERE user_id = {user_id}
        ORDER BY id DESC
        LIMIT 20
        """
        
        results = self.execute_sql_query(sql)
        
        if results and results['rows']:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results['rows'])}")
            print()
            
            for row in results['rows']:
                if len(row) >= 7:
                    id_val, user_id, username, name, action, timestamp, details = row
                    print(f"ID: {id_val} | Action: {action} | Time: {timestamp}")
        else:
            print("‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ö–õ–ò–ï–ù–¢ –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î")
    print("=" * 60)
    
    client = AuthenticatedDBClient()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if client.test_connection():
        print("\n" + "="*50 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ admin_requests_viewed
        client.check_admin_requests_viewed()
        
        print("\n" + "="*50 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 865377684
        client.check_user_actions(865377684)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")

if __name__ == "__main__":
    main() 