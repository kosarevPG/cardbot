#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
–î–æ–±–∞–≤–∏—Ç—å –≤ main.py –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling.
"""

import sqlite3
import os
import logging

logger = logging.getLogger(__name__)

def apply_metrics_migration(db_path: str = 'data/bot.db'):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VIEW –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç IF NOT EXISTS).
    """
    
    sql_migration = """
    -- ============================================================================
    -- –°–ò–°–¢–ï–ú–ê –ú–ï–¢–†–ò–ö: –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê (AUTO MIGRATION)
    -- ============================================================================
    
    -- 1. –¢–∞–±–ª–∏—Ü–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã)
    CREATE TABLE IF NOT EXISTS ignored_users (
        user_id INTEGER PRIMARY KEY,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    INSERT OR IGNORE INTO ignored_users(user_id) VALUES 
        (171507422),   -- KosarevPG
        (6682555021);  -- Admin
    
    -- 2. –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    CREATE TABLE IF NOT EXISTS settings (
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL,
        description TEXT,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    
    -- 2.1. –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
    CREATE TABLE IF NOT EXISTS training_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        training_type TEXT NOT NULL,  -- 'card_conversation' –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è
        step TEXT NOT NULL,           -- 'started', 'completed', 'abandoned'
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        details TEXT,                 -- JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        session_id TEXT              -- ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    );
    
    -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
    CREATE INDEX IF NOT EXISTS idx_training_logs_user_id ON training_logs(user_id);
    CREATE INDEX IF NOT EXISTS idx_training_logs_training_type ON training_logs(training_type);
    CREATE INDEX IF NOT EXISTS idx_training_logs_step ON training_logs(step);
    CREATE INDEX IF NOT EXISTS idx_training_logs_timestamp ON training_logs(timestamp);
    CREATE INDEX IF NOT EXISTS idx_training_logs_session_id ON training_logs(session_id);
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    INSERT OR REPLACE INTO settings (key, value, description) VALUES 
        ('report_tz', '+03:00', '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ (–ú–°–ö)'),
        ('training_logs_enabled', 'true', '–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è'),
        ('training_exclude_admins', 'true', '–ò—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è');
    
    -- 3. VIEW –±–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–¥–º–∏–Ω–æ–≤)
    DROP VIEW IF EXISTS v_events;
    CREATE VIEW v_events AS
    WITH tz AS (
        SELECT value AS offset FROM settings WHERE key='report_tz'
    )
    SELECT
        l.rowid AS event_id,
        l.user_id,
        l.scenario,
        l.step AS event,
        l.metadata,
        datetime(l.timestamp, (SELECT offset FROM tz)) AS ts_local,
        date(datetime(l.timestamp, (SELECT offset FROM tz))) AS d_local,
        json_extract(l.metadata, '$.session_id') AS session_id
    FROM scenario_logs l
    LEFT JOIN ignored_users i ON i.user_id = l.user_id
    WHERE i.user_id IS NULL;
    
    -- 4. VIEW —Å–µ—Å—Å–∏–π
    DROP VIEW IF EXISTS v_sessions;
    CREATE VIEW v_sessions AS
    SELECT 
        scenario,
        session_id,
        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–ï–†–í–û–ï —Å–æ–±—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ (–ª—é–±–æ–µ) –¥–ª—è started_at/started_date
        -- –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ scenario_started), —Ç–∞–∫ –∏ —Å –Ω–æ–≤—ã–º–∏
        MIN(ts_local) AS started_at,
        MIN(d_local) AS started_date,
        MAX(CASE WHEN event = 'completed' THEN ts_local END) AS completed_at,
        CASE WHEN MAX(CASE WHEN event = 'completed' THEN 1 ELSE 0 END) > 0 
             THEN 1 ELSE 0 END AS is_completed,
        COUNT(*) AS total_events,
        COUNT(*) AS step_count  -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
    FROM v_events
    WHERE session_id IS NOT NULL
    GROUP BY scenario, session_id;
    
    -- 5. VIEW DAU –ø–æ –¥–Ω—è–º
    DROP VIEW IF EXISTS v_dau_daily;
    CREATE VIEW v_dau_daily AS
    SELECT 
        d_local,
        COUNT(DISTINCT user_id) AS dau
    FROM v_events
    GROUP BY d_local
    ORDER BY d_local DESC;
    
    -- 6. VIEW —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –ø–æ –¥–Ω—è–º
    DROP VIEW IF EXISTS v_sessions_daily;
    CREATE VIEW v_sessions_daily AS
    SELECT 
        scenario,
        started_date AS d_local,
        COUNT(*) AS started,
        SUM(is_completed) AS completed,
        ROUND(100.0 * SUM(is_completed) / COUNT(*), 1) AS completion_rate
    FROM v_sessions
    WHERE started_date IS NOT NULL
    GROUP BY scenario, started_date
    ORDER BY started_date DESC;
    
    -- 7. VIEW —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–¥ –ø–æ –¥–Ω—è–º
    DROP VIEW IF EXISTS v_decks_daily;
    CREATE VIEW v_decks_daily AS
    SELECT 
        d_local,
        json_extract(metadata, '$.deck') AS deck,
        COUNT(*) AS draws,
        COUNT(DISTINCT user_id) AS uniq_users
    FROM v_events
    WHERE event = 'card_drawn' AND json_extract(metadata, '$.deck') IS NOT NULL
    GROUP BY d_local, deck
    ORDER BY d_local DESC, draws DESC;
    
    -- 8. –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    CREATE INDEX IF NOT EXISTS idx_scenario_logs_timestamp ON scenario_logs(timestamp);
    CREATE INDEX IF NOT EXISTS idx_scenario_logs_user_scenario ON scenario_logs(user_id, scenario);
    CREATE INDEX IF NOT EXISTS idx_scenario_logs_step ON scenario_logs(step);
    """
    
    try:
        conn = sqlite3.connect(db_path)
        conn.executescript(sql_migration)
        conn.commit()
        conn.close()
        
        logger.info("‚úÖ Metrics infrastructure migration applied successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to apply metrics migration: {e}", exc_info=True)
        return False

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ main.py:
# if __name__ == "__main__":
#     # ... –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è db, logging_service –∏ —Ç.–¥. ...
#     
#     # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
#     logger.info("üîÑ Applying database migrations...")
#     apply_metrics_migration(db_path='data/bot.db')
#     
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
#     asyncio.run(main())

