# –∫–æ–¥/modules/card_of_the_day.py

import random
import os
import uuid  # <--- –î–û–ë–ê–í–õ–ï–ù–û
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
try:
    from config_local import TIMEZONE, NO_CARD_LIMIT_USERS, DATA_DIR, pytz
except ImportError:
    from config import TIMEZONE, NO_CARD_LIMIT_USERS, DATA_DIR, pytz # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ pytz –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ ai_service
from .ai_service import (
    get_grok_question, get_grok_summary, build_user_profile,
    get_grok_supportive_message
)
from datetime import datetime, date # –î–æ–±–∞–≤–∏–ª–∏ date
from modules.user_management import UserState
from database.db import Database
import logging

logger = logging.getLogger(__name__)

# --- –°–õ–û–í–ê–†–¨ –ó–ù–ê–ß–ï–ù–ò–ô –ö–ê–†–¢ ---
CARD_MEANINGS = {
    1: {
        "name": "–ú–∞–≥",
        "meaning": "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–∏–ª–∞, –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, –≤–æ–ª—è –∫ –¥–µ–π—Å—Ç–≤–∏—é, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ"
    },
    2: {
        "name": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞",
        "meaning": "–ò–Ω—Ç—É–∏—Ü–∏—è, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å, —Ç–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –º–µ–¥–∏—Ç–∞—Ü–∏—è"
    },
    3: {
        "name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
        "meaning": "–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∏–∑–æ–±–∏–ª–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –ø—Ä–∏—Ä–æ–¥–∞"
    },
    4: {
        "name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
        "meaning": "–í–ª–∞—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç"
    },
    5: {
        "name": "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
        "meaning": "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å, —Ç—Ä–∞–¥–∏—Ü–∏–∏, –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ, –≤–µ—Ä–∞"
    },
    6: {
        "name": "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ",
        "meaning": "–õ—é–±–æ–≤—å, –≤—ã–±–æ—Ä, –≥–∞—Ä–º–æ–Ω–∏—è, –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ, –µ–¥–∏–Ω—Å—Ç–≤–æ"
    },
    7: {
        "name": "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞",
        "meaning": "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥, –∫–æ–Ω—Ç—Ä–æ–ª—å, –ø–æ–±–µ–¥–∞, –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–µ—à–∏–º–æ—Å—Ç—å"
    },
    8: {
        "name": "–°–∏–ª–∞",
        "meaning": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞, –º—É–∂–µ—Å—Ç–≤–æ, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –º—è–≥–∫–∞—è –≤–ª–∞—Å—Ç—å"
    },
    9: {
        "name": "–û—Ç—à–µ–ª—å–Ω–∏–∫",
        "meaning": "–°–∞–º–æ–∞–Ω–∞–ª–∏–∑, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, –ø–æ–∏—Å–∫ –∏—Å—Ç–∏–Ω—ã, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç"
    },
    10: {
        "name": "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
        "meaning": "–ò–∑–º–µ–Ω–µ–Ω–∏—è, —Ü–∏–∫–ª—ã, —Å—É–¥—å–±–∞, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ–≤–æ—Ä–æ—Ç"
    },
    11: {
        "name": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
        "meaning": "–ë–∞–ª–∞–Ω—Å, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, –ø—Ä–∞–≤–¥–∞, –∫–∞—Ä–º–∞, —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ"
    },
    12: {
        "name": "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π",
        "meaning": "–ñ–µ—Ä—Ç–≤–∞, –Ω–æ–≤—ã–π –≤–∑–≥–ª—è–¥, –ø–∞—É–∑–∞, –¥—É—Ö–æ–≤–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ"
    },
    13: {
        "name": "–°–º–µ—Ä—Ç—å",
        "meaning": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ–Ω–µ—Ü –∏ –Ω–∞—á–∞–ª–æ, –≥–ª—É–±–æ–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    },
    14: {
        "name": "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "meaning": "–ë–∞–ª–∞–Ω—Å, –≥–∞—Ä–º–æ–Ω–∏—è, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ, —Å–º–µ—à–µ–Ω–∏–µ"
    },
    15: {
        "name": "–î—å—è–≤–æ–ª",
        "meaning": "–ò—Å–∫—É—à–µ–Ω–∏—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ"
    },
    16: {
        "name": "–ë–∞—à–Ω—è",
        "meaning": "–í–Ω–µ–∑–∞–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä, –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"
    },
    17: {
        "name": "–ó–≤–µ–∑–¥–∞",
        "meaning": "–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ, –≤–µ—Ä–∞"
    },
    18: {
        "name": "–õ—É–Ω–∞",
        "meaning": "–ò–Ω—Ç—É–∏—Ü–∏—è, –∏–ª–ª—é–∑–∏–∏, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Ç–∞–π–Ω—ã"
    },
    19: {
        "name": "–°–æ–ª–Ω—Ü–µ",
        "meaning": "–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, —ç–Ω–µ—Ä–≥–∏—è, –æ–ø—Ç–∏–º–∏–∑–º, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞"
    },
    20: {
        "name": "–°—É–¥",
        "meaning": "–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏–∑—ã–≤, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    },
    21: {
        "name": "–ú–∏—Ä",
        "meaning": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å, –≥–∞—Ä–º–æ–Ω–∏—è"
    },
    22: {
        "name": "–®—É—Ç",
        "meaning": "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –≤–µ—Ä–∞"
    },
    23: {
        "name": "–ö–æ—Ä–æ–ª—å –ú–µ—á–µ–π",
        "meaning": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç, —è—Å–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏, –ø—Ä–∞–≤–¥–∞, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, –≤–ª–∞—Å—Ç—å"
    },
    24: {
        "name": "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á–µ–π",
        "meaning": "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, —è—Å–Ω–æ—Å—Ç—å, –º—É–¥—Ä–æ—Å—Ç—å, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, —Å–∏–ª–∞"
    },
    25: {
        "name": "–†—ã—Ü–∞—Ä—å –ú–µ—á–µ–π",
        "meaning": "–î–µ–π—Å—Ç–≤–∏–µ, –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Å–∫–æ—Ä–æ—Å—Ç—å, –ø–µ—Ä–µ–º–µ–Ω—ã, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    },
    26: {
        "name": "–ü–∞–∂ –ú–µ—á–µ–π",
        "meaning": "–ù–æ–≤—ã–µ –∏–¥–µ–∏, –æ–±—É—á–µ–Ω–∏–µ, –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ, —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∞–ª–æ"
    },
    27: {
        "name": "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–ö–æ–Ω–µ—Ü, –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, –±–æ–ª—å, –ø–µ—Ä–µ—Ö–æ–¥, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ"
    },
    28: {
        "name": "–î–µ–≤—è—Ç–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–¢—Ä–µ–≤–æ–≥–∞, —Å—Ç—Ä–∞—Ö, –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, –∫–æ—à–º–∞—Ä—ã, —Å—Ç—Ä–µ—Å—Å"
    },
    29: {
        "name": "–í–æ—Å—å–º–µ—Ä–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ª–æ–≤—É—à–∫–∞, –±–µ—Å–ø–æ–º–æ—â–Ω–æ—Å—Ç—å, –≤—ã–±–æ—Ä, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ"
    },
    30: {
        "name": "–°–µ–º–µ—Ä–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–•–∏—Ç—Ä–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –æ–±–º–∞–Ω, —Ç–∞–∫—Ç–∏–∫–∞"
    },
    31: {
        "name": "–®–µ—Å—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–ü–µ—Ä–µ—Ö–æ–¥, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ, –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–∞–¥–µ–∂–¥–∞"
    },
    32: {
        "name": "–ü—è—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç, –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ—Ç–µ—Ä—è, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ, —É—Ä–æ–∫"
    },
    33: {
        "name": "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–û—Ç–¥—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏—è, –ø–æ–∫–æ–π, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ"
    },
    34: {
        "name": "–¢—Ä–æ–π–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–ë–æ–ª—å, —Ä–∞–∑–±–∏—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ, —Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, —Ä–∞–∑–ª—É–∫–∞, –ø–µ—á–∞–ª—å"
    },
    35: {
        "name": "–î–≤–æ–π–∫–∞ –ú–µ—á–µ–π",
        "meaning": "–í—ã–±–æ—Ä, –±–∞–ª–∞–Ω—Å, –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–æ–º–ø—Ä–æ–º–∏—Å—Å, —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ"
    },
    36: {
        "name": "–¢—É–∑ –ú–µ—á–µ–π",
        "meaning": "–ù–æ–≤—ã–µ –∏–¥–µ–∏, –ø—Ä–æ—Ä—ã–≤, —è—Å–Ω–æ—Å—Ç—å, –ø—Ä–∞–≤–¥–∞, –ø–æ–±–µ–¥–∞"
    },
    37: {
        "name": "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "meaning": "–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –±–æ–≥–∞—Ç—Å—Ç–≤–æ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å"
    },
    38: {
        "name": "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "meaning": "–ò–∑–æ–±–∏–ª–∏–µ, –∑–∞–±–æ—Ç–∞, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–µ, –¥–æ–º"
    },
    39: {
        "name": "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "meaning": "–¢—Ä—É–¥–æ–ª—é–±–∏–µ, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å"
    },
    40: {
        "name": "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
        "meaning": "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –æ–±—É—á–µ–Ω–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, —Ä–æ—Å—Ç"
    }
}

def get_card_info(card_number: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É.
    
    Args:
        card_number: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (1-40)
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
    """
    return CARD_MEANINGS.get(card_number, {
        "name": f"–ö–∞—Ä—Ç–∞ {card_number}",
        "meaning": "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    })

# --- –ö–û–ù–ï–¶ –°–õ–û–í–ê–†–Ø –ó–ù–ê–ß–ï–ù–ò–ô –ö–ê–†–¢ ---

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ callback -> emoji/text
RESOURCE_LEVELS = {
    "resource_good": "üòä –•–æ—Ä–æ—à–æ",
    "resource_medium": "üòê –°—Ä–µ–¥–Ω–µ",
    "resource_low": "üòî –ù–∏–∑–∫–æ",
}
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∞–º–∏
CARDS_DIR = os.path.join(DATA_DIR, "cards") if DATA_DIR != "/data" else "cards"
if not CARDS_DIR.startswith("/data") and not os.path.exists(CARDS_DIR):
     os.makedirs(CARDS_DIR, exist_ok=True)
     logger.warning(f"Cards directory '{CARDS_DIR}' did not exist and was created. Make sure card images are present.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ò–ó–ú–ï–ù–ï–ù–û) ---
async def get_main_menu(user_id, db: Database):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é. (–ò–ó–ú–ï–ù–ï–ù–û)"""
    keyboard = [
        [types.KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")],
        [types.KeyboardButton(text="üåô –ò—Ç–æ–≥ –¥–Ω—è")]
    ]
    try:
        user_data = db.get_user(user_id)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω ---
        if user_data and user_data.get("bonus_available"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º append –≤–º–µ—Å—Ç–æ insert(1, ...)
            keyboard.append([types.KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    except Exception as e:
        logger.error(f"Error getting user data for main menu (user {user_id}): {e}", exc_info=True)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º persistent=True –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)


# ================================
# === –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –ö–ê–†–¢–´ –î–ù–Ø ===
# ================================

# --- –®–∞–≥ 0: –ù–∞—á–∞–ª–æ —Ñ–ª–æ—É ---
async def handle_card_request(message: types.Message, state: FSMContext, db: Database, logger_service):
    """
    –°–¢–ê–†–¢–û–í–ê–Ø –¢–û–ß–ö–ê —Å—Ü–µ–Ω–∞—Ä–∏—è '–ö–∞—Ä—Ç–∞ –¥–Ω—è'.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞.
    """
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    now = datetime.now(TIMEZONE)
    today = now.date()

    logger.info(f"User {user_id}: Checking card availability for {today}")
    card_available = db.is_card_available(user_id, today)
    logger.info(f"User {user_id}: Card available? {card_available}")

    if user_id not in NO_CARD_LIMIT_USERS and not card_available:
        last_req_time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if user_data and isinstance(user_data.get('last_request'), datetime):
            try:
                last_req_dt = user_data['last_request']
                if last_req_dt.tzinfo is None and pytz:
                    last_req_dt_local = TIMEZONE.localize(last_req_dt).astimezone(TIMEZONE)
                elif last_req_dt.tzinfo:
                    last_req_dt_local = last_req_dt.astimezone(TIMEZONE)
                else: 
                    last_req_dt_local = last_req_dt
                last_req_time_str = last_req_dt_local.strftime('%H:%M %d.%m.%Y')
            except Exception as e:
                logger.error(f"Error formatting last_request time for user {user_id}: {e}")
                last_req_time_str = "–æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"
        text = (f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è (–≤ {last_req_time_str} –ú–°–ö)! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞. ‚ú®" if name else f"–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è (–≤ {last_req_time_str} –ú–°–ö)! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞. ‚ú®")
        logger.info(f"User {user_id}: Sending 'already drawn' message.")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        db.log_scenario_step(user_id, 'card_of_day', 'already_used_today', {
            'last_request_time': last_req_time_str,
            'today': today.isoformat()
        })
        
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        return

    logger.info(f"User {user_id}: Card available, starting initial resource check.")
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
    session_id = db.start_user_scenario(user_id, 'card_of_day')
    db.log_scenario_step(user_id, 'card_of_day', 'started', {
        'session_id': session_id,
        'today': today.isoformat(),
        'card_available': card_available
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(session_id=session_id)

    await logger_service.log_action(user_id, "card_flow_started", {
        "trigger": "button",
        "session_id": session_id
    })
    await ask_initial_resource(message, state, db, logger_service)

# --- –®–∞–≥ 1: –ó–∞–º–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ---
async def ask_initial_resource(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 1: –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ—Å—É—Ä—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! ‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:" if name else "–ü—Ä–∏–≤–µ—Ç! ‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:"
    buttons = [ types.InlineKeyboardButton(text=label.split()[0], callback_data=key) for key, label in RESOURCE_LEVELS.items() ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_initial_resource)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–∞–≥–∞ 1 ---
async def process_initial_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 1.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id
    resource_choice_key = callback.data
    resource_choice_label = RESOURCE_LEVELS.get(resource_choice_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await state.update_data(initial_resource=resource_choice_label)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    db.log_scenario_step(user_id, 'card_of_day', 'initial_resource_selected', {
        'resource': resource_choice_label,
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "initial_resource_selected", {
        "resource": resource_choice_label,
        "session_id": session_id
    })
    await callback.answer(f"–ü–æ–Ω—è–ª, —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {resource_choice_label.split()[0]}")
    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (initial resource) for user {user_id}: {e}")
    await ask_request_type_choice(callback, state, db, logger_service)

# --- –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
async def ask_request_type_choice(event: types.Message | types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 2: –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."""
    if isinstance(event, types.CallbackQuery):
        user_id = event.from_user.id; message = event.message
    else:
        user_id = event.from_user.id; message = event
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""
    text = (f"{name}, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è.\n" if name else "–¢–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è.\n") + ("–ö–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?\n\n1Ô∏è‚É£ –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å <b>–≤ —É–º–µ</b>?\n2Ô∏è‚É£ <b>–ù–∞–ø–∏—Å–∞—Ç—å</b> –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ —á–∞—Ç?\n\n<i>(–ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å, —è —Å–º–æ–≥—É –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–≤–æ–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º ‚ú®).</i>")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[ types.InlineKeyboardButton(text="1Ô∏è‚É£ –í —É–º–µ", callback_data="request_type_mental"), types.InlineKeyboardButton(text="2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data="request_type_typed"), ]])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserState.waiting_for_request_type_choice)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–∞–≥–∞ 2 ---
async def process_request_type_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 2.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id
    request_type = callback.data
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    choice_mode = "mental" if request_type == "request_type_mental" else "typed"
    
    await state.update_data(request_type=request_type)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    db.log_scenario_step(user_id, 'card_of_day', 'request_type_selected', {
        'request_type': choice_mode,
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "question_mode_chosen", {
        "mode": choice_mode,
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (request type) for user {user_id}: {e}")

    if request_type == "request_type_mental":
        await callback.answer("–•–æ—Ä–æ—à–æ, –¥–µ—Ä–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ –≥–æ–ª–æ–≤–µ.")
        await callback.message.answer("–ü–æ–Ω—è–ª. –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç—É...")
        await draw_card_direct(callback.message, state, db, logger_service, user_id=user_id)
    elif request_type == "request_type_typed":
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –∂–¥—É —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.")
        await callback.message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∫–∞—Ä—Ç–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")
        await state.set_state(UserState.waiting_for_request_text_input)

# --- –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ---
async def process_request_text(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 3–∞: –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—É."""
    user_id = message.from_user.id
    request_text = message.text.strip()
    if not request_text: await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º..."); return
    if len(request_text) < 5: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."); return
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    
    await state.update_data(user_request=request_text)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    db.log_scenario_step(user_id, 'card_of_day', 'text_request_provided', {
        'request_length': len(request_text),
        'session_id': session_id
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    db.save_user_request(user_id, request_text, session_id)
    
    await logger_service.log_action(user_id, "typed_question_submitted", {
        "request": request_text,
        "length": len(request_text),
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await message.answer("–°–ø–∞—Å–∏–±–æ! ‚ú® –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    await draw_card_direct(message, state, db, logger_service, user_id=user_id)

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã ---
async def draw_card_direct(message: types.Message, state: FSMContext, db: Database, logger_service, user_id: int):
    """–®–∞–≥ 3b: –í—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–± –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö."""
    user_data_fsm = await state.get_data()
    user_request = user_data_fsm.get("user_request", "")
    session_id = user_data_fsm.get("session_id", "unknown")
    user_db_data = db.get_user(user_id) or {}
    name = user_db_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    now_iso = datetime.now(TIMEZONE).isoformat()

    try:
         db.update_user(user_id, {"last_request": now_iso})
    except Exception as e:
         logger.error(f"Failed to update last_request time for user {user_id}: {e}", exc_info=True)

    card_number = None
    try:
        used_cards = db.get_user_cards(user_id)
        if not os.path.isdir(CARDS_DIR):
             logger.error(f"Cards directory not found or not a directory: {CARDS_DIR}")
             await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å –∫–∞—Ä—Ç–∞–º–∏..."); await state.clear(); return
        all_card_files = [f for f in os.listdir(CARDS_DIR) if f.startswith("card_") and f.endswith(".jpg")]
        if not all_card_files:
            logger.error(f"No card images found in {CARDS_DIR}.")
            await message.answer("–í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç..."); await state.clear(); return
        all_cards = [int(f.replace("card_", "").replace(".jpg", "")) for f in all_card_files]
        available_cards = [c for c in all_cards if c not in used_cards]
        if not available_cards:
            logger.info(f"Card deck reset for user {user_id} as all cards were used.")
            db.reset_user_cards(user_id)
            available_cards = all_cards
        card_number = random.choice(available_cards)
        db.add_user_card(user_id, card_number)
        await state.update_data(card_number=card_number)
    except Exception as card_logic_err:
        logger.error(f"Error during card selection logic for user {user_id}: {card_logic_err}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã...")
        await state.clear()
        return

    card_path = os.path.join(CARDS_DIR, f"card_{card_number}.jpg")
    if not os.path.exists(card_path):
        logger.error(f"Card image file not found: {card_path} after selecting number {card_number} for user {user_id}.")
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å...")
        await state.clear()
        return

    try:
        await message.bot.send_chat_action(message.chat.id, 'upload_photo')
        await message.answer_photo(types.FSInputFile(card_path), protect_content=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        db.log_scenario_step(user_id, 'card_of_day', 'card_drawn', {
            'card_number': card_number,
            'session_id': session_id,
            'user_request': user_request[:100] if user_request else None
        })
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω –ª–æ–≥ —Å–æ–±—ã—Ç–∏—è ---
        await logger_service.log_action(user_id, "card_drawn", {
            "card_number": card_number,
            "session_id": session_id
        })
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        if user_request:
            text = (f"{name}, –≤–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n<i>¬´{user_request}¬ª</i>\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ. –ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –æ–Ω–∞ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç? –í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
                    if name
                    else f"–í–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n<i>¬´{user_request}¬ª</i>\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ. –ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –æ–Ω–∞ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç? –í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        else:
            text = (f"{name}, –≤–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è.\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ. –ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –æ–Ω–∞ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç? –í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
                    if name
                    else f"–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è.\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ. –ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –æ–Ω–∞ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç? –í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–º–æ—Ü–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üòä –†–∞–¥–æ—Å—Ç—å", callback_data="emotion_joy"),
                types.InlineKeyboardButton(text="ü§î –ó–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å", callback_data="emotion_thoughtful")
            ],
            [
                types.InlineKeyboardButton(text="üò• –ü–µ—á–∞–ª—å", callback_data="emotion_sadness"),
                types.InlineKeyboardButton(text="üò† –ó–ª–æ—Å—Ç—å", callback_data="emotion_anger")
            ],
            [
                types.InlineKeyboardButton(text="‚ú® –ù–∞–¥–µ–∂–¥–∞", callback_data="emotion_hope"),
                types.InlineKeyboardButton(text="üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", callback_data="emotion_calm")
            ],
            [
                types.InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="emotion_custom")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserState.waiting_for_emotion_choice)
    except Exception as e:
        logger.error(f"Failed to send card photo or initial question to user {user_id}: {e}", exc_info=True)
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å...")
        await state.clear()

# --- –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ ---
async def process_initial_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    initial_response_text = message.text.strip()
    if not initial_response_text: await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞..."); return
    if len(initial_response_text) < 3: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."); return
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ ---
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")

    await state.update_data(initial_response=initial_response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
    db.log_scenario_step(user_id, 'card_of_day', 'initial_response_provided', {
        'response_length': len(initial_response_text),
        'session_id': session_id
    })

    await logger_service.log_action(user_id, "initial_response_provided", {
        "response": initial_response_text,
        "length": len(initial_response_text),
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await ask_exploration_choice(message, state, db, logger_service)

# --- –®–∞–≥ 5: –í—ã–±–æ—Ä - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ? ---
async def ask_exploration_choice(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    text = (f"{name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –•–æ—á–µ—à—å –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–ª—É–±–∂–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –º–µ–Ω—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç)?" if name else "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –•–æ—á–µ—à—å –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–ª—É–±–∂–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –º–µ–Ω—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç)?")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –î–∞, –¥–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º", callback_data="explore_yes")], [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç", callback_data="explore_no")]])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_exploration_choice)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–∞–≥–∞ 5 ---
async def process_exploration_choice_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    user_id = callback.from_user.id
    choice = callback.data
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    choice_value = "yes" if choice == "explore_yes" else "no"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å –ò–ò
    db.log_scenario_step(user_id, 'card_of_day', 'ai_reflection_choice', {
        'choice': choice_value,
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "exploration_chosen", {
        "choice": choice_value,
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"Could not edit message reply markup (exploration choice) for user {user_id}: {e}")

    if choice == "explore_yes":
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
        await ask_grok_question(callback.message, state, db, logger_service, step=1, user_id=user_id)
    elif choice == "explore_no":
        await callback.answer("–•–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–æ–π.")
        await generate_and_send_summary(user_id=user_id, message=callback.message, state=state, db=db, logger_service=logger_service)
        await finish_interaction_flow(user_id=user_id, message=callback.message, state=state, db=db, logger_service=logger_service)

# --- –®–∞–≥ 6: –¶–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤ Grok ---
async def ask_grok_question(message: types.Message, state: FSMContext, db: Database, logger_service, step: int, user_id: int):
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    user_request = data.get("user_request", "")
    initial_response = data.get("initial_response", "")
    previous_responses_context = { "initial_response": initial_response }
    if step > 1:
        previous_responses_context["grok_question_1"] = data.get("grok_question_1")
        previous_responses_context["first_grok_response"] = data.get("first_grok_response")
    if step > 2:
        previous_responses_context["grok_question_2"] = data.get("grok_question_2")
        previous_responses_context["second_grok_response"] = data.get("second_grok_response")

    if step == 1: current_user_response = initial_response
    elif step == 2: current_user_response = data.get("first_grok_response", "")
    elif step == 3: current_user_response = data.get("second_grok_response", "")
    else:
        logger.error(f"Invalid step number {step} for Grok question for user {user_id}.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —à–∞–≥–∞..."); await state.clear(); return

    if not current_user_response:
        logger.error(f"Missing user response data for step {step} for user {user_id}.")
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞..."); await state.clear(); return

    try:
        await message.bot.send_chat_action(user_id, 'typing')
    except Exception as e:
        logger.error(f"Failed send_chat_action (typing) to user {user_id} in ask_grok_question: {e}")

    grok_question = await get_grok_question(user_id=user_id, user_request=user_request, user_response=current_user_response, feedback_type="exploration", step=step, previous_responses=previous_responses_context, db=db)
    await state.update_data({f"grok_question_{step}": grok_question})
    
    await logger_service.log_action(user_id, "grok_question_asked", {
        "step": step, 
        "question_length": len(grok_question),
        "question": grok_question,
        "session_id": session_id
    })

    try:
        await message.answer(grok_question)
    except Exception as e:
        logger.error(f"Failed to send Grok question (step {step}) to user {user_id}: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å..."); await state.clear(); return

    if step == 1: await state.set_state(UserState.waiting_for_first_grok_response)
    elif step == 2: await state.set_state(UserState.waiting_for_second_grok_response)
    elif step == 3: await state.set_state(UserState.waiting_for_third_grok_response)
    else:
        logger.error(f"Invalid step {step} when trying to set next state for user {user_id}.")
        await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã Grok ---
async def process_first_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    first_response = message.text.strip()
    if not first_response or len(first_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    await state.update_data(first_grok_response=first_response)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –ò–ò-–≤–æ–ø—Ä–æ—Å
    db.log_scenario_step(user_id, 'card_of_day', 'ai_response_1_provided', {
        'response_length': len(first_response),
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "grok_response_provided", {
        "step": 1,
        "response": first_response,
        "length": len(first_response),
        "session_id": session_id
    })
    await ask_grok_question(message, state, db, logger_service, step=2, user_id=user_id)

async def process_second_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    second_response = message.text.strip()
    if not second_response or len(second_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    await state.update_data(second_grok_response=second_response)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –ò–ò-–≤–æ–ø—Ä–æ—Å
    db.log_scenario_step(user_id, 'card_of_day', 'ai_response_2_provided', {
        'response_length': len(second_response),
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "grok_response_provided", {
        "step": 2,
        "response": second_response,
        "length": len(second_response),
        "session_id": session_id
    })
    await ask_grok_question(message, state, db, logger_service, step=3, user_id=user_id)

async def process_third_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    third_response = message.text.strip()
    if not third_response or len(third_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    await state.update_data(third_grok_response=third_response)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –ò–ò-–≤–æ–ø—Ä–æ—Å
    db.log_scenario_step(user_id, 'card_of_day', 'ai_response_3_provided', {
        'response_length': len(third_response),
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "grok_response_provided", {
        "step": 3,
        "response": third_response,
        "length": len(third_response),
        "session_id": session_id
    })
    await generate_and_send_summary(user_id=user_id, message=message, state=state, db=db, logger_service=logger_service)
    try:
        await build_user_profile(user_id, db)
        logger.info(f"User profile updated after full Grok interaction for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to update user profile after interaction for user {user_id}: {e}", exc_info=True)
    await finish_interaction_flow(user_id=user_id, message=message, state=state, db=db, logger_service=logger_service)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏ ---
async def generate_and_send_summary(user_id: int, message: types.Message, state: FSMContext, db: Database, logger_service):
    if not isinstance(user_id, int):
        logger.error("Invalid user_id passed to generate_and_send_summary")
        return

    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    logger.info(f"Starting summary generation for user {user_id}")
    try:
        await message.bot.send_chat_action(user_id, 'typing')
    except Exception as e:
        logger.error(f"Failed send_chat_action (typing) to user {user_id} in generate_and_send_summary: {e}")

    interaction_summary_data = {
        "user_request": data.get("user_request", ""),
        "card_number": data.get("card_number", "N/A"),
        "initial_response": data.get("initial_response"),
        "qna": [
            {"question": data.get("grok_question_1"), "answer": data.get("first_grok_response")},
            {"question": data.get("grok_question_2"), "answer": data.get("second_grok_response")},
            {"question": data.get("grok_question_3"), "answer": data.get("third_grok_response")}
        ]
    }
    interaction_summary_data["qna"] = [item for item in interaction_summary_data["qna"] if item.get("question") and item.get("answer")]
    summary_text = await get_grok_summary(user_id, interaction_summary_data, db)

    if summary_text and not summary_text.startswith(("–û—à–∏–±–∫–∞", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é", "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", "–ü—Ä–æ–∏–∑–æ—à–ª–∞")):
        try:
            await message.answer(f"‚ú® –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã:\n\n<i>{summary_text}</i>", parse_mode="HTML")
            await logger_service.log_action(user_id, "summary_sent", {
                "summary_length": len(summary_text),
                "summary": summary_text,
                "session_id": session_id
            })
        except Exception as e:
            logger.error(f"Failed to send summary message to user {user_id}: {e}", exc_info=True)
    else:
        await logger_service.log_action(user_id, "summary_failed", {"error_message": summary_text, "session_id": session_id})
        try:
            fallback_msg = summary_text if isinstance(summary_text, str) and summary_text.startswith(("–û—à–∏–±–∫–∞", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é", "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", "–ü—Ä–æ–∏–∑–æ—à–ª–∞")) else "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è!"
            await message.answer(fallback_msg)
        except Exception as e:
            logger.error(f"Failed to send fallback/error summary message to user {user_id}: {e}", exc_info=True)

# --- –®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
async def finish_interaction_flow(user_id: int, message: types.Message, state: FSMContext, db: Database, logger_service):
    if not isinstance(user_id, int):
        logger.error("Invalid user_id passed to finish_interaction_flow")
        try:
            menu_user_id = message.from_user.id if message and message.from_user else user_id
            await message.answer("–ó–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é...", reply_markup=await get_main_menu(menu_user_id, db))
            await state.clear()
            logger.warning(f"Cleared state for INVALID user_id reference after failing to send final resource question.")
        except Exception as clear_err:
             logger.error(f"Failed to clear state for INVALID user_id reference: {clear_err}", exc_info=True)
        return

    user_db_data = db.get_user(user_id) or {}
    name = user_db_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    data = await state.get_data()
    initial_resource = data.get("initial_resource", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    text = (f"{name}, –Ω–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. üôè\n–¢—ã –Ω–∞—á–∞–ª–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '{initial_resource}'.\n\n–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è <b>—Å–µ–π—á–∞—Å</b>? –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Å—É—Ä—Å–∞?"
            if name
            else f"–ù–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. üôè\n–¢—ã –Ω–∞—á–∞–ª–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '{initial_resource}'.\n\n–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è <b>—Å–µ–π—á–∞—Å</b>? –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Å—É—Ä—Å–∞?")
    buttons = [types.InlineKeyboardButton(text=label.split()[0], callback_data=key) for key, label in RESOURCE_LEVELS.items()]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    try:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserState.waiting_for_final_resource)
    except Exception as e:
        logger.error(f"Failed to send final resource question to user {user_id}: {e}", exc_info=True)
        try:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=await get_main_menu(user_id, db))
            await state.clear()
            logger.warning(f"Cleared state for user {user_id} after failing to send final resource question.")
        except Exception as clear_err:
            logger.error(f"Failed to clear state for user {user_id} after message send failure: {clear_err}", exc_info=True)

# --- –®–∞–≥ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ---
async def process_final_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    user_id = callback.from_user.id
    resource_choice_key = callback.data
    resource_choice_label = RESOURCE_LEVELS.get(resource_choice_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    await state.update_data(final_resource=resource_choice_label)
    initial_resource = data.get("initial_resource", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    resource_change = "same"
    if initial_resource != resource_choice_label:
        resource_levels = ["üòî –ù–∏–∑–∫–æ", "üòê –°—Ä–µ–¥–Ω–µ", "üòä –•–æ—Ä–æ—à–æ", "ü§© –û—Ç–ª–∏—á–Ω–æ"]
        try:
            initial_index = resource_levels.index(initial_resource)
            final_index = resource_levels.index(resource_choice_label)
            if final_index > initial_index:
                resource_change = "better"
            elif final_index < initial_index:
                resource_change = "worse"
        except ValueError:
            resource_change = "unknown"
    db.log_scenario_step(user_id, 'card_of_day', 'mood_change_recorded', {
        'initial_resource': initial_resource,
        'final_resource': resource_choice_label,
        'change_direction': resource_change,
        'session_id': session_id
    })
    await logger_service.log_action(user_id, "final_resource_selected", {
        "resource": resource_choice_label,
        "session_id": session_id
    })
    await callback.answer(f"–ü–æ–Ω—è–ª, —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–π—á–∞—Å: {resource_choice_label.split()[0]}")
    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (final resource) for user {user_id}: {e}")

    if resource_choice_key == "resource_low":
        # –ù–æ–≤—ã–π UX: –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ
        last_method = db.get_last_recharge_method(user_id)
        logger.info(f"User {user_id}: Resource is low. Last recharge method: {last_method}")
        
        if last_method:
            logger.info(f"User {user_id}: Offering saved recharge method: {last_method}")
            text = (f"–†–∞–Ω–µ–µ —Ç—ã –æ—Ç–º–µ—á–∞–ª(–∞), —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å: <b>{last_method}</b>.\n\n"
                    "–•–æ—á–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º —Å–µ–π—á–∞—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π?")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–î–∞, –≤–æ—Å–ø–æ–ª—å–∑—É—é—Å—å —ç—Ç–∏–º", callback_data="use_last_recharge")],
                [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±", callback_data="add_new_recharge")]
            ])
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            await state.set_state(UserState.waiting_for_recharge_method_choice)
            return
        else:
            logger.info(f"User {user_id}: No saved recharge method found, asking for new one")
            try:
                await callback.message.answer("–ú–Ω–µ –∂–∞–ª—å —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —Ä–µ—Å—É—Ä—Å –Ω–∞ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ...")
                await callback.message.bot.send_chat_action(user_id, 'typing')
                supportive_message_with_question = await get_grok_supportive_message(user_id, db)
                await callback.message.answer(supportive_message_with_question)
                await logger_service.log_action(user_id, "support_message_sent", {"session_id": session_id})
                await state.set_state(UserState.waiting_for_recharge_method)
            except Exception as e:
                logger.error(f"Failed to send supportive message or set state for user {user_id}: {e}", exc_info=True)
                await show_final_feedback_and_menu(callback.message, state, db, logger_service, user_id=user_id)
    else:
        await callback.message.answer(f"–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{resource_choice_label}'! ‚ú®")
        await show_final_feedback_and_menu(callback.message, state, db, logger_service, user_id=user_id)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
async def process_recharge_method_choice(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    user_id = callback.from_user.id
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    if callback.data == "use_last_recharge":
        last_method = db.get_last_recharge_method(user_id)
        if last_method:
            await callback.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–µ–π—á–∞—Å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º: <b>{last_method}</b>\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.", parse_mode="HTML")
            await show_final_feedback_and_menu(callback.message, state, db, logger_service, user_id=user_id)
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.")
            await state.set_state(UserState.waiting_for_recharge_method)
    elif callback.data == "add_new_recharge":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.")
        await state.set_state(UserState.waiting_for_recharge_method)
    else:
        await callback.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö.", show_alert=True)

# --- –®–∞–≥ 8.5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_recharge_method(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    recharge_method_text = message.text.strip()
    user_db_data = db.get_user(user_id) or {}
    name = user_db_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    if not recharge_method_text: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."); return
    if len(recharge_method_text) < 5: await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (—Ö–æ—Ç—è –±—ã 5 —Å–∏–º–≤–æ–ª–æ–≤)."); return

    data = await state.get_data()
    session_id = data.get("session_id", "unknown")

    try:
        now_iso = datetime.now(TIMEZONE).isoformat()
        db.add_recharge_method(user_id, recharge_method_text, now_iso)
        await state.update_data(recharge_method=recharge_method_text)
        await logger_service.log_action(user_id, "recharge_method_provided", {
            "length": len(recharge_method_text),
            "response": recharge_method_text,
            "session_id": session_id
        })
        logger.info(f"Recharge method '{recharge_method_text}' added to separate table for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to add recharge method to DB for user {user_id}: {e}", exc_info=True)

    final_text = (f"{name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –ó–∞–ø–æ–º–Ω—é —ç—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–ª—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è. –¢—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω(–Ω–∞). ‚ù§Ô∏è" if name else f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –ó–∞–ø–æ–º–Ω—é —ç—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–ª—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è. –¢—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω(–Ω–∞). ‚ù§Ô∏è")
    await message.answer(final_text, parse_mode="HTML")
    await show_final_feedback_and_menu(message, state, db, logger_service, user_id=user_id)


# --- –®–∞–≥ 9: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –æ—á–∏—Å—Ç–∫–∞ ---
async def show_final_feedback_and_menu(message: types.Message, state: FSMContext, db: Database, logger_service, user_id: int):
    if not isinstance(user_id, int):
        logger.error("Invalid user_id passed to show_final_feedback_and_menu")
        await state.clear(); return

    user_db_data = db.get_user(user_id) or {}
    name = user_db_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    data = await state.get_data()
    card_number = data.get("card_number", 0)
    session_id = data.get("session_id", "unknown")

    try:
        final_profile_data = {
            "initial_resource": data.get("initial_resource"),
            "final_resource": data.get("final_resource"),
            "last_updated": datetime.now(TIMEZONE)
        }
        final_profile_data = {k: v for k, v in final_profile_data.items() if v is not None}
        if final_profile_data:
            db.update_user_profile(user_id, final_profile_data)
            logger.info(f"Final profile data (resources) saved for user {user_id} before state clear.")
    except Exception as e:
        logger.error(f"Error saving final profile resource data for user {user_id} before clear: {e}", exc_info=True)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
    db.complete_user_scenario(user_id, 'card_of_day', session_id)
    db.log_scenario_step(user_id, 'card_of_day', 'completed', {
        'card_number': card_number,
        'session_id': session_id,
        'initial_resource': data.get("initial_resource"),
        'final_resource': data.get("final_resource")
    })
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ---
    await logger_service.log_action(user_id, "card_flow_completed", {
        "card_session": card_number,
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    try:
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ—é –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üôè –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ - —ç—Ç–æ –ø—É—Ç—å –∫ —Å–µ–±–µ.", reply_markup=await get_main_menu(user_id, db))
    except Exception as e:
        logger.error(f"Failed to send final thank you message to user {user_id}: {e}", exc_info=True)

    feedback_text = f"{name}, –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è –≤ —Ü–µ–ª–æ–º? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?" if name else "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è –≤ —Ü–µ–ª–æ–º? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?"
    feedback_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üëç –î–∞, –ø–æ–º–æ–≥–ª–æ!", callback_data=f"feedback_v2_helped_{card_number}")],
        [types.InlineKeyboardButton(text="ü§î –ë—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"feedback_v2_interesting_{card_number}")],
        [types.InlineKeyboardButton(text="üòï –ù–µ –æ—á–µ–Ω—å / –ù–µ —Ö–≤–∞—Ç–∏–ª–æ", callback_data=f"feedback_v2_notdeep_{card_number}")]
    ])
    try:
        await message.answer(feedback_text, reply_markup=feedback_keyboard)
        await logger_service.log_action(user_id, "final_feedback_prompted", {
            "card_session": card_number,
            "session_id": session_id
        })
    except Exception as e:
        logger.error(f"Failed to send final feedback prompt to user {user_id}: {e}", exc_info=True)

    try:
        current_state_before_clear = await state.get_state()
        current_data_before_clear = await state.get_data()
        logger.info(f"Clearing state for user {user_id} after card session. Current state: {current_state_before_clear}. Data: {current_data_before_clear}")
        await state.clear()
        current_state_after_clear = await state.get_state()
        logger.info(f"State cleared for user {user_id}. New state: {current_state_after_clear}")
    except Exception as e:
         logger.error(f"Failed to clear state for user {user_id}: {e}", exc_info=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (üëç/ü§î/üòï) ===
async def process_card_feedback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    user_id = callback.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    callback_data = callback.data
    feedback_type = "unknown"
    card_number = 0

    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown_post_session") # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ—á–∏—â–µ–Ω–æ

    try:
        parts = callback_data.split('_');
        if len(parts) >= 4 and parts[0] == 'feedback' and parts[1] == 'v2':
            feedback_type = parts[2]
            try:
                card_number = int(parts[-1])
            except ValueError:
                logger.error(f"Could not parse card number from feedback callback data: {callback_data} for user {user_id}")
                card_number = 0

            text_map = {
                "helped": "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –Ω–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω–æ–π. üòä –ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞!",
                "interesting": "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ —É–≥–ª—ã –∑—Ä–µ–Ω–∏—è - —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üëç",
                "notdeep": f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è." if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."
            }
            text = text_map.get(feedback_type)

            if not text:
                logger.warning(f"Unknown feedback_v2 type: {feedback_type} received from user {user_id}")
                await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", show_alert=False)
                try: await callback.message.edit_reply_markup(reply_markup=None)
                except Exception: pass
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
            db.log_scenario_step(user_id, 'card_of_day', 'usefulness_rating', {
                'rating': feedback_type,
                'card_number': card_number,
                'session_id': session_id
            })
            
            await logger_service.log_action(user_id, "interaction_feedback_provided", {
                "card_session": card_number, 
                "feedback": feedback_type,
                "bot_response": text,
                "session_id": session_id
            })

            try: await callback.message.edit_reply_markup(reply_markup=None)
            except Exception as e: logger.warning(f"Could not edit message reply markup (feedback buttons) for user {user_id}: {e}")

            try:
                await callback.message.answer(text, reply_markup=await get_main_menu(user_id, db))
                await callback.answer()
            except Exception as e:
                logger.error(f"Failed to send feedback confirmation message to user {user_id}: {e}", exc_info=True)
                await callback.answer("–°–ø–∞—Å–∏–±–æ!", show_alert=False)

        else:
             logger.warning(f"Unknown or old feedback callback data format received: {callback_data} from user {user_id}")
             await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", show_alert=False)
             try: await callback.message.edit_reply_markup(reply_markup=None)
             except Exception: pass
             return

    except Exception as e:
        logger.error(f"Error processing interaction feedback for user {user_id}: {e}", exc_info=True)
        try: await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        except Exception: pass

# --- –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏ ---
async def process_emotion_choice(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = callback.from_user.id
    emotion_choice = callback.data
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    
    # –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    emotion_mapping = {
        "emotion_joy": "–†–∞–¥–æ—Å—Ç—å",
        "emotion_thoughtful": "–ó–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å", 
        "emotion_sadness": "–ü–µ—á–∞–ª—å",
        "emotion_anger": "–ó–ª–æ—Å—Ç—å",
        "emotion_hope": "–ù–∞–¥–µ–∂–¥–∞",
        "emotion_calm": "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
    }
    
    if emotion_choice == "emotion_custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ –∏–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ...")
        await state.set_state(UserState.waiting_for_custom_response)
        await callback.answer()
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–Ω—É –∏–∑ —ç–º–æ—Ü–∏–π
    selected_emotion = emotion_mapping.get(emotion_choice, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–º–æ—Ü–∏—è")
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"Could not edit message reply markup (emotion choice) for user {user_id}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —ç–º–æ—Ü–∏—é
    await state.update_data(initial_response=selected_emotion)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
    db.log_scenario_step(user_id, 'card_of_day', 'emotion_choice_provided', {
        'emotion': selected_emotion,
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "emotion_choice_provided", {
        "emotion": selected_emotion,
        "session_id": session_id
    })
    
    await callback.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await ask_exploration_choice(callback.message, state, db, logger_service)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
async def process_custom_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ '–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'."""
    user_id = message.from_user.id
    custom_response_text = message.text.strip()
    
    if not custom_response_text:
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞...")
        return
    
    if len(custom_response_text) < 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ...")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    data = await state.get_data()
    session_id = data.get("session_id", "unknown")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    await state.update_data(initial_response=custom_response_text)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    db.log_scenario_step(user_id, 'card_of_day', 'custom_response_provided', {
        'response_length': len(custom_response_text),
        'session_id': session_id
    })
    
    await logger_service.log_action(user_id, "custom_response_provided", {
        "response": custom_response_text,
        "length": len(custom_response_text),
        "session_id": session_id
    })
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await ask_exploration_choice(message, state, db, logger_service)
