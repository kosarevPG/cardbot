# –∫–æ–¥/modules/scheduler.py

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
import pytz

logger = logging.getLogger(__name__)

class MailingScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
    
    def __init__(self, post_manager, check_interval: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            post_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä PostManager
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
        """
        self.post_manager = post_manager
        self.check_interval = check_interval
        self.is_running = False
        self.task: Optional[asyncio.Task] = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.is_running:
            logger.warning("Scheduler is already running")
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self._run_scheduler())
        logger.info(f"Mailing scheduler started with {self.check_interval}s interval")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self.is_running:
            logger.warning("Scheduler is not running")
            return
        
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("Mailing scheduler stopped")
    
    async def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while self.is_running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                result = await self.post_manager.process_pending_mailings()
                
                if result['processed'] > 0:
                    logger.info(f"Processed {result['processed']} mailings: "
                              f"{result['total_sent']} sent, {result['total_failed']} failed")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except asyncio.CancelledError:
                logger.info("Scheduler task cancelled")
                break
            except Exception as e:
                logger.error(f"Error in scheduler loop: {e}", exc_info=True)
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(min(self.check_interval, 10))
    
    async def process_mailings_now(self) -> dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            result = await self.post_manager.process_pending_mailings()
            logger.info(f"Manual processing completed: {result}")
            return result
        except Exception as e:
            logger.error(f"Error in manual processing: {e}", exc_info=True)
            return {'processed': 0, 'total_sent': 0, 'total_failed': 0, 'error': str(e)}
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        return {
            'is_running': self.is_running,
            'check_interval': self.check_interval,
            'task_running': self.task is not None and not self.task.done()
        }

# --- –ù–û–í–´–ô –ö–õ–ê–°–°: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π ---
class ReflectionAnalysisScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    def __init__(self, bot, db, check_interval: int = 3600):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
        """
        self.bot = bot
        self.db = db
        self.check_interval = check_interval
        self.is_running = False
        self.task: Optional[asyncio.Task] = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.is_running:
            logger.warning("Reflection analysis scheduler is already running")
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self._run_scheduler())
        logger.info(f"Reflection analysis scheduler started with {self.check_interval}s interval")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self.is_running:
            logger.warning("Reflection analysis scheduler is not running")
            return
        
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("Reflection analysis scheduler stopped")
    
    async def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                await self._check_weekly_analysis()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except asyncio.CancelledError:
                logger.info("Reflection analysis scheduler task cancelled")
                break
            except Exception as e:
                logger.error(f"Error in reflection analysis scheduler loop: {e}", exc_info=True)
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(min(self.check_interval, 10))
    
    async def _check_weekly_analysis(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
        try:
            now = datetime.now()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
            if now.weekday() == 6 and now.hour == 20 and now.minute < 5:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 20:00-20:05
                logger.info("It's Sunday 20:00, starting weekly reflection analysis...")
                await self._run_weekly_analysis()
                
        except Exception as e:
            logger.error(f"Error checking weekly analysis schedule: {e}", exc_info=True)
    
    async def _run_weekly_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            user_ids = self.db.get_users_with_recent_reflections(days=7)
            logger.info(f"Starting weekly analysis for {len(user_ids)} users")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in user_ids:
                try:
                    await self._send_weekly_analysis(user_id)
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"Error sending weekly analysis to user {user_id}: {e}", exc_info=True)
            
            logger.info(f"Weekly analysis completed for {len(user_ids)} users")
            
        except Exception as e:
            logger.error(f"Error running weekly analysis: {e}", exc_info=True)
    
    async def _send_weekly_analysis(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            reflections = self.db.get_reflections_for_last_n_days(user_id, days=7)
            
            if len(reflections) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from .ai_service import get_weekly_analysis
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
                analysis = await get_weekly_analysis(reflections)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.bot.send_message(
                    user_id,
                    f"üåô **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π**\n\n{analysis}",
                    parse_mode="Markdown"
                )
                
                logger.info(f"Weekly analysis sent to user {user_id}")
            else:
                logger.info(f"User {user_id} has only {len(reflections)} reflections, skipping weekly analysis")
                
        except Exception as e:
            logger.error(f"Error sending weekly analysis to user {user_id}: {e}", exc_info=True)
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        return {
            'is_running': self.is_running,
            'check_interval': self.check_interval,
            'task_running': self.task is not None and not self.task.done()
        }

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–õ–ê–°–°–ê --- 