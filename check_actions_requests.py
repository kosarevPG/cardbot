#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ actions –∏–∑ dump_production.db
"""
import sqlite3
import json
from datetime import datetime

def check_actions_requests():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ actions"""
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–û–í –í –¢–ê–ë–õ–ò–¶–ï ACTIONS")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('database/dump_production.db')
        conn.row_factory = sqlite3.Row
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        cursor = conn.execute("SELECT DISTINCT action FROM actions ORDER BY action")
        actions = [row['action'] for row in cursor.fetchall()]
        print(f"üìä –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ actions:")
        for action in actions:
            cursor = conn.execute("SELECT COUNT(*) as count FROM actions WHERE action = ?", (action,))
            count = cursor.fetchone()['count']
            print(f"  ‚Ä¢ {action}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ (card_request)
        print(f"\nüìã –ê–ù–ê–õ–ò–ó –ó–ê–ü–ò–°–ï–ô card_request:")
        cursor = conn.execute("""
            SELECT user_id, username, name, details, timestamp
            FROM actions 
            WHERE action = 'card_request'
            ORDER BY timestamp DESC
            LIMIT 10
        """)
        
        requests_found = 0
        for row in cursor.fetchall():
            requests_found += 1
            user_id = row['user_id']
            username = row['username'] or "–±–µ–∑ username"
            name = row['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            details = row['details']
            timestamp = row['timestamp']
            
            # –ü–∞—Ä—Å–∏–º details (JSON)
            try:
                details_data = json.loads(details)
                card_number = details_data.get('card_number', 'N/A')
                reflection_question = details_data.get('reflection_question', '')
            except:
                card_number = 'N/A'
                reflection_question = details_data if isinstance(details_data, str) else str(details_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = timestamp
            
            print(f"\nüî∏ –ó–ê–ü–†–û–° #{requests_found}")
            print(f"   üìÖ –î–∞—Ç–∞: {formatted_date}")
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | {name} | @{username}")
            print(f"   üé¥ –ö–∞—Ä—Ç–∞: {card_number}")
            if reflection_question:
                print(f"   üí¨ –í–æ–ø—Ä–æ—Å: ¬´{reflection_question}¬ª")
            print(f"   {'‚îÄ' * 50}")
        
        print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û –ó–ê–ü–†–û–°–û–í: {requests_found}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor = conn.execute("""
            SELECT user_id, COUNT(*) as requests_count
            FROM actions 
            WHERE action = 'card_request'
            GROUP BY user_id
            ORDER BY requests_count DESC
            LIMIT 5
        """)
        
        print(f"\nüë• –¢–û–ü-5 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ó–ê–ü–†–û–°–û–í:")
        for row in cursor.fetchall():
            user_id = row['user_id']
            count = row['requests_count']
            print(f"  ‚Ä¢ {user_id}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        conn.close()
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_actions_requests() 