#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à–∞–≥–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
"""

import sqlite3
import json
from datetime import datetime, timedelta
import os

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "database/dev.db"

def check_all_funnel_steps(days=7):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    
    try:
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –®–ê–ì–û–í –í–û–†–û–ù–ö–ò '–ö–ê–†–¢–ê –î–ù–Ø' (–∑–∞ {days} –¥–Ω–µ–π)")
        print("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è card_of_day
        cursor = conn.execute(f"""
            SELECT DISTINCT step, COUNT(*) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND timestamp >= datetime('now', '-{days} days')
            GROUP BY step
            ORDER BY count DESC
        """)
        
        steps = cursor.fetchall()
        
        print(f"\nüìä –í–°–ï –ó–ê–õ–û–ì–ò–†–û–í–ê–ù–ù–´–ï –®–ê–ì–ò:")
        for step in steps:
            print(f"  ‚Ä¢ {step['step']}: {step['count']} —Å–æ–±—ã—Ç–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤
        expected_steps = [
            'started',
            'initial_resource_selected', 
            'request_type_selected',
            'text_request_provided',  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            'card_drawn',
            'initial_response_provided',
            'ai_reflection_choice',
            'ai_response_1_provided',  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            'ai_response_2_provided',  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            'ai_response_3_provided',  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            'mood_change_recorded',
            'completed',
            'usefulness_rating',
            'already_used_today'  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        ]
        
        print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –®–ê–ì–û–í:")
        for i, step in enumerate(expected_steps, 1):
            count = next((s['count'] for s in steps if s['step'] == step), 0)
            status = "‚úÖ" if count > 0 else "‚ùå"
            print(f"  {i:2d}. {status} {step}: {count} —Å–æ–±—ã—Ç–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏
        print(f"\nüìà –û–°–ù–û–í–ù–ê–Ø –í–û–†–û–ù–ö–ê:")
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'started'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        started = cursor.fetchone()['count']
        print(f"1Ô∏è‚É£ –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é: {started} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 2: –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'initial_resource_selected'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        resource_selected = cursor.fetchone()['count']
        print(f"2Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å: {resource_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 3: –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'request_type_selected'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        request_type_selected = cursor.fetchone()['count']
        print(f"3Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 4: –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'card_drawn'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        card_drawn = cursor.fetchone()['count']
        print(f"4Ô∏è‚É£ –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É: {card_drawn} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 5: –ù–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'initial_response_provided'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        initial_response_provided = cursor.fetchone()['count']
        print(f"5Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–ª–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é: {initial_response_provided} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 6: –í—ã–±—Ä–∞–ª–∏ —É–≥–ª—É–±–ª—è—é—â–∏–π –¥–∏–∞–ª–æ–≥
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_reflection_choice'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        ai_reflection_choice = cursor.fetchone()['count']
        print(f"6Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —É–≥–ª—É–±–ª—è—é—â–∏–π –¥–∏–∞–ª–æ–≥: {ai_reflection_choice} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'completed'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        completed = cursor.fetchone()['count']
        print(f"7Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: {completed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å
        print(f"\nüö® –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–†–¨:")
        if started > 0:
            print(f"  ‚Ä¢ –®–∞–≥ 1‚Üí2: {started - resource_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((started - resource_selected) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 2‚Üí3: {resource_selected - request_type_selected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((resource_selected - request_type_selected) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 3‚Üí4: {request_type_selected - card_drawn} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((request_type_selected - card_drawn) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 4‚Üí5: {card_drawn - initial_response_provided} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((card_drawn - initial_response_provided) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 5‚Üí6: {initial_response_provided - ai_reflection_choice} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((initial_response_provided - ai_reflection_choice) / started * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 6‚Üí7: {ai_reflection_choice - completed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({((ai_reflection_choice - completed) / started * 100):.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
        print(f"\nüîç –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –®–ê–ì–ò:")
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'text_request_provided'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        text_requests = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ù–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {text_requests} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # AI –æ—Ç–≤–µ—Ç—ã
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_response_1_provided'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        ai_response_1 = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ AI –æ—Ç–≤–µ—Ç 1: {ai_response_1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_response_2_provided'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        ai_response_2 = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ AI –æ—Ç–≤–µ—Ç 2: {ai_response_2} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_response_3_provided'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        ai_response_3 = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ AI –æ—Ç–≤–µ—Ç 3: {ai_response_3} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'mood_change_recorded'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        mood_change = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ó–∞–ø–∏—Å–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_change} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'usefulness_rating'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        usefulness_rating = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –û—Ü–µ–Ω–∏–ª–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {usefulness_rating} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        cursor = conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'already_used_today'
            AND timestamp >= datetime('now', '-{days} days')
        """)
        already_used = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è: {already_used} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print(f"\n‚úÖ –ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø: {completed}/{started} = {(completed/started*100):.1f}%" if started > 0 else "\n‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
        logged_steps = {step['step'] for step in steps}
        missing_steps = set(expected_steps) - logged_steps
        
        if missing_steps:
            print(f"\n‚ö†Ô∏è –®–ê–ì–ò, –ö–û–¢–û–†–´–ï –ù–ï –õ–û–ì–ò–†–£–Æ–¢–°–Ø:")
            for step in missing_steps:
                print(f"  ‚Ä¢ {step}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —à–∞–≥–∏
        unexpected_steps = logged_steps - set(expected_steps)
        if unexpected_steps:
            print(f"\n‚ùì –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ï –®–ê–ì–ò:")
            for step in unexpected_steps:
                print(f"  ‚Ä¢ {step}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    check_all_funnel_steps(7) 