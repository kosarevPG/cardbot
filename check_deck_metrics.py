#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def check_deck_metrics():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–ª–æ–¥."""
    db_path = "bot (8).db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    print('\n=== –ü–†–û–í–ï–†–ö–ê v_decks_daily ===')
    try:
        cursor = conn.execute('SELECT * FROM v_decks_daily LIMIT 5')
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ VIEW —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–∏:')
            for row in rows:
                print(f'  {dict(row)}')
        else:
            print('‚ùå VIEW –ø—É—Å—Ç–æ–π')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –ü–†–û–í–ï–†–ö–ê scenario_logs –¥–ª—è –∫–æ–ª–æ–¥ ===')
    try:
        cursor = conn.execute("""
            SELECT 
                JSON_EXTRACT(metadata, '$.deck_name') as deck_name,
                COUNT(*) as count
            FROM scenario_logs 
            WHERE step = 'deck_selected' 
            AND DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            GROUP BY deck_name
        """)
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–æ–¥–∞–º –≤ scenario_logs:')
            for row in rows:
                print(f'  {dict(row)}')
        else:
            print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–æ–¥–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –ü–†–û–í–ï–†–ö–ê –≤—Å–µ—Ö deck_selected –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ ===')
    try:
        cursor = conn.execute("""
            SELECT 
                DATE(timestamp, '+3 hours') as date,
                JSON_EXTRACT(metadata, '$.deck_name') as deck_name,
                COUNT(*) as count
            FROM scenario_logs 
            WHERE step = 'deck_selected' 
            AND DATE(timestamp, '+3 hours') >= DATE('now', '+3 hours', '-7 days')
            GROUP BY DATE(timestamp, '+3 hours'), deck_name
            ORDER BY date DESC
        """)
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–æ–¥–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:')
            for row in rows:
                print(f'  {dict(row)}')
        else:
            print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–æ–¥–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –ü–†–û–í–ï–†–ö–ê card_drawn ===')
    try:
        cursor = conn.execute("""
            SELECT 
                DATE(timestamp, '+3 hours') as date,
                COUNT(*) as count
            FROM scenario_logs 
            WHERE step = 'card_drawn' 
            AND DATE(timestamp, '+3 hours') >= DATE('now', '+3 hours', '-7 days')
            GROUP BY DATE(timestamp, '+3 hours')
            ORDER BY date DESC
        """)
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ –≤—ã—Ç—è–Ω—É—Ç—ã–º –∫–∞—Ä—Ç–∞–º:')
            for row in rows:
                print(f'  {dict(row)}')
        else:
            print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã—Ç—è–Ω—É—Ç—ã–º –∫–∞—Ä—Ç–∞–º')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    conn.close()

if __name__ == "__main__":
    check_deck_metrics()
