#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def check_events():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ scenario_logs."""
    db_path = "bot (8).db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    print('\n=== –í–°–ï –°–û–ë–´–¢–ò–Ø –ó–ê –°–ï–ì–û–î–ù–Ø ===')
    try:
        cursor = conn.execute("""
            SELECT step, COUNT(*) as count
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            GROUP BY step
            ORDER BY count DESC
        """)
        rows = cursor.fetchall()
        for row in rows:
            print(f'  {row["step"]}: {row["count"]}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –ú–ï–¢–ê–î–ê–ù–ù–´–ï –° –°–ï–ì–û–î–ù–Ø (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ deck) ===')
    try:
        cursor = conn.execute("""
            SELECT step, metadata
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            AND metadata LIKE '%deck%'
            LIMIT 5
        """)
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                print(f'  {row["step"]}: {row["metadata"]}')
        else:
            print('‚ùå –ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å deck')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–û–ë–´–¢–ò–ô –°–ï–ì–û–î–ù–Ø ===')
    try:
        cursor = conn.execute("""
            SELECT step, metadata, timestamp
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            ORDER BY timestamp DESC
            LIMIT 5
        """)
        rows = cursor.fetchall()
        for row in rows:
            print(f'  {row["timestamp"]} | {row["step"]}: {row["metadata"]}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    conn.close()

if __name__ == "__main__":
    check_events()
