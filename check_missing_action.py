#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ actions
"""
import sqlite3
import json

def check_missing_action():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ actions"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ actions")
        print(f"üìÅ –ë–î: {db_path}")
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
        cursor = conn.execute("""
            SELECT * FROM actions 
            WHERE id = 8481 OR user_id = 1740579634 OR action_type = 'initial_response_provided'
            ORDER BY timestamp DESC
        """)
        
        actions = cursor.fetchall()
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(actions)} –∑–∞–ø–∏—Å–µ–π:")
        
        for row in actions:
            print(f"\nüìù ID: {row['id']}")
            print(f"üë§ User ID: {row['user_id']}")
            print(f"üè∑Ô∏è Action: {row['action_type']}")
            print(f"üìÖ Timestamp: {row['timestamp']}")
            
            if row['details']:
                try:
                    details = json.loads(row['details'])
                    print(f"üìÑ Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
                except:
                    print(f"üìÑ Details (raw): {row['details']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –∑–∞–ø–∏—Å—å –≤ user_requests
            cursor2 = conn.execute("""
                SELECT * FROM user_requests 
                WHERE user_id = ? AND request_text LIKE ?
            """, (row['user_id'], '%–ß—É–≤—Å—Ç–≤–æ —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç —Ö–æ—Ä–æ—à–∏–µ —Å–æ–±–∏—Ç–∏—è%'))
            
            user_requests = cursor2.fetchall()
            if user_requests:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ user_requests: {len(user_requests)} –∑–∞–ø–∏—Å–µ–π")
                for ur in user_requests:
                    print(f"  ‚Ä¢ ID: {ur['id']}, Text: {ur['request_text'][:50]}...")
            else:
                print(f"‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ user_requests")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ initial_response_provided
        print(f"\nüîç –í—Å–µ –∑–∞–ø–∏—Å–∏ initial_response_provided:")
        cursor = conn.execute("""
            SELECT id, user_id, action_type, details, timestamp
            FROM actions 
            WHERE action_type = 'initial_response_provided'
            ORDER BY timestamp DESC
            LIMIT 10
        """)
        
        initial_responses = cursor.fetchall()
        for row in initial_responses:
            print(f"\nüìù ID: {row['id']} | User: {row['user_id']} | Time: {row['timestamp'][:16]}")
            if row['details']:
                try:
                    details = json.loads(row['details'])
                    response = details.get('response', '–ù–µ—Ç response')
                    print(f"üí¨ Response: {response[:50]}...")
                except:
                    print(f"üí¨ Details: {row['details'][:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1740579634 –≤ user_requests
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1740579634 –≤ user_requests:")
        cursor = conn.execute("""
            SELECT * FROM user_requests 
            WHERE user_id = 1740579634
            ORDER BY timestamp DESC
        """)
        
        user_requests = cursor.fetchall()
        if user_requests:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(user_requests)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1740579634:")
            for ur in user_requests:
                print(f"  ‚Ä¢ ID: {ur['id']} | Text: {ur['request_text'][:50]}... | Time: {ur['timestamp'][:16]}")
        else:
            print(f"‚ùå –ó–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1740579634 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_missing_action() 