#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ actions
"""
import sqlite3
import json
import os

def check_missing_requests():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"üìÅ –ë–î: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å 'request' –≤ details
        action_types = [
            'typed_question_submitted',
            'initial_response_provided', 
            'set_request',
            'request_text_provided',
            'initial_response',
            'card_drawn_with_request'
        ]
        
        for action_type in action_types:
            print(f"\nüìù –ü—Ä–æ–≤–µ—Ä—è–µ–º {action_type}:")
            
            cursor = conn.execute("""
                SELECT user_id, details, timestamp 
                FROM actions 
                WHERE action = ? 
                AND details LIKE '%request%'
                ORDER BY timestamp DESC
            """, (action_type,))
            
            records = cursor.fetchall()
            print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π")
            
            if records:
                print(f"  üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                for i, row in enumerate(records[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    try:
                        details = json.loads(row['details'])
                        print(f"    {i}. User ID: {row['user_id']}")
                        print(f"       Timestamp: {row['timestamp']}")
                        print(f"       Details: {details}")
                        print()
                    except Exception as e:
                        print(f"    {i}. User ID: {row['user_id']}")
                        print(f"       Timestamp: {row['timestamp']}")
                        print(f"       Raw details: {row['details']}")
                        print(f"       Error parsing: {e}")
                        print()
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        print(f"\nüîç –û–±—â–∏–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å 'request' –≤ details:")
        cursor = conn.execute("""
            SELECT action, COUNT(*) as count 
            FROM actions 
            WHERE details LIKE '%request%'
            GROUP BY action 
            ORDER BY count DESC
        """)
        
        all_request_actions = cursor.fetchall()
        print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π:")
        for row in all_request_actions:
            print(f"    ‚Ä¢ {row['action']}: {row['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        migrated_count = cursor.fetchone()[0]
        print(f"\nüìä –£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ user_requests: {migrated_count} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    check_missing_requests() 