#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã production –ë–î
"""
import sqlite3
import sys
import os

def check_production_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É production –ë–î"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ PRODUCTION –ë–î")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î
        db_path = "/data/bot.db"
        if not os.path.exists(db_path):
            print(f"‚ùå Production –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera")
            return
        
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î: {db_path}")
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row['name'] for row in cursor.fetchall()]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  ‚Ä¢ {table}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests
        if 'user_requests' in tables:
            print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ user_requests:")
            cursor = conn.execute("PRAGMA table_info(user_requests)")
            columns = cursor.fetchall()
            for col in columns:
                print(f"  ‚Ä¢ {col['name']} ({col['type']})")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = conn.execute("SELECT COUNT(*) as count FROM user_requests")
            count = cursor.fetchone()['count']
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π: {count}")
        else:
            print(f"\n‚ùå –¢–ê–ë–õ–ò–¶–ê user_requests –ù–ï –ù–ê–ô–î–ï–ù–ê!")
            print("–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É user_requests")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É actions
        if 'actions' in tables:
            print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ actions:")
            cursor = conn.execute("PRAGMA table_info(actions)")
            columns = cursor.fetchall()
            for col in columns:
                print(f"  ‚Ä¢ {col['name']} ({col['type']})")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = conn.execute("SELECT COUNT(*) as count FROM actions")
            count = cursor.fetchone()['count']
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π: {count}")
        
        conn.close()
        print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_production_db() 