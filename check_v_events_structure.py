#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def check_v_events_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É v_events –∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–π."""
    db_path = "bot (10).db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    print('\n=== –°–¢–†–£–ö–¢–£–†–ê v_events ===')
    try:
        cursor = conn.execute("PRAGMA table_info(v_events)")
        columns = cursor.fetchall()
        if columns:
            print('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ v_events:')
            for col in columns:
                print(f'  {col["name"]}: {col["type"]}')
        else:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É v_events')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –î–ê–ù–ù–´–ï –í v_events –ó–ê –°–ï–ì–û–î–ù–Ø ===')
    try:
        cursor = conn.execute("""
            SELECT 
                event,
                COUNT(*) as total_count,
                COUNT(DISTINCT session_id) as unique_sessions,
                COUNT(DISTINCT user_id) as unique_users
            FROM v_events 
            WHERE d_local = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            GROUP BY event
            ORDER BY total_count DESC
        """)
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ –°–æ–±—ã—Ç–∏—è –≤ v_events –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
            for row in rows:
                print(f'  {row["event"]}: {row["total_count"]} —Å–æ–±—ã—Ç–∏–π, {row["unique_sessions"]} —Å–µ—Å—Å–∏–π, {row["unique_users"]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        else:
            print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ v_events –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –ü–†–û–í–ï–†–ö–ê session_id –í v_events ===')
    try:
        cursor = conn.execute("""
            SELECT 
                session_id,
                COUNT(*) as count
            FROM v_events 
            WHERE d_local = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            GROUP BY session_id
            ORDER BY count DESC
            LIMIT 5
        """)
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ session_id –≤ v_events:')
            for row in rows:
                print(f'  {row["session_id"]}: {row["count"]} —Å–æ–±—ã—Ç–∏–π')
        else:
            print('‚ùå –ù–µ—Ç session_id –≤ v_events')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    print('\n=== –°–†–ê–í–ù–ï–ù–ò–ï –° scenario_logs ===')
    try:
        cursor = conn.execute("""
            SELECT 
                step,
                COUNT(*) as total_count,
                COUNT(DISTINCT JSON_EXTRACT(metadata, '$.session_id')) as unique_sessions,
                COUNT(DISTINCT user_id) as unique_users
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            AND user_id NOT IN (SELECT user_id FROM ignored_users)
            GROUP BY step
            ORDER BY total_count DESC
        """)
        rows = cursor.fetchall()
        if rows:
            print('‚úÖ –°–æ–±—ã—Ç–∏—è –≤ scenario_logs –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–±–µ–∑ –∞–¥–º–∏–Ω–æ–≤):')
            for row in rows:
                print(f'  {row["step"]}: {row["total_count"]} —Å–æ–±—ã—Ç–∏–π, {row["unique_sessions"]} —Å–µ—Å—Å–∏–π, {row["unique_users"]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        else:
            print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ scenario_logs –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    conn.close()

if __name__ == "__main__":
    check_v_events_structure()

