#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–∞ Amvera
–£–¥–∞–ª—è–µ—Ç –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import os
import shutil
import glob

def cleanup_project():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è...")
    
    # –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    folders_to_remove = [
        "tools",
        "__pycache__",
        ".pytest_cache",
        ".coverage",
        "htmlcov"
    ]
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_remove = [
        "*.db",
        "*.log",
        "*.pyc",
        "*.pyo",
        "*.pyd",
        "*.so",
        "*.egg",
        "*.egg-info"
    ]
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏
    for folder in folders_to_remove:
        if os.path.exists(folder):
            try:
                shutil.rmtree(folder)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {folder}: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for pattern in files_to_remove:
        for file_path in glob.glob(pattern, recursive=True):
            try:
                os.remove(file_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ database
    db_folder = "database"
    if os.path.exists(db_folder):
        for file_path in glob.glob(os.path.join(db_folder, "*.db")):
            try:
                os.remove(file_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ë–î: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ë–î {file_path}: {e}")
    
    print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
    total_size = 0
    file_count = 0
    
    for root, dirs, files in os.walk("."):
        if ".git" in root:
            continue
        for file in files:
            try:
                file_path = os.path.join(root, file)
                total_size += os.path.getsize(file_path)
                file_count += 1
            except:
                pass
    
    size_mb = total_size / (1024 * 1024)
    print(f"üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: {size_mb:.2f} MB ({file_count} —Ñ–∞–π–ª–æ–≤)")

if __name__ == "__main__":
    cleanup_project()
