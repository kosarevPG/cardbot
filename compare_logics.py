#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫ —Å–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import sqlite3
import json

def compare_logics():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–∞—à—É –ª–æ–≥–∏–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫")
        print(f"üìÅ –ë–î: {db_path}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
        print(f"\nüìã –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –µ—Å—Ç—å –≤ user_requests
        cursor = conn.execute("""
            SELECT DISTINCT a.action, COUNT(*) as count
            FROM user_requests ur
            JOIN actions a ON ur.user_id = a.user_id 
                AND ur.request_text = json_extract(a.details, '$.request')
                AND ur.timestamp = a.timestamp
            GROUP BY a.action
            ORDER BY count DESC
        """)
        
        our_actions = cursor.fetchall()
        for row in our_actions:
            print(f"  ‚Ä¢ {row['action']}: {row['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        print(f"\nüìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:")
        proposed_actions = [
            'typed_question_submitted',
            'initial_response_provided', 
            'set_request',
            'request_text_provided',
            'initial_response',
            'card_drawn_with_request'
        ]
        
        for action_type in proposed_actions:
            cursor = conn.execute("""
                SELECT COUNT(*) FROM actions 
                WHERE action = ? AND json_extract(details, '$.request') IS NOT NULL
            """, (action_type,))
            count = cursor.fetchone()[0]
            print(f"  ‚Ä¢ {action_type}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
        print(f"\nüîç –ß—Ç–æ –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏:")
        
        cursor = conn.execute("""
            SELECT action, COUNT(*) as count
            FROM actions 
            WHERE action IN (
                'typed_question_submitted',
                'initial_response_provided', 
                'set_request',
                'request_text_provided',
                'initial_response',
                'card_drawn_with_request'
            )
            AND json_extract(details, '$.request') IS NOT NULL
            AND json_extract(details, '$.request') != ''
            GROUP BY action
            ORDER BY count DESC
        """)
        
        proposed_total = cursor.fetchall()
        total_proposed = sum(row['count'] for row in proposed_total)
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ: {total_proposed}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π
        print(f"\nüîç –ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ:")
        
        cursor = conn.execute("""
            SELECT action, COUNT(*) as count
            FROM actions 
            WHERE action NOT IN (
                'typed_question_submitted',
                'initial_response_provided', 
                'set_request',
                'request_text_provided',
                'initial_response',
                'card_drawn_with_request'
            )
            AND json_extract(details, '$.request') IS NOT NULL
            AND json_extract(details, '$.request') != ''
            GROUP BY action
            ORDER BY count DESC
        """)
        
        our_extra = cursor.fetchall()
        for row in our_extra:
            print(f"  ‚Ä¢ {row['action']}: {row['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å card_flow_started
        print(f"\nüéØ –õ–æ–≥–∏–∫–∞ —Å card_flow_started:")
        
        cursor = conn.execute("""
            WITH card_starts AS (
                SELECT 
                    id AS card_action_id,
                    user_id,
                    timestamp AS card_time
                FROM actions
                WHERE action = 'card_flow_started'
            ),
            text_requests AS (
                SELECT 
                    id AS request_action_id,
                    user_id,
                    username,
                    name,
                    action,
                    json_extract(details, '$.request') AS request_text,
                    timestamp AS request_time
                FROM actions
                WHERE 
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
                    AND json_extract(details, '$.request') IS NOT NULL
                    AND json_extract(details, '$.request') != ''
            ),
            matched_requests AS (
                SELECT 
                    c.user_id,
                    r.username,
                    r.name,
                    r.request_text,
                    r.request_time,
                    c.card_time,
                    ROW_NUMBER() OVER (PARTITION BY c.card_action_id ORDER BY r.request_time DESC) AS rn
                FROM card_starts c
                JOIN text_requests r
                  ON c.user_id = r.user_id
                 AND r.request_time < c.card_time
            )
            SELECT COUNT(*) as count
            FROM matched_requests
            WHERE rn = 1
        """)
        
        card_matched = cursor.fetchone()[0]
        print(f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–∞–º–∏: {card_matched}")
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–∞–º–∏
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–∞–º–∏:")
        cursor = conn.execute("""
            WITH card_starts AS (
                SELECT 
                    id AS card_action_id,
                    user_id,
                    timestamp AS card_time
                FROM actions
                WHERE action = 'card_flow_started'
            ),
            text_requests AS (
                SELECT 
                    id AS request_action_id,
                    user_id,
                    username,
                    name,
                    action,
                    json_extract(details, '$.request') AS request_text,
                    timestamp AS request_time
                FROM actions
                WHERE 
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
                    AND json_extract(details, '$.request') IS NOT NULL
                    AND json_extract(details, '$.request') != ''
            ),
            matched_requests AS (
                SELECT 
                    c.user_id,
                    r.username,
                    r.name,
                    r.request_text,
                    r.request_time,
                    c.card_time,
                    ROW_NUMBER() OVER (PARTITION BY c.card_action_id ORDER BY r.request_time DESC) AS rn
                FROM card_starts c
                JOIN text_requests r
                  ON c.user_id = r.user_id
                 AND r.request_time < c.card_time
            )
            SELECT username, name, request_text, request_time, card_time
            FROM matched_requests
            WHERE rn = 1
            ORDER BY card_time DESC
            LIMIT 5
        """)
        
        card_examples = cursor.fetchall()
        for i, row in enumerate(card_examples, 1):
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            request_text = row['request_text'][:50] + "..." if len(row['request_text']) > 50 else row['request_text']
            print(f"  {i}. {name} {username}: {request_text}")
            print(f"     üìÖ –ó–∞–ø—Ä–æ—Å: {row['request_time'][:16]} | –ö–∞—Ä—Ç–∞: {row['card_time'][:16]}")
        
        # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"  ‚Ä¢ –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞: {475} –∑–∞–ø–∏—Å–µ–π")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: {total_proposed} –∑–∞–ø–∏—Å–µ–π")
        print(f"  ‚Ä¢ –õ–æ–≥–∏–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏: {card_matched} –∑–∞–ø–∏—Å–µ–π")
        
        if card_matched < total_proposed:
            print(f"  ‚ö†Ô∏è –õ–æ–≥–∏–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç {total_proposed - card_matched} –∑–∞–ø—Ä–æ—Å–æ–≤")
            print(f"     (–∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ card_flow_started)")
        
        if total_proposed > 475:
            print(f"  ‚ö†Ô∏è –ú—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ {total_proposed - 475} –∑–∞–ø—Ä–æ—Å–æ–≤")
            print(f"     (–Ω–µ –≤—Å–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã)")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    compare_logics() 