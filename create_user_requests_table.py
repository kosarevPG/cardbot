#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_requests –≤ production –ë–î
"""
import sqlite3
import sys
import os

def create_user_requests_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É user_requests –≤ production –ë–î"""
    print("üîß –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ user_requests –í PRODUCTION")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î
        db_path = "/data/bot.db"
        if not os.path.exists(db_path):
            print(f"‚ùå Production –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera")
            return
        
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î: {db_path}")
        conn = sqlite3.connect(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_requests'")
        table_exists = cursor.fetchone() is not None
        
        if table_exists:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ user_requests —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor = conn.execute("PRAGMA table_info(user_requests)")
            columns = cursor.fetchall()
            print("üìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            for col in columns:
                print(f"  ‚Ä¢ {col[1]} ({col[2]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            column_names = [col[1] for col in columns]
            required_columns = ['user_id', 'request_text', 'timestamp', 'session_id', 'card_number']
            
            missing_columns = [col for col in required_columns if col not in column_names]
            if missing_columns:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                print("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏")
                
                for col in missing_columns:
                    if col == 'request_text':
                        conn.execute("ALTER TABLE user_requests ADD COLUMN request_text TEXT")
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col}")
                    elif col == 'session_id':
                        conn.execute("ALTER TABLE user_requests ADD COLUMN session_id TEXT")
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col}")
                    elif col == 'card_number':
                        conn.execute("ALTER TABLE user_requests ADD COLUMN card_number INTEGER")
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col}")
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            conn.execute("""
                CREATE TABLE user_requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    request_text TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    session_id TEXT,
                    card_number INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            conn.execute("CREATE INDEX idx_user_requests_user_id ON user_requests(user_id)")
            conn.execute("CREATE INDEX idx_user_requests_timestamp ON user_requests(timestamp)")
            conn.execute("CREATE INDEX idx_user_requests_session_id ON user_requests(session_id)")
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_requests —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("PRAGMA table_info(user_requests)")
        columns = cursor.fetchall()
        print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ user_requests:")
        for col in columns:
            print(f"  ‚Ä¢ {col[1]} ({col[2]})")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor = conn.execute("SELECT COUNT(*) as count FROM user_requests")
        count = cursor.fetchone()[0]
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
        
        conn.commit()
        conn.close()
        print(f"\n‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    create_user_requests_table() 