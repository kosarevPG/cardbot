#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ
"""

import sqlite3
import json
from datetime import datetime, timedelta
import os

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "/data/bot.db"
        if not os.path.exists(db_path):
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
            return False
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = ['users', 'user_scenarios', 'scenario_logs', 'user_requests', 'posts', 'mailings']
        missing_tables = []
        
        for table in tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if not cursor.fetchone():
                missing_tables.append(table)
        
        if missing_tables:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
            return False
        else:
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_dashboard_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–∞—à–±–æ—Ä–¥–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect("/data/bot.db")
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç 1: DAU –º–µ—Ç—Ä–∏–∫–∏
        print("üìä –¢–µ—Å—Ç 1: DAU –º–µ—Ç—Ä–∏–∫–∏")
        try:
            cursor.execute("""
                SELECT COUNT(DISTINCT user_id) as dau_yesterday
                FROM user_scenarios 
                WHERE DATE(started_at, '+3 hours') = DATE('now', '+3 hours', '-1 day')
            """)
            result = cursor.fetchone()
            print(f"   DAU –≤—á–µ—Ä–∞: {result[0] if result else 0}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ DAU: {e}")
        
        # –¢–µ—Å—Ç 2: Retention –º–µ—Ç—Ä–∏–∫–∏
        print("üìà –¢–µ—Å—Ç 2: Retention –º–µ—Ç—Ä–∏–∫–∏")
        try:
            cursor.execute("""
                SELECT COUNT(DISTINCT user_id) as d1_users
                FROM user_scenarios 
                WHERE DATE(started_at, '+3 hours') >= DATE('now', '+3 hours', '-1 day')
            """)
            result = cursor.fetchone()
            print(f"   D1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0] if result else 0}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Retention: {e}")
        
        # –¢–µ—Å—Ç 3: –°—Ü–µ–Ω–∞—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üéØ –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        try:
            cursor.execute("""
                SELECT COUNT(DISTINCT user_id) as total_starts
                FROM scenario_logs 
                WHERE scenario = 'card_of_day' 
                AND step = 'started'
                AND timestamp >= datetime('now', '-7 days', '+3 hours')
            """)
            result = cursor.fetchone()
            print(f"   –ó–∞–ø—É—Å–∫–æ–≤ –∫–∞—Ä—Ç—ã –¥–Ω—è: {result[0] if result else 0}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        
        # –¢–µ—Å—Ç 4: Value –º–µ—Ç—Ä–∏–∫–∏
        print("üíé –¢–µ—Å—Ç 4: Value –º–µ—Ç—Ä–∏–∫–∏")
        try:
            cursor.execute("""
                SELECT COUNT(*) as total_feedback
                FROM scenario_logs 
                WHERE scenario = 'card_of_day' 
                AND step = 'usefulness_rating'
                AND timestamp >= datetime('now', '-7 days', '+3 hours')
            """)
            result = cursor.fetchone()
            print(f"   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {result[0] if result else 0}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ value –º–µ—Ç—Ä–∏–∫: {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def check_admin_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º config.py
        try:
            from config import ADMIN_IDS
            print(f"‚úÖ ADMIN_IDS –Ω–∞–π–¥–µ–Ω—ã: {ADMIN_IDS}")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ADMIN_IDS: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º config_local.py
        try:
            from config_local import ADMIN_IDS
            print(f"‚úÖ ADMIN_IDS –≤ config_local: {ADMIN_IDS}")
        except ImportError:
            print("‚ÑπÔ∏è  config_local.py –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect("/data/bot.db")
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
        cursor.execute("""
            SELECT timestamp, user_id, action, details
            FROM actions 
            WHERE action LIKE '%error%' OR action LIKE '%fail%'
            ORDER BY timestamp DESC 
            LIMIT 5
        """)
        
        errors = cursor.fetchall()
        if errors:
            print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:")
            for error in errors:
                print(f"   {error[0]}: {error[2]} - {error[3]}")
        else:
            print("‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not check_database_connection():
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    test_dashboard_queries()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    check_admin_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    check_logs()
    
    print("\n" + "=" * 50)
    print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü")
    print("2. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å ADMIN_IDS - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ config.py")
    print("3. –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")

if __name__ == '__main__':
    main() 