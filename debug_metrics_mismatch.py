#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def debug_metrics_mismatch():
    """–û—Ç–ª–∞–¥–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç—Ä–∏–∫."""
    db_path = "bot (10).db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    print('\n=== –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–†–ò–ö ===')
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º card_drawn –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    print('\n1Ô∏è‚É£ –°–æ–±—ã—Ç–∏—è card_drawn –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
    try:
        cursor = conn.execute("""
            SELECT 
                COUNT(*) as total_cards,
                COUNT(DISTINCT user_id) as unique_users,
                GROUP_CONCAT(DISTINCT user_id) as user_ids
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            AND step = 'card_drawn'
        """)
        row = cursor.fetchone()
        if row:
            print(f'  –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {row["total_cards"]}')
            print(f'  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {row["unique_users"]}')
            print(f'  ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {row["user_ids"]}')
        else:
            print('  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º card_drawn —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–æ–≤
    print('\n2Ô∏è‚É£ –°–æ–±—ã—Ç–∏—è card_drawn –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–±–µ–∑ –∞–¥–º–∏–Ω–æ–≤):')
    try:
        cursor = conn.execute("""
            SELECT 
                COUNT(*) as total_cards,
                COUNT(DISTINCT user_id) as unique_users,
                GROUP_CONCAT(DISTINCT user_id) as user_ids
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            AND step = 'card_drawn'
            AND user_id NOT IN (171507422, 6682555021)
        """)
        row = cursor.fetchone()
        if row:
            print(f'  –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {row["total_cards"]}')
            print(f'  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {row["unique_users"]}')
            print(f'  ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {row["user_ids"]}')
        else:
            print('  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º deck_selected –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    print('\n3Ô∏è‚É£ –°–æ–±—ã—Ç–∏—è deck_selected –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
    try:
        cursor = conn.execute("""
            SELECT 
                COUNT(*) as total_decks,
                COUNT(DISTINCT user_id) as unique_users,
                JSON_EXTRACT(metadata, '$.deck_name') as deck_name,
                COUNT(*) as deck_count
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            AND step = 'deck_selected'
            GROUP BY JSON_EXTRACT(metadata, '$.deck_name')
        """)
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                print(f'  –ö–æ–ª–æ–¥–∞ {row["deck_name"]}: {row["deck_count"]} —Ä–∞–∑')
        else:
            print('  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö deck_selected (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Å—Ç–∞—Ä–æ–π –ë–î)')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º v_decks_daily
    print('\n4Ô∏è‚É£ VIEW v_decks_daily –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
    try:
        cursor = conn.execute("""
            SELECT * FROM v_decks_daily 
            WHERE d_local = DATE('now', '+3 hours')
        """)
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                print(f'  {dict(row)}')
        else:
            print('  ‚ùå VIEW –ø—É—Å—Ç–æ–π (—ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞!)')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Ä–æ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É—é
    print('\n5Ô∏è‚É£ –í–æ—Ä–æ–Ω–∫–∞ –Ω–∞–ø—Ä—è–º—É—é (card_drawn):')
    try:
        cursor = conn.execute("""
            SELECT 
                step,
                COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND scenario = 'card_of_day'
            AND step IN ('initial_resource_selected', 'request_type_selected', 'card_drawn', 'initial_response_provided', 'ai_reflection_choice', 'completed')
            GROUP BY step
            ORDER BY 
                CASE step
                    WHEN 'initial_resource_selected' THEN 1
                    WHEN 'request_type_selected' THEN 2
                    WHEN 'card_drawn' THEN 3
                    WHEN 'initial_response_provided' THEN 4
                    WHEN 'ai_reflection_choice' THEN 5
                    WHEN 'completed' THEN 6
                END
        """)
        rows = cursor.fetchall()
        for row in rows:
            print(f'  {row["step"]}: {row["count"]}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    conn.close()

if __name__ == "__main__":
    debug_metrics_mismatch()
