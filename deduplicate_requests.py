#!/usr/bin/env python3
"""
–î–µ–¥—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ user_requests
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∑–∞–ø—Ä–æ—Å
"""
import sqlite3
import os
from datetime import datetime

def deduplicate_requests():
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∑–∞–ø—Ä–æ—Å"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üßπ –î–µ–¥—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ user_requests")
        print(f"üìÅ –ë–î: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_before = cursor.fetchone()[0]
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –¥–æ –¥–µ–¥—É–±–ª–∏–∫–∞—Ü–∏–∏: {total_before}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...")
        cursor = conn.execute("""
            SELECT user_id, request_text, COUNT(*) as count
            FROM user_requests 
            GROUP BY user_id, request_text 
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        """)
        
        duplicates = cursor.fetchall()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        
        total_duplicates = 0
        for row in duplicates:
            count = row['count']
            total_duplicates += count - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º
            print(f"  ‚Ä¢ User {row['user_id']}: '{row['request_text'][:50]}...' - {count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        print(f"üìä –í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {total_duplicates}")
        
        if total_duplicates == 0:
            print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        print(f"\nüîÑ –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        conn.execute("""
            CREATE TABLE user_requests_temp AS
            SELECT MIN(id) as id, user_id, request_text, MIN(timestamp) as timestamp, 
                   MIN(session_id) as session_id, MIN(card_number) as card_number
            FROM user_requests 
            GROUP BY user_id, request_text
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests_temp")
        unique_count = cursor.fetchone()[0]
        print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {unique_count}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é
        print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É...")
        conn.execute("DROP TABLE user_requests")
        conn.execute("ALTER TABLE user_requests_temp RENAME TO user_requests")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print(f"üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
        conn.execute("CREATE INDEX idx_user_requests_user_id ON user_requests(user_id)")
        conn.execute("CREATE INDEX idx_user_requests_timestamp ON user_requests(timestamp)")
        conn.execute("CREATE INDEX idx_user_requests_session_id ON user_requests(session_id)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_after = cursor.fetchone()[0]
        
        print(f"\nüéâ –î–µ–¥—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –¥–æ –¥–µ–¥—É–±–ª–∏–∫–∞—Ü–∏–∏: {total_before}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –¥–µ–¥—É–±–ª–∏–∫–∞—Ü–∏–∏: {total_after}")
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_before - total_after}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor = conn.execute("""
            SELECT ur.request_text, ur.timestamp, u.name, u.username, ur.user_id
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 10
        """)
        
        examples = cursor.fetchall()
        if examples:
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
            for i, row in enumerate(examples, 1):
                name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                username = f"@{row['username']}" if row['username'] else ""
                user_id = row['user_id']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(row['timestamp'].replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    formatted_date = row['timestamp'][:16]
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                request_text = row['request_text']
                if len(request_text) > 60:
                    request_text = request_text[:60] + "..."
                
                print(f"  {i}. {formatted_date} | {name} {username} (ID: {user_id})")
                print(f"     üí¨ {request_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
        cursor = conn.execute("""
            SELECT user_id, request_text, COUNT(*) as count
            FROM user_requests 
            GROUP BY user_id, request_text 
            HAVING COUNT(*) > 1
        """)
        
        remaining_duplicates = cursor.fetchall()
        if remaining_duplicates:
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã:")
            for row in remaining_duplicates:
                print(f"  ‚Ä¢ User {row['user_id']}: '{row['request_text'][:50]}...' - {row['count']} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç!")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–¥—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = deduplicate_requests()
    if success:
        print("\n‚úÖ –î–µ–¥—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –î–µ–¥—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!") 