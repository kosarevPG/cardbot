#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
"""

import os
import subprocess
import sys
from datetime import datetime

def check_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python...")
    
    files_to_check = [
        "main.py",
        "modules/ai_service.py",
        "database/db.py"
    ]
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        try:
            result = subprocess.run([sys.executable, "-m", "py_compile", file_path], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å {file_path} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ {file_path}: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ {file_path}: {e}")
            return False
    
    return True

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üì¶ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø...")
    
    backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    
    files_to_backup = [
        "modules/ai_service.py",
        "main.py"
    ]
    
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            backup_file_path = os.path.join(backup_dir, file_path)
            os.makedirs(os.path.dirname(backup_file_path), exist_ok=True)
            with open(file_path, 'r', encoding='utf-8') as src:
                with open(backup_file_path, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
            print(f"‚úÖ –ë—ç–∫–∞–ø: {file_path}")
    
    print(f"üì¶ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤: {backup_dir}")
    return backup_dir

def deploy_to_production():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
    try:
        result = subprocess.run(["git", "status", "--porcelain"], 
                              capture_output=True, text=True)
        if result.stdout.strip():
            print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git:")
            print(result.stdout)
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ git —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è
    commands = [
        "git add .",
        "git commit -m \"Update AI service: fix feminine gender addressing\"",
        "git push origin master"
    ]
    
    for cmd in commands:
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
        try:
            result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {cmd}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{cmd}': {e}")
            print(f"stderr: {e.stderr}")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–°–¢–û–ô –î–ï–ü–õ–û–ô –í –ü–†–û–î–ê–ö–®–ù")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    if not check_syntax():
        print("‚ùå –û–®–ò–ë–ö–ò –°–ò–ù–¢–ê–ö–°–ò–°–ê. –î–ï–ü–õ–û–ô –ü–†–ï–†–í–ê–ù.")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    backup_dir = create_backup()
    
    # –®–∞–≥ 3: –î–µ–ø–ª–æ–π
    if not deploy_to_production():
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –î–ï–ü–õ–û–ï.")
        return False
    
    print("\n‚úÖ –î–ï–ü–õ–û–ô –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    print("\nüìã –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print("  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ")
    print("  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ markdown")
    print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω—ã fallback —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    print(f"\nüì¶ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {backup_dir}")
    print("\n‚è∞ –î–µ–ø–ª–æ–π –Ω–∞ Amvera –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∞–¥–º–∏–Ω–∫–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 