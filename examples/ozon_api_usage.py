#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Ozon API
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–∞:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ offer_id
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ø—Ä–æ–¥–∞–∂–∏, –≤—ã—Ä—É—á–∫–∞)
3. –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
"""

import asyncio
import os
from datetime import datetime, timedelta
from modules.ozon_api import OzonAPI

async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ozon API"""
    
    print("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ozon API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("OZON_API_KEY") or not os.getenv("OZON_CLIENT_ID"):
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OZON_API_KEY='–≤–∞—à_api_–∫–ª—é—á'")
        print("   export OZON_CLIENT_ID='–≤–∞—à_client_id'")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
        ozon_api = OzonAPI()
        print("‚úÖ OzonAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ offer_id
        print("\nüìã 1. –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ offer_id...")
        mapping_result = await ozon_api.get_product_mapping(page_size=100, page=1)
        
        if not mapping_result["success"]:
            print(f"‚ùå –û—à–∏–±–∫–∞: {mapping_result['error']}")
            return
        
        mapping = mapping_result["mapping"]
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(mapping)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π offer_id ‚Üí product_id")
        
        if not mapping:
            print("‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        print("–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:")
        for i, (offer_id, product_id) in enumerate(list(mapping.items())[:5]):
            print(f"  {offer_id} ‚Üí {product_id}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\nüìä 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è {min(3, len(mapping))} —Ç–æ–≤–∞—Ä–æ–≤...")
        product_ids = list(mapping.values())[:3]
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        analytics_result = await ozon_api.get_analytics(product_ids, days=7)
        
        if analytics_result["success"]:
            print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ü–µ—Ä–∏–æ–¥: {analytics_result['period']}")
            print(f"   –¢–æ–≤–∞—Ä–æ–≤: {analytics_result['product_count']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            data = analytics_result["data"]
            if "result" in data and "data" in data["result"]:
                analytics_data = data["result"]["data"]
                print(f"   –ó–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {len(analytics_data)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
                for i, record in enumerate(analytics_data[:3]):
                    print(f"   –ó–∞–ø–∏—Å—å {i+1}: {record}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {analytics_result['error']}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\nüì¶ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è {min(3, len(mapping))} —Ç–æ–≤–∞—Ä–æ–≤...")
        stocks_result = await ozon_api.get_stocks_batch(product_ids)
        
        if stocks_result["success"]:
            print("‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stocks_result['total_processed']}")
            print(f"   –£—Å–ø–µ—à–Ω–æ: {stocks_result['successful']}")
            print(f"   –û—à–∏–±–æ–∫: {stocks_result['failed']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
            for product_id, stock_data in stocks_result["stocks"].items():
                offer_id = [k for k, v in mapping.items() if v == product_id][0]
                total_stock = stock_data["total_stock"]
                warehouses = len(stock_data["warehouse_stocks"])
                print(f"   {offer_id} (ID: {product_id}): {total_stock} —à—Ç. –Ω–∞ {warehouses} —Å–∫–ª–∞–¥–∞—Ö")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_result['error']}")
        
        # 4. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîÑ 4. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {min(2, len(mapping))} —Ç–æ–≤–∞—Ä–æ–≤...")
        test_offer_ids = list(mapping.keys())[:2]
        complete_result = await ozon_api.get_complete_product_data(test_offer_ids)
        
        if complete_result["success"]:
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            summary = complete_result["summary"]
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ offer_id: {summary['total_offers']}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ product_id: {summary['found_products']}")
            print(f"   –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {'‚úÖ' if summary['analytics_success'] else '‚ùå'}")
            print(f"   –û—Å—Ç–∞—Ç–∫–∏: {'‚úÖ' if summary['stocks_success'] else '‚ùå'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
            for offer_id, product_id in complete_result["mapping"].items():
                print(f"\n   –¢–æ–≤–∞—Ä: {offer_id} (ID: {product_id})")
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                if complete_result["analytics"]["success"]:
                    analytics_data = complete_result["analytics"]["data"]
                    if "result" in analytics_data and "data" in analytics_data["result"]:
                        for record in analytics_data["result"]["data"]:
                            if record.get("dimensions", {}).get("product_id") == product_id:
                                ordered_units = record.get("metrics", {}).get("ordered_units", 0)
                                revenue = record.get("metrics", {}).get("revenue", 0)
                                print(f"     üìä –ü—Ä–æ–¥–∞–∂–∏: {ordered_units} —à—Ç., –í—ã—Ä—É—á–∫–∞: {revenue} ‚ÇΩ")
                
                # –û—Å—Ç–∞—Ç–∫–∏
                if complete_result["stocks"]["success"] and product_id in complete_result["stocks"]["stocks"]:
                    stock_data = complete_result["stocks"]["stocks"][product_id]
                    total_stock = stock_data["total_stock"]
                    warehouses = len(stock_data["warehouse_stocks"])
                    print(f"     üì¶ –û—Å—Ç–∞—Ç–æ–∫: {total_stock} —à—Ç. –Ω–∞ {warehouses} —Å–∫–ª–∞–¥–∞—Ö")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {complete_result['error']}")
        
        print("\n" + "=" * 50)
        print("üéâ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def example_specific_offers():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ offer_id"""
    
    print("\nüéØ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ offer_id")
    print("=" * 50)
    
    try:
        ozon_api = OzonAPI()
        
        # –ü—Ä–∏–º–µ—Ä offer_id (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        example_offer_ids = ["RV-01", "KU-1-PVK", "ZL-01"]
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º offer_id: {example_offer_ids}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        complete_result = await ozon_api.get_complete_product_data(example_offer_ids)
        
        if complete_result["success"]:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            for offer_id, product_id in complete_result["mapping"].items():
                print(f"\nüì¶ {offer_id} ‚Üí {product_id}")
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                if complete_result["analytics"]["success"]:
                    analytics_data = complete_result["analytics"]["data"]
                    if "result" in analytics_data and "data" in analytics_data["result"]:
                        for record in analytics_data["result"]["data"]:
                            if record.get("dimensions", {}).get("product_id") == product_id:
                                ordered_units = record.get("metrics", {}).get("ordered_units", 0)
                                revenue = record.get("metrics", {}).get("revenue", 0)
                                print(f"   üìä –ü—Ä–æ–¥–∞–∂–∏: {ordered_units} —à—Ç., –í—ã—Ä—É—á–∫–∞: {revenue} ‚ÇΩ")
                
                # –û—Å—Ç–∞—Ç–∫–∏
                if complete_result["stocks"]["success"] and product_id in complete_result["stocks"]["stocks"]:
                    stock_data = complete_result["stocks"]["stocks"][product_id]
                    total_stock = stock_data["total_stock"]
                    print(f"   üì¶ –û—Å—Ç–∞—Ç–æ–∫: {total_stock} —à—Ç.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {complete_result['error']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(example_usage())
    asyncio.run(example_specific_offers())
