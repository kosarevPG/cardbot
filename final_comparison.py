#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫ —Å–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import sqlite3
import json

def final_comparison():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫")
        print(f"üìÅ –ë–î: {db_path}")
        
        # 1. –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        our_total = cursor.fetchone()[0]
        
        cursor = conn.execute("SELECT COUNT(DISTINCT user_id) FROM user_requests")
        our_users = cursor.fetchone()[0]
        
        print(f"\nüìä –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞ (user_requests):")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {our_total}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {our_users}")
        
        # 2. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        cursor = conn.execute("""
            WITH relevant_actions AS (
                SELECT 
                    user_id,
                    username,
                    name,
                    action,
                    details,
                    timestamp
                FROM actions
                WHERE 
                    details LIKE '%request%' AND
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
            ),
            extracted_requests AS (
                SELECT
                    user_id,
                    username,
                    name,
                    json_extract(details, '$.request') AS request_text,
                    timestamp
                FROM relevant_actions
                WHERE json_extract(details, '$.request') IS NOT NULL
            )
            SELECT COUNT(*) as count
            FROM extracted_requests
        """)
        
        proposed_total = cursor.fetchone()[0]
        
        cursor = conn.execute("""
            WITH relevant_actions AS (
                SELECT 
                    user_id,
                    username,
                    name,
                    action,
                    details,
                    timestamp
                FROM actions
                WHERE 
                    details LIKE '%request%' AND
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
            ),
            extracted_requests AS (
                SELECT
                    user_id,
                    username,
                    name,
                    json_extract(details, '$.request') AS request_text,
                    timestamp
                FROM relevant_actions
                WHERE json_extract(details, '$.request') IS NOT NULL
            )
            SELECT COUNT(DISTINCT user_id) as count
            FROM extracted_requests
        """)
        
        proposed_users = cursor.fetchone()[0]
        
        print(f"\nüìä –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {proposed_total}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {proposed_users}")
        
        # 3. –õ–æ–≥–∏–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏
        cursor = conn.execute("""
            WITH card_starts AS (
                SELECT 
                    id AS card_action_id,
                    user_id,
                    timestamp AS card_time
                FROM actions
                WHERE action = 'card_flow_started'
            ),
            text_requests AS (
                SELECT 
                    id AS request_action_id,
                    user_id,
                    username,
                    name,
                    action,
                    json_extract(details, '$.request') AS request_text,
                    timestamp AS request_time
                FROM actions
                WHERE 
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
                    AND json_extract(details, '$.request') IS NOT NULL
                    AND json_extract(details, '$.request') != ''
            ),
            matched_requests AS (
                SELECT 
                    c.user_id,
                    r.username,
                    r.name,
                    r.request_text,
                    r.request_time,
                    c.card_time,
                    ROW_NUMBER() OVER (PARTITION BY c.card_action_id ORDER BY r.request_time DESC) AS rn
                FROM card_starts c
                JOIN text_requests r
                  ON c.user_id = r.user_id
                 AND r.request_time < c.card_time
            )
            SELECT COUNT(*) as count
            FROM matched_requests
            WHERE rn = 1
        """)
        
        card_total = cursor.fetchone()[0]
        
        cursor = conn.execute("""
            WITH card_starts AS (
                SELECT 
                    id AS card_action_id,
                    user_id,
                    timestamp AS card_time
                FROM actions
                WHERE action = 'card_flow_started'
            ),
            text_requests AS (
                SELECT 
                    id AS request_action_id,
                    user_id,
                    username,
                    name,
                    action,
                    json_extract(details, '$.request') AS request_text,
                    timestamp AS request_time
                FROM actions
                WHERE 
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
                    AND json_extract(details, '$.request') IS NOT NULL
                    AND json_extract(details, '$.request') != ''
            ),
            matched_requests AS (
                SELECT 
                    c.user_id,
                    r.username,
                    r.name,
                    r.request_text,
                    r.request_time,
                    c.card_time,
                    ROW_NUMBER() OVER (PARTITION BY c.card_action_id ORDER BY r.request_time DESC) AS rn
                FROM card_starts c
                JOIN text_requests r
                  ON c.user_id = r.user_id
                 AND r.request_time < c.card_time
            )
            SELECT COUNT(DISTINCT user_id) as count
            FROM matched_requests
            WHERE rn = 1
        """)
        
        card_users = cursor.fetchone()[0]
        
        print(f"\nüìä –õ–æ–≥–∏–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏:")
        print(f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–∞–º–∏: {card_total}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {card_users}")
        
        # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"  ‚Ä¢ –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞ vs –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è: {our_total} vs {proposed_total} ({our_total - proposed_total:+d})")
        print(f"  ‚Ä¢ –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞ vs –ö–∞—Ä—Ç—ã: {our_total} vs {card_total} ({our_total - card_total:+d})")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è vs –ö–∞—Ä—Ç—ã: {proposed_total} vs {card_total} ({proposed_total - card_total:+d})")
        
        # 5. –ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        print(f"\nüîç –ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:")
        
        cursor = conn.execute("""
            SELECT action, COUNT(*) as count
            FROM actions 
            WHERE action NOT IN (
                'typed_question_submitted',
                'initial_response_provided', 
                'set_request',
                'request_text_provided',
                'initial_response',
                'card_drawn_with_request'
            )
            AND json_extract(details, '$.request') IS NOT NULL
            AND json_extract(details, '$.request') != ''
            GROUP BY action
            ORDER BY count DESC
        """)
        
        extra_actions = cursor.fetchall()
        if extra_actions:
            for row in extra_actions:
                print(f"  ‚Ä¢ {row['action']}: {row['count']} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"  ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç")
        
        # 6. –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"\nüèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤:")
        cursor = conn.execute("""
            SELECT ur.user_id, u.name, u.username, COUNT(*) as request_count
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            GROUP BY ur.user_id 
            ORDER BY request_count DESC 
            LIMIT 5
        """)
        
        top_users = cursor.fetchall()
        for i, row in enumerate(top_users, 1):
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            print(f"  {i}. {name} {username} (ID: {row['user_id']}) - {row['request_count']} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # 7. –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        print(f"\nüí° –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
        if our_total >= proposed_total:
            print(f"  ‚úÖ –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞ –±–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è - —Å–æ–±—Ä–∞–ª–∏ {our_total} –∑–∞–ø—Ä–æ—Å–æ–≤")
            print(f"     (–≤–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π)")
        else:
            print(f"  ‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è - {proposed_total} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if card_total < our_total:
            print(f"  üìä –õ–æ–≥–∏–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç {our_total - card_total} –∑–∞–ø—Ä–æ—Å–æ–≤")
            print(f"     (–∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ card_flow_started)")
        
        print(f"  üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É –ª–æ–≥–∏–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    final_comparison() 