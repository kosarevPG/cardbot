import random
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import pytz

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logging.debug("Starting script...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8054930534:AAFDdyp5_xiX0ZPQnSEZKpfOhk2PCdchKvg"
CHANNEL_ID = "@TopPsyGame"
BOT_LINK = "t.me/choose_a_card_bot"
TIMEZONE = pytz.timezone("Europe/Moscow")

logging.debug("Settings loaded, initializing bot...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

logging.debug("Bot and Dispatcher initialized.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_reminder_time = State()
    waiting_for_request_confirmation = State()

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º /data –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
DATA_DIR = "/data"
LAST_REQUEST_FILE = f"{DATA_DIR}/last_request.json"
USER_NAMES_FILE = f"{DATA_DIR}/user_names.json"
REFERRALS_FILE = f"{DATA_DIR}/referrals.json"
BONUS_AVAILABLE_FILE = f"{DATA_DIR}/bonus_available.json"
REMINDER_TIMES_FILE = f"{DATA_DIR}/reminder_times.json"
STATS_FILE = f"{DATA_DIR}/card_feedback.json"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

logging.debug("File paths defined, directory created if needed.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
def load_json(file_path, default):
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return {int(k) if k.isdigit() else k: v for k, v in data.items()}
            return data
    return default

def save_json(file_path, data):
    with open(file_path, "w") as f:
        json.dump(data, f, indent=2)
    logging.info(f"Saved file {file_path}: {os.listdir(DATA_DIR)}")

logging.debug("JSON functions defined.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
LAST_REQUEST = load_json(LAST_REQUEST_FILE, {})
USER_NAMES = load_json(USER_NAMES_FILE, {})
REFERRALS = load_json(REFERRALS_FILE, {})
BONUS_AVAILABLE = load_json(BONUS_AVAILABLE_FILE, {})
REMINDER_TIMES = load_json(REMINDER_TIMES_FILE, {})

for user_id, timestamp in LAST_REQUEST.items():
    LAST_REQUEST[user_id] = datetime.fromisoformat(timestamp.replace("Z", "+00:00")).astimezone(TIMEZONE)

logging.debug("Data initialized.")

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
REFLECTION_QUESTIONS = ["–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –¥–∞—ë—Ç –º–Ω–µ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?", "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è?"]
UNIVERSE_ADVICE = ["<b>üíå –¢—ã ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–ª—ã.</b> –í—Å—ë –≤–Ω—É—Ç—Ä–∏.", "<b>üíå –í—Å–µ–ª–µ–Ω–Ω–∞—è –≤–µ–¥—ë—Ç —Ç–µ–±—è.</b> –ó–∞–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    return load_json(STATS_FILE, {"users": {}, "total": {"yes": 0, "no": 0}})

def save_stats(stats):
    save_json(STATS_FILE, stats)

logging.debug("Stats functions defined.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
def get_main_menu(user_id):
    keyboard = [
        [KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è"), KeyboardButton(text="üïä –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")],
        [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")]
    ]
    if BONUS_AVAILABLE.get(user_id, False):
        keyboard.append([KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

logging.debug("Menu generation function defined.")

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            name = USER_NAMES.get(user_id, "")
            try:
                user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
                if user_status.status not in ["member", "administrator", "creator"]:
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!" if name else "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!"
                    await event.answer(text, disable_web_page_preview=True, protect_content=True)
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                await event.answer("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", protect_content=True)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())
logging.debug("Subscription middleware registered.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders():
    while True:
        now = datetime.now(TIMEZONE)
        current_time = now.strftime("%H:%M")
        logging.info(f"Checking reminders at {current_time}, REMINDER_TIMES: {REMINDER_TIMES}")
        for user_id, reminder_time in list(REMINDER_TIMES.items()):
            reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
            last_request_time = LAST_REQUEST.get(user_id)
            card_available = not last_request_time or (now - last_request_time >= timedelta(minutes=1))
            logging.info(f"User {user_id}: reminder_time={reminder_time_normalized}, current_time={current_time}, card_available={card_available}, last_request={last_request_time}")
            if current_time == reminder_time_normalized and card_available:
                name = USER_NAMES.get(user_id, "")
                text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú® –û–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è!" if name else "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú® –û–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è!"
                try:
                    await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
                    logging.info(f"Reminder sent to {user_id} at {reminder_time_normalized}")
                except Exception as e:
                    logging.error(f"Failed to send reminder to {user_id}: {e}")
        await asyncio.sleep(60)

logging.debug("Reminder check function defined.")

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def suggest_reminder(user_id, state: FSMContext):
    name = USER_NAMES.get(user_id, "")
    logging.info(f"Suggesting reminder to {user_id}: in REMINDER_TIMES={user_id in REMINDER_TIMES}")
    if user_id not in REMINDER_TIMES:
        text = f"{name}, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)." if name else "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)."
        try:
            await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
            await state.set_state(UserState.waiting_for_reminder_time)
            logging.info(f"Reminder suggestion sent to {user_id}")
        except Exception as e:
            logging.error(f"Failed to suggest reminder to {user_id}: {e}")
    else:
        logging.info(f"No reminder suggestion for {user_id}: already has reminder time")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    if args.startswith("ref_"):
        try:
            referrer_id = int(args[4:])
            if referrer_id != user_id and referrer_id not in REFERRALS.get(user_id, []):
                REFERRALS.setdefault(referrer_id, []).append(user_id)
                save_json(REFERRALS_FILE, REFERRALS)
                if not BONUS_AVAILABLE.get(referrer_id, False):
                    BONUS_AVAILABLE[referrer_id] = True
                    save_json(BONUS_AVAILABLE_FILE, BONUS_AVAILABLE)
                    referrer_name = USER_NAMES.get(referrer_id, "")
                    text = f"{referrer_name}, —É—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'." if referrer_name else "–£—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'."
                    await bot.send_message(referrer_id, text, reply_markup=get_main_menu(referrer_id), protect_content=True)
        except ValueError as e:
            logging.error(f"Invalid referrer ID in args: '{args}', error: {e}")

    if user_id not in USER_NAMES:
        text = "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏ - –Ω–∞–∂–º–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
        skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]])
        await message.answer(text, reply_markup=skip_keyboard, protect_content=True)
        await state.set_state(UserState.waiting_for_name)
    else:
        await message.answer(
            f"{USER_NAMES[user_id]}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é." if USER_NAMES[user_id] else "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu(user_id),
            protect_content=True
        )

# –ö–æ–º–∞–Ω–¥–∞ /reminder
@dp.message(Command("reminder"))
async def reminder_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    current_reminder = REMINDER_TIMES.get(user_id, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    text = f"{name}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)." if name else f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)."
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.set_state(UserState.waiting_for_reminder_time)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def handle_reminder_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    current_reminder = REMINDER_TIMES.get(user_id, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    text = f"{name}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)." if name else f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)."
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.set_state(UserState.waiting_for_reminder_time)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(UserState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    USER_NAMES[user_id] = name
    save_json(USER_NAMES_FILE, USER_NAMES)
    await message.answer(
        f"{name}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user_id),
        protect_content=True
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query(lambda c: c.data == "skip_name")
async def process_skip_name(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    USER_NAMES[user_id] = ""
    save_json(USER_NAMES_FILE, USER_NAMES)
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, –±–µ–∑ –∏–º–µ–Ω–∏ —Ç–æ–∂–µ –∑–¥–æ—Ä–æ–≤–æ! –í—ã–±–µ—Ä–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é!",
        reply_markup=get_main_menu(user_id),
        protect_content=True
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(UserState.waiting_for_reminder_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    reminder_time = message.text.strip()
    try:
        reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
        REMINDER_TIMES[user_id] = reminder_time_normalized
        save_json(REMINDER_TIMES_FILE, REMINDER_TIMES)
        text = f"{name}, —Å—É–ø–µ—Ä! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {reminder_time_normalized} (UTC+3)." if name else f"–°—É–ø–µ—Ä! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {reminder_time_normalized} (UTC+3)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()
    except ValueError:
        text = f"{name}, –∫–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)." if name else "–ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
@dp.message(lambda message: message.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")
async def handle_card_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    now = datetime.now(TIMEZONE)

    if user_id in LAST_REQUEST and now - LAST_REQUEST[user_id] < timedelta(minutes=1):
        text = f"{name}, –∫–∞—Ä—Ç—É –¥–Ω—è –º–æ–∂–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É ‚Äì –≤—Å–µ–º—É —Å–≤–æ—ë –≤—Ä–µ–º—è! üåø –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ." if name else "–ö–∞—Ä—Ç—É –¥–Ω—è –º–æ–∂–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É ‚Äì –≤—Å–µ–º—É —Å–≤–æ—ë –≤—Ä–µ–º—è! üåø –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        return

    text = f"{name}, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üåø –ü–æ–¥—É–º–∞–π: –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∫–∞—Ä—Ç–µ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞!" if name else "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üåø –ü–æ–¥—É–º–∞–π: –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∫–∞—Ä—Ç–µ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞!"
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å –≥–æ—Ç–æ–≤!", callback_data="confirm_request")]])
    await message.answer(text, reply_markup=confirmation_keyboard, protect_content=True)
    await state.set_state(UserState.waiting_for_request_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
@dp.callback_query(lambda c: c.data == "confirm_request")
async def process_request_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    now = datetime.now(TIMEZONE)

    try:
        card_numbers = list(range(1, 41))
        random.shuffle(card_numbers)
        card_number = card_numbers[0]
        card_path = f"cards/card_{card_number}.jpg"
        logging.debug(f"Attempting to load card: {card_path}")

        if not os.path.exists(card_path):
            logging.error(f"Card file not found: {card_path}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(user_id))
            return

        photo = FSInputFile(card_path)
        await bot.send_photo(user_id, photo, reply_markup=get_main_menu(user_id), protect_content=True)
        LAST_REQUEST[user_id] = now
        save_json(LAST_REQUEST_FILE, {k: v.isoformat() for k, v in LAST_REQUEST.items()})

        reflection_question = random.choice(REFLECTION_QUESTIONS)
        await callback.message.answer(reflection_question, protect_content=True)

        feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞ üôÇ", callback_data=f"feedback_yes_{card_number}"), InlineKeyboardButton(text="–ù–µ—Ç üôÅ", callback_data=f"feedback_no_{card_number}")]
        ])
        text = f"{name}, —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?" if name else "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?"
        await callback.message.answer(text, reply_markup=feedback_keyboard, protect_content=True)

        await suggest_reminder(user_id, state)

        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã: {e}")
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
@dp.message(lambda message: message.text == "üïä –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
async def handle_share_info(message: types.Message):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    ref_link = f"{BOT_LINK}?start=ref_{user_id}"
    text = f"{name}, —ç—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!" if name else f"–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=False)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–æ–≤–µ—Ç –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π"
@dp.message(lambda message: message.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")
async def handle_bonus_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    if not BONUS_AVAILABLE.get(user_id, False):
        text = f"{name}, —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', –∏ –æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç!" if name else "–≠—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', –∏ –æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç!"
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        return

    advice = random.choice(UNIVERSE_ADVICE)
    text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}" if name else f"–í–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.callback_query(lambda c: c.data.startswith("feedback_"))
async def process_feedback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or ""
    name = USER_NAMES.get(user_id, "")
    feedback, card_number = callback.data.split("_")[1], callback.data.split("_")[2]
    stats = load_stats()

    user_key = str(user_id)
    if user_key not in stats["users"]:
        stats["users"][user_key] = {"name": name, "username": username, "responses": []}
    stats["users"][user_key]["responses"].append({"card": card_number, "answer": feedback})
    stats["total"][feedback] += 1
    save_stats(stats)

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", reply_markup=get_main_menu(user_id), protect_content=True)
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("Bot starting...")
    asyncio.create_task(check_reminders())
    while True:
        try:
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            logging.error(f"Polling failed: {e}, restarting in 10 seconds...")
            await asyncio.sleep(10)
        else:
            break

if __name__ == "__main__":
    try:
        logging.debug("Starting main...")
        asyncio.run(main())
    except Exception as e:
        logging.error(f"Failed to start bot: {e}")
        raise