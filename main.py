import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN, CHANNEL_ID, ADMIN_ID, UNIVERSE_ADVICE, BOT_LINK, TIMEZONE, NO_LOGS_USERS 
from database.db import Database
from modules.logging_service import LoggingService
from modules.notification_service import NotificationService
from modules.card_of_the_day import handle_card_request, draw_card, process_request_text, process_initial_response, process_first_grok_response, process_second_grok_response, process_third_grok_response, process_card_feedback, get_main_menu
from modules.user_management import UserState, UserManager
import random
from datetime import datetime, timedelta  # –î–æ–±–∞–≤–ª—è–µ–º timedelta
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db_path = "/data/bot.db"
print(f"Checking if database file exists at {db_path}: {os.path.exists(db_path)}")
db = Database(path=db_path)
print(f"Database initialized at {db.conn}")
logger = LoggingService(db)
notifier = NotificationService(bot, db)
user_manager = UserManager(db)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db.get_user(0)
    print("Database check successful")
except Exception as e:
    logger.log_action(0, "db_init_error", {"error": str(e)})
    print(f"Database initialization failed: {e}")
    raise

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            if user_id == ADMIN_ID:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
                return await handler(event, data)
            try:
                user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
                if user_status.status not in ["member", "administrator", "creator"]:
                    name = db.get_user(user_id)["name"]
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!" if name else "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!"
                    await event.answer(text, disable_web_page_preview=True)
                    return
            except Exception:
                await event.answer("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""  # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ Telegram
    args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = db.get_user(user_id)
    if user_data["username"] != username:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
        user_data["username"] = username
        db.update_user(user_id, user_data)

    await logger.log_action(user_id, "start", {"args": args})

    if args.startswith("ref_"):
        referrer_id = int(args[4:])
        if referrer_id != user_id and user_id not in db.get_referrals(referrer_id):
            db.add_referral(referrer_id, user_id)
            if not db.get_user(referrer_id)["bonus_available"]:
                await user_manager.set_bonus_available(referrer_id, True)
                name = db.get_user(referrer_id)["name"]
                text = f"{name}, —É—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'." if name else "–£—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'."
                await bot.send_message(referrer_id, text, reply_markup=await get_main_menu(referrer_id, db))

    if not db.get_user(user_id)["name"]:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
        ]))
        await state.set_state(UserState.waiting_for_name)
    else:
        name = db.get_user(user_id)["name"]
        await message.answer(f"{name}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'." if name else "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))

# –ö–æ–º–∞–Ω–¥–∞ /share
@dp.message(Command("share"))
async def share_command(message: types.Message):
    user_id = message.from
