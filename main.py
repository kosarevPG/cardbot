import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter, CommandObject # Added CommandObject
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage # Using MemoryStorage as before

# Import necessary components from updated files
from config import TOKEN, CHANNEL_ID, ADMIN_ID, UNIVERSE_ADVICE, BOT_LINK, TIMEZONE, NO_LOGS_USERS, DATA_DIR # Ensure DATA_DIR is used if needed elsewhere
from database.db import Database # Updated db.py
from modules.logging_service import LoggingService
from modules.notification_service import NotificationService
from modules.user_management import UserState, UserManager # Updated user_management.py
from modules.ai_service import build_user_profile # Updated ai_service.py

# Import ALL handlers from the updated card_of_the_day.py
from modules.card_of_the_day import (
    get_main_menu,
    handle_card_request,
    process_initial_resource_callback,
    process_request_type_callback,
    process_request_text,
    draw_card_direct, # Renamed/refactored function
    process_initial_response,
    ask_exploration_choice, # Function to ask the choice
    process_exploration_choice_callback,
    ask_grok_question, # Function to ask Grok question
    process_first_grok_response,
    process_second_grok_response,
    process_third_grok_response,
    finish_interaction_flow, # Function to start final resource check
    process_final_resource_callback,
    process_recharge_method,
    show_final_feedback_and_menu, # Function to show final feedback buttons
    process_card_feedback # Handler for the final feedback buttons (like/dislike)
)

import random
from datetime import datetime, timedelta
import os
import json
import logging

# --- Basic Setup ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger_root = logging.getLogger() # Root logger
logger = logging.getLogger(__name__) # Module logger

# --- Initialization ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage() # Consider RedisStorage or other persistent storage for production
dp = Dispatcher(storage=storage)

# Ensure data directory exists (important for SQLite path)
os.makedirs(DATA_DIR, exist_ok=True)
db_path = os.path.join(DATA_DIR, "bot.db") # Use DATA_DIR from config

logger.info(f"Initializing database at: {db_path}")
print(f"Initializing database at: {db_path}") # Keep print for Amvera logs visibility
try:
    db = Database(path=db_path)
    logger.info(f"Database connection established: {db.conn}")
    # Assign bot instance to db if needed (check db.py implementation)
    db.bot = bot # Assuming db.py uses this for get_chat etc.
except Exception as e:
    logger.exception(f"CRITICAL: Database initialization failed at {db_path}: {e}")
    print(f"CRITICAL: Database initialization failed at {db_path}: {e}")
    raise SystemExit(f"Database failed to initialize: {e}")

logging_service = LoggingService(db) # Use specific logger name
notifier = NotificationService(bot, db)
user_manager = UserManager(db)

# --- Middleware for Subscription Check ---
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        # Check only for Messages and CallbackQueries originating from users
        if isinstance(event, (types.Message, types.CallbackQuery)):
            user = event.from_user
            if not user or user.is_bot: # Ignore bots
                return await handler(event, data)

            user_id = user.id
            # Allow admin and specific users to bypass check
            if user_id == ADMIN_ID: # Add other bypass IDs if needed
                return await handler(event, data)

            try:
                # Use get_chat_member for checking subscription
                user_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                # Check if the user is a member, administrator, or creator
                if user_status.status not in ["member", "administrator", "creator"]:
                    user_db_data = db.get_user(user_id) # Get user data for name
                    name = user_db_data.get("name") if user_db_data else None # Safely get name
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>! ‚ú®" if name else "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>! ‚ú®"

                    # Send message based on event type
                    if isinstance(event, types.Message):
                        await event.answer(text, disable_web_page_preview=True)
                    elif isinstance(event, types.CallbackQuery):
                        # Answer callback to prevent "loading" state, then send message
                        await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
                        await event.message.answer(text, disable_web_page_preview=True)
                    return # Stop processing further handlers
            except Exception as e:
                # Handle potential errors like "user not found" in channel etc.
                logger.error(f"Subscription check failed for user {user_id}: {e}")
                error_text = "–û–π, –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –∫–∞–Ω–∞–ª @TopPsyGame."
                if isinstance(event, types.Message):
                     await event.answer(error_text)
                elif isinstance(event, types.CallbackQuery):
                     await event.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
                     await event.message.answer(error_text)
                return # Stop processing further handlers

        # If check passed or not applicable, proceed to the handler
        return await handler(event, data)

# Apply middleware to both messages and callback queries
dp.message.middleware(SubscriptionMiddleware())
dp.callback_query.middleware(SubscriptionMiddleware())


# --- Survey Handlers (kept from original main.py, ensure SurveyState is defined if used) ---
# NOTE: SurveyState is NOT defined in the provided user_management.py.
# Add this class definition if surveys are still needed.
# class SurveyState(StatesGroup):
#     question_1 = State()
#     # ... other survey states
async def send_survey(message: types.Message, state: FSMContext, db, logger_service):
    # Implementation from original main.py...
    pass # Placeholder
async def process_survey_response(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    # Implementation from original main.py...
    pass # Placeholder
async def handle_survey(message: types.Message, state: FSMContext):
    logger.info(f"Handle_survey called for message: {message.text} from user {message.from_user.id}")
    # Assuming send_survey exists and SurveyState is defined
    # await send_survey(message, state, db, logging_service)
    await message.answer("–û–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.") # Placeholder if SurveyState missing

def make_process_survey_response_handler(db, logger_service):
    async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
        # await process_survey_response(callback, state, db, logger_service)
        pass # Placeholder
    return wrapped_handler

# --- Factory Functions for Standard Command Handlers (Mostly unchanged) ---

def make_start_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        await state.clear() # Clear state on /start
        user_id = message.from_user.id
        username = message.from_user.username or ""
        # args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else "" # Old way
        # Use CommandObject for cleaner argument parsing
        command: CommandObject | None = data.get("command")
        args = command.args if command else ""

        # Log start action
        await logger_service.log_action(user_id, "start_command", {"args": args})

        # Get/Update user data
        user_data = db.get_user(user_id) # Creates default if not exists
        if user_data.get("username") != username:
            db.update_user(user_id, {"username": username})

        # Referral logic
        if args and args.startswith("ref_"):
            try:
                referrer_id = int(args[4:])
                if referrer_id != user_id and not db.get_referrals(referrer_id): # Simplified check
                    db.add_referral(referrer_id, user_id)
                    referrer_data = db.get_user(referrer_id)
                    if referrer_data and not referrer_data.get("bonus_available"):
                        await user_manager.set_bonus_available(referrer_id, True)
                        ref_name = referrer_data.get("name", "–î—Ä—É–≥")
                        text = f"{ref_name}, —É—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'."
                        try:
                            await bot.send_message(referrer_id, text, reply_markup=await get_main_menu(referrer_id, db))
                            await logger_service.log_action(referrer_id, "referral_bonus_granted", {"referred_user": user_id})
                        except Exception as send_err:
                            logger.error(f"Failed to send referral bonus message to {referrer_id}: {send_err}")
            except (ValueError, TypeError) as ref_err:
                 logger.warning(f"Invalid referral code '{args}' from user {user_id}: {ref_err}")

        # Greeting logic
        user_name = user_data.get("name")
        if not user_name:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
            ]))
            await state.set_state(UserState.waiting_for_name)
        else:
            await message.answer(f"{user_name}, —Ä–∞–¥(–∞) —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.", reply_markup=await get_main_menu(user_id, db))

    return wrapped_handler

def make_share_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name", "–î—Ä—É–≥") # Use default name
        ref_link = f"{BOT_LINK}?start=ref_{user_id}"
        text = f"{name}, –ø–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏: {ref_link}\n–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –Ω–µ–π –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º, —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π'!"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await logger_service.log_action(user_id, "share_command")
    return wrapped_handler

def make_remind_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = db.get_user(user_id)
        name = user_data.get("name", "–î—Ä—É–≥")
        current_reminder = user_data.get("reminder_time")

        current_reminder_text = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>{current_reminder}</b> –ú–°–ö." if current_reminder else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        purpose_text = "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–∞–º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è."
        instruction_text = "–í–≤–µ–¥–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>09:00</b> –∏–ª–∏ <b>21:30</b>), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –ú–æ—Å–∫–≤–µ.\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /remind_off, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–æ–≤—Å–µ–º."
        text = f"{name}, –ø—Ä–∏–≤–µ—Ç!\n\n{purpose_text}\n\n{current_reminder_text}\n{instruction_text}"

        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.set_state(UserState.waiting_for_reminder_time)
        await logger_service.log_action(user_id, "remind_command")
    return wrapped_handler

def make_users_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        users = db.get_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        excluded_users = set(NO_LOGS_USERS)
        filtered_users = [uid for uid in users if uid not in excluded_users]
        if not filtered_users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö).")
            return

        user_list = []
        for uid in filtered_users:
            user_data = db.get_user(uid)
            name = user_data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            username = user_data.get("username", "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞")
            last_action_time = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"
            last_action_timestamp_iso = "1970-01-01T00:00:00+00:00" # Default for sorting

            user_actions = db.get_actions(uid) # Get sorted actions
            if user_actions:
                last_action = user_actions[-1] # Last action because they are sorted ASC
                last_action_timestamp_iso = last_action["timestamp"]
                try:
                    # Format timestamp nicely
                    last_action_dt = datetime.fromisoformat(last_action_timestamp_iso).astimezone(TIMEZONE)
                    last_action_time = last_action_dt.strftime("%Y-%m-%d %H:%M")
                except ValueError:
                    last_action_time = last_action_timestamp_iso # Show raw if format error

            user_list.append({
                "uid": uid,
                "username": username,
                "name": name,
                "last_action_time": last_action_time,
                "last_action_timestamp_iso": last_action_timestamp_iso
            })

        # Sort by last action time (descending)
        user_list.sort(key=lambda x: x["last_action_timestamp_iso"], reverse=True)

        formatted_list = [
            f"ID: <code>{user['uid']}</code> | @{user['username']} | {user['name']} | –ü–æ—Å–ª. –¥–µ–π—Å—Ç–≤–∏–µ: {user['last_action_time']}"
            for user in user_list
        ]

        header = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(formatted_list)}):</b>\n(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n\n"
        full_text = header + "\n".join(formatted_list)

        # Splitting message if too long
        max_len = 4000 # Slightly less than 4096 limit
        if len(full_text) > max_len:
            current_chunk = header
            for line in formatted_list:
                if len(current_chunk) + len(line) + 1 > max_len:
                    await message.answer(current_chunk)
                    current_chunk = header # Start new chunk with header? Maybe not needed.
                    current_chunk = "" # Start new chunk empty
                current_chunk += line + "\n"
            if current_chunk: # Send the last part
                await message.answer(current_chunk)
        else:
            await message.answer(full_text)
        await logger_service.log_action(user_id, "users_command")
    return wrapped_handler

def make_user_profile_handler(db, logger_service):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        await state.clear() # Clear any state
        user_id = message.from_user.id
        await logger_service.log_action(user_id, "user_profile_viewed")
        profile = await build_user_profile(user_id, db) # build_user_profile now handles non-existent profiles

        # Use get for safe access with defaults
        mood = profile.get("mood", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        mood_trend_list = profile.get("mood_trend", [])
        mood_trend = " ‚Üí ".join(mood_trend_list) if mood_trend_list else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        themes_list = profile.get("themes", [])
        themes = ", ".join(themes_list) if themes_list else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        response_count = profile.get("response_count", 0)
        request_count = profile.get("request_count", 0)
        avg_response_length = round(profile.get("avg_response_length", 0), 1)
        days_active = profile.get("days_active", 0)
        interactions_per_day = round(profile.get("interactions_per_day", 0), 1)
        last_updated_dt = profile.get("last_updated")
        last_updated = last_updated_dt.strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) else "–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è"
        # New fields
        initial_resource = profile.get("initial_resource", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        final_resource = profile.get("final_resource", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        recharge_method = profile.get("recharge_method", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")


        text = (
            f"üìä <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
            f"üë§ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n"
            f"  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ): {mood}\n"
            f"  - –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_trend}\n"
            f"  - –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã: {themes}\n\n"
            f"üåø <b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è):</b>\n"
            f"  - –í –Ω–∞—á–∞–ª–µ: {initial_resource}\n"
            f"  - –í –∫–æ–Ω—Ü–µ: {final_resource}\n"
            f"  - –°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recharge_method}\n\n"
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  - –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: {response_count}\n"
            f"  - –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–∞—Ä—Ç–∞–º (—Å —Ç–µ–∫—Å—Ç–æ–º): {request_count}\n"
            f"  - –°—Ä. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_response_length} —Å–∏–º–≤.\n"
            f"  - –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}\n"
            f"  - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å: {interactions_per_day}\n\n"
            f"‚è± <b>–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:</b> {last_updated} –ú–°–ö\n\n"
            f"<i>–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏.</i>"
        )

        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    return wrapped_handler

def make_admin_user_profile_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        args = message.text.split()
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/admin_user_profile <user_id>`", parse_mode="MarkdownV2")
            return

        try:
            target_user_id = int(args[1])
        except ValueError:
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        profile = await build_user_profile(target_user_id, db) # Use the same function

        # Get user info for header
        user_info = db.get_user(target_user_id)
        name = user_info.get("name", "N/A")
        username = user_info.get("username", "N/A")

        mood = profile.get("mood", "N/A")
        mood_trend = " ‚Üí ".join(profile.get("mood_trend", [])) or "N/A"
        themes = ", ".join(profile.get("themes", [])) or "N/A"
        response_count = profile.get("response_count", "N/A")
        request_count = profile.get("request_count", "N/A")
        avg_response_length = round(profile.get("avg_response_length", 0), 2)
        days_active = profile.get("days_active", "N/A")
        interactions_per_day = round(profile.get("interactions_per_day", 0), 2)
        last_updated_dt = profile.get("last_updated")
        last_updated = last_updated_dt.strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) else "N/A"
        initial_resource = profile.get("initial_resource", "N/A")
        final_resource = profile.get("final_resource", "N/A")
        recharge_method = profile.get("recharge_method", "N/A")

        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{target_user_id}</code>\n"
            f"   –ò–º—è: {name}, –ù–∏–∫: @{username}\n\n"
            f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n"
            f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
            f"  –¢—Ä–µ–Ω–¥: {mood_trend}\n"
            f"  –¢–µ–º—ã: {themes}\n\n"
            f"<b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π):</b>\n"
            f"  –ù–∞—á–∞–ª–æ: {initial_resource}\n"
            f"  –ö–æ–Ω–µ—Ü: {final_resource}\n"
            f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recharge_method}\n\n"
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  –û—Ç–≤–µ—Ç–æ–≤: {response_count}, –ó–∞–ø—Ä–æ—Å–æ–≤: {request_count}\n"
            f"  –°—Ä. –¥–ª–∏–Ω–∞ –æ—Ç–≤.: {avg_response_length}\n"
            f"  –î–Ω–µ–π –∞–∫—Ç–∏–≤.: {days_active}, –í–∑–∞–∏–º./–¥–µ–Ω—å: {interactions_per_day}\n\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {last_updated} –ú–°–ö"
        )
        await message.answer(text)
        await logger_service.log_action(user_id, "admin_user_profile_viewed", {"target_user_id": target_user_id})
    return wrapped_handler

def make_feedback_handler(db, logger_service):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
        text = (
            f"{name}, —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ª—É—á—à–µ, –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ?\n"
            "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –ù–∞–ø–∏—à–∏ –∑–¥–µ—Å—å –≤—Å–µ, —á—Ç–æ –¥—É–º–∞–µ—à—å."
        )
        await message.answer(
            text,
            reply_markup=await get_main_menu(user_id, db),
            protect_content=True # Keep protect_content if desired
        )
        await state.set_state(UserState.waiting_for_feedback)
        await logger_service.log_action(user_id, "feedback_initiated")
    return wrapped_handler

def make_process_feedback_handler(db, logger_service):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        feedback_text = message.text.strip()
        if not feedback_text:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª(–∞). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=await get_main_menu(user_id, db))
            return # Remain in feedback state

        user_data = db.get_user(user_id)
        name = user_data.get("name", "–ê–Ω–æ–Ω–∏–º")
        username = user_data.get("username", "N/A")
        timestamp_iso = datetime.now(TIMEZONE).isoformat()

        # Save feedback to DB (assuming feedback table exists)
        try:
            with db.conn:
                db.conn.execute(
                    "INSERT INTO feedback (user_id, name, feedback, timestamp) VALUES (?, ?, ?, ?)",
                    (user_id, name, feedback_text, timestamp_iso)
                )
            await logger_service.log_action(user_id, "feedback_submitted", {"feedback": feedback_text})
            await message.answer(
                f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—É.",
                reply_markup=await get_main_menu(user_id, db),
                protect_content=True
            )
            # Notify admin (optional)
            try:
                admin_notify_text = f"üìù –ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç:\nID: {user_id}\n–ò–º—è: {name}\n–ù–∏–∫: @{username}\n\n–¢–µ–∫—Å—Ç:\n{feedback_text}"
                await bot.send_message(ADMIN_ID, admin_notify_text)
            except Exception as admin_err:
                logger.error(f"Failed to send feedback notification to admin: {admin_err}")

            await state.clear()
        except sqlite3.Error as db_err:
             logger.error(f"Failed to save feedback from user {user_id} to DB: {db_err}")
             await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=await get_main_menu(user_id, db))
             # Don't clear state on DB error, maybe user wants to try again
    return wrapped_handler

def make_name_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name")
        text = f"{name}, —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è?" if name else "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        text += " –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
        ]))
        await state.set_state(UserState.waiting_for_name)
        await logger_service.log_action(user_id, "name_change_initiated")
    return wrapped_handler

def make_process_name_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = message.text.strip()

        # Basic validation
        if not name or len(name) > 50: # Add length limit
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return # Remain in waiting_for_name state
        # Prevent using reserved button texts as names
        if name in ["‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π"]:
            await message.answer("–≠—Ç–æ –∏–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è :) –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")
            return

        await user_manager.set_name(user_id, name)
        await logger_service.log_action(user_id, "set_name", {"name": name})
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
    return wrapped_handler

def make_process_skip_name_handler(db, logger_service, user_manager):
    async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        await user_manager.set_name(user_id, "") # Set name to empty string
        await logger_service.log_action(user_id, "skip_name")
        await callback.message.edit_reply_markup(reply_markup=None) # Remove button
        await callback.message.answer("–ü–æ–Ω–∏–º–∞—é. –ò–º—è –Ω–µ –≥–ª–∞–≤–Ω–æ–µ. –¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.answer()
    return wrapped_handler

def make_remind_off_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        # await state.clear() # Clear state just in case
        current_state = await state.get_state()
        if current_state == UserState.waiting_for_reminder_time:
            await state.clear() # Clear only if in reminder setting state

        try:
            await user_manager.set_reminder(user_id, None) # Set time to None
            await logger_service.log_action(user_id, "set_reminder_time_off")
            name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
            text = f"{name}, —è –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—è."
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        except Exception as e:
            logger.error(f"Failed to disable reminders for user {user_id}: {e}")
            await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    return wrapped_handler

def make_process_reminder_time_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
        reminder_time_str = message.text.strip()
        try:
            # Validate format HH:MM
            reminder_dt = datetime.strptime(reminder_time_str, "%H:%M")
            reminder_time_normalized = reminder_dt.strftime("%H:%M")
            await user_manager.set_reminder(user_id, reminder_time_normalized)
            await logger_service.log_action(user_id, "set_reminder_time", {"reminder_time": reminder_time_normalized})
            text = f"{name}, –æ—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≤ <b>{reminder_time_normalized}</b> –ø–æ –ú–æ—Å–∫–≤–µ."
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
            await state.clear()
        except ValueError:
            text = f"{name}, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>08:30</b> –∏–ª–∏ <b>21:00</b>)."
            await message.answer(text) # No menu markup, keep user in state
            # Remain in UserState.waiting_for_reminder_time
    return wrapped_handler

def make_logs_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        args = message.text.split()
        target_date_str = None
        if len(args) > 1:
            target_date_str = args[1]
            try:
                target_date = datetime.strptime(target_date_str, "%Y-%m-%d").date()
            except ValueError:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/logs 2024-04-16`", parse_mode="MarkdownV2")
                return
        else:
            target_date = datetime.now(TIMEZONE).date()
            target_date_str = target_date.strftime("%Y-%m-%d")

        await logger_service.log_action(user_id, "logs_command", {"date": target_date_str})
        logs = db.get_actions() # Get all logs (sorted by timestamp ASC)
        filtered_logs = []
        excluded_users = set(NO_LOGS_USERS)
        for log in logs:
            try:
                # Compare dates correctly
                log_timestamp_dt = datetime.fromisoformat(log["timestamp"]).astimezone(TIMEZONE)
                if log_timestamp_dt.date() == target_date and log.get("user_id") not in excluded_users:
                    filtered_logs.append(log)
            except (ValueError, TypeError) as e:
                logger.warning(f"Could not parse timestamp in log for admin view: {log.get('timestamp')}, error: {e}")
                continue

        if not filtered_logs:
            await message.answer(f"–õ–æ–≥–æ–≤ –∑–∞ {target_date_str} –Ω–µ—Ç (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).")
            return

        # Formatting logs
        log_lines = []
        for log in filtered_logs:
            ts = datetime.fromisoformat(log['timestamp']).astimezone(TIMEZONE).strftime('%H:%M:%S')
            uid = log['user_id']
            action = log['action']
            # Format details nicely
            details_str = ""
            if isinstance(log['details'], dict) and log['details']:
                 details_str = ", ".join([f"{k}={v}" for k,v in log['details'].items()])
                 # Limit details length
                 details_str = f" ({details_str[:100]}{'...' if len(details_str)>100 else ''})"
            log_lines.append(f"{ts} U:{uid} A:{action}{details_str}")

        header = f"üìú <b>–õ–æ–≥–∏ –∑–∞ {target_date_str} ({len(log_lines)} –∑–∞–ø–∏—Å–µ–π):</b>\n\n"
        full_text = header + "\n".join(log_lines)

        # Splitting message
        max_len = 4000
        if len(full_text) > max_len:
            current_chunk = header
            for line in log_lines:
                if len(current_chunk) + len(line) + 1 > max_len:
                    await message.answer(current_chunk)
                    current_chunk = "" # Start new chunk empty
                current_chunk += line + "\n"
            if current_chunk:
                await message.answer(current_chunk)
        else:
            await message.answer(full_text)
    return wrapped_handler

def make_bonus_request_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        user_data = db.get_user(user_id)
        name = user_data.get("name", "–î—Ä—É–≥")
        if not user_data.get("bonus_available"):
            text = f"{name}, —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π."
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
            return

        advice = random.choice(UNIVERSE_ADVICE)
        text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\n\n{advice}"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await logger_service.log_action(user_id, "bonus_request_used", {"advice": advice})
        # Bonus is usually single-use, disable it after use
        await user_manager.set_bonus_available(user_id, False)
        await logger_service.log_action(user_id, "bonus_disabled_after_use")
    return wrapped_handler

# --- Error Handlers for Incorrect Input Types ---
async def handle_text_when_waiting_callback(message: types.Message, state: FSMContext):
    """Handles text messages received when a callback query (button press) is expected."""
    user_id = message.from_user.id
    current_state = await state.get_state()
    logger.warning(f"User {user_id} sent text '{message.text}' while in state {current_state}, expected callback.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ üëÜ")

async def handle_callback_when_waiting_text(callback: types.CallbackQuery, state: FSMContext):
    """Handles callback queries received when a text message is expected."""
    user_id = callback.from_user.id
    current_state = await state.get_state()
    logger.warning(f"User {user_id} sent callback '{callback.data}' while in state {current_state}, expected text.")
    await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", show_alert=True)

# --- Handler Registration ---
def register_handlers(dp: Dispatcher, db: Database, logger_service: LoggingService, user_manager: UserManager):
    logger.info("Registering handlers...")

    # --- Standard Commands ---
    dp.message.register(make_start_handler(db, logger_service, user_manager), Command("start"), StateFilter("*")) # Allow /start from any state
    dp.message.register(make_share_handler(db, logger_service), Command("share"), StateFilter("*"))
    dp.message.register(make_remind_handler(db, logger_service, user_manager), Command("remind"), StateFilter("*"))
    dp.message.register(make_remind_off_handler(db, logger_service, user_manager), Command("remind_off"), StateFilter("*"))
    dp.message.register(make_name_handler(db, logger_service, user_manager), Command("name"), StateFilter("*"))
    dp.message.register(make_feedback_handler(db, logger_service), Command("feedback"), StateFilter("*"))
    dp.message.register(make_user_profile_handler(db, logger_service), Command("user_profile"), StateFilter("*"))

    # --- Admin Commands ---
    dp.message.register(make_users_handler(db, logger_service), Command("users"))
    dp.message.register(make_logs_handler(db, logger_service), Command("logs"))
    dp.message.register(make_admin_user_profile_handler(db, logger_service), Command("admin_user_profile"))

    # --- Text Button Handlers ---
    # Note: Use F.text filter in aiogram 3.x+ for better practice
    dp.message.register(make_bonus_request_handler(db, logger_service), lambda m: m.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π", StateFilter("*"))

    # --- State Handlers ---
    # Name setting
    dp.message.register(make_process_name_handler(db, logger_service, user_manager), UserState.waiting_for_name)
    dp.callback_query.register(make_process_skip_name_handler(db, logger_service, user_manager), lambda c: c.data == "skip_name", UserState.waiting_for_name)
    dp.message.register(handle_text_when_waiting_callback, StateFilter(UserState.waiting_for_name)) # Error handler if user types instead of skipping via button

    # Reminder setting
    dp.message.register(make_process_reminder_time_handler(db, logger_service, user_manager), UserState.waiting_for_reminder_time)
    dp.callback_query.register(handle_callback_when_waiting_text, StateFilter(UserState.waiting_for_reminder_time)) # Error handler

    # Feedback submission
    dp.message.register(make_process_feedback_handler(db, logger_service), UserState.waiting_for_feedback)
    dp.callback_query.register(handle_callback_when_waiting_text, StateFilter(UserState.waiting_for_feedback)) # Error handler

    # --- Card of the Day Flow Handlers ---
    # Entry point ("–ö–∞—Ä—Ç–∞ –¥–Ω—è" button) -> triggers initial resource check
    dp.message.register(handle_card_request, lambda m: m.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", StateFilter("*")) # Start flow from any state

    # Step 1: Initial Resource Check
    dp.callback_query.register(process_initial_resource_callback, UserState.waiting_for_initial_resource, lambda c: c.data.startswith("resource_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_initial_resource) # Error handler

    # Step 2: Request Type Choice
    dp.callback_query.register(process_request_type_callback, UserState.waiting_for_request_type_choice, lambda c: c.data.startswith("request_type_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_request_type_choice) # Error handler

    # Step 3a: Waiting for Request Text (if chosen)
    dp.message.register(process_request_text, UserState.waiting_for_request_text_input)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_request_text_input) # Error handler

    # Step 4: Waiting for Initial Association (after card shown)
    dp.message.register(process_initial_response, UserState.waiting_for_initial_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_initial_response) # Error handler

    # Step 5: Exploration Choice
    dp.callback_query.register(process_exploration_choice_callback, UserState.waiting_for_exploration_choice, lambda c: c.data.startswith("explore_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_exploration_choice) # Error handler

    # Step 6: Grok Responses
    dp.message.register(process_first_grok_response, UserState.waiting_for_first_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_first_grok_response) # Error handler

    dp.message.register(process_second_grok_response, UserState.waiting_for_second_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_second_grok_response) # Error handler

    dp.message.register(process_third_grok_response, UserState.waiting_for_third_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_third_grok_response) # Error handler

    # Step 7: Final Resource Check
    dp.callback_query.register(process_final_resource_callback, UserState.waiting_for_final_resource, lambda c: c.data.startswith("resource_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_final_resource) # Error handler

    # Step 8: Recharge Method Input (if resource low)
    dp.message.register(process_recharge_method, UserState.waiting_for_recharge_method)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_recharge_method) # Error handler

    # Final Feedback Callback (like/dislike buttons shown at the very end)
    # This can be triggered even after state is cleared, so no StateFilter needed? Or use "*"
    dp.callback_query.register(process_card_feedback, lambda c: c.data.startswith("feedback_v2_"), StateFilter("*")) # Allow from any state

    # --- Survey Handlers Registration (Optional, if needed) ---
    # dp.message.register(handle_survey, Command("survey"))
    # dp.callback_query.register(make_process_survey_response_handler(db, logging_service), lambda c: c.data.startswith("survey_"), StateFilter(SurveyState)) # Requires SurveyState definition

    # --- Default Handler for Unknown Messages ---
    # Make sure this is registered LAST
    @dp.message(StateFilter("*")) # Catches any message in any state not handled above
    async def handle_unknown_message_state(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        logger.warning(f"Unknown message '{message.text}' received from user {message.from_user.id} in state {current_state}")
        # Provide more context-specific help if possible
        if current_state:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, —è –æ–∂–∏–¥–∞–ª(–∞) –¥—Ä—É–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ. –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ò–ª–∏ –Ω–∞–∂–º–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        else:
            # Already handled by the handler below if state is None
             await handle_unknown_message(message)


    @dp.message() # Catches any message with no state and not handled above
    async def handle_unknown_message(message: types.Message):
        logger.warning(f"Unknown message '{message.text}' received from user {message.from_user.id} with no state.")
        await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª(–∞) —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /start, /name, /remind, /share, /feedback, /user_profile.")

    @dp.callback_query() # Catches any callback not handled above
    async def handle_unknown_callback(callback: types.CallbackQuery, state: FSMContext):
         current_state = await state.get_state()
         logger.warning(f"Unknown callback '{callback.data}' received from user {callback.from_user.id} in state {current_state}")
         await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)


    logger.info("Handlers registered successfully.")

# --- Main Execution ---
async def main():
    logger.info("Starting bot...")
    # Set bot commands displayed in Telegram
    commands = [
            types.BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"),
            types.BotCommand(command="name", description="üßë –£–∫–∞–∑–∞—Ç—å –∏–º—è"),
            types.BotCommand(command="remind", description="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            types.BotCommand(command="share", description="üéÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è"),
            types.BotCommand(command="feedback", description="üì© –û—Ç–∑—ã–≤")
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

    # Register all handlers
    register_handlers(dp, db, logging_service, user_manager)

    # Start background tasks (like reminders)
    # Ensure notifier.check_reminders() is awaitable and handles errors internally
    reminder_task = asyncio.create_task(notifier.check_reminders())
    logger.info("Reminder check task started.")

    # Start polling
    logger.info("Starting polling...")
    try:
        # Run polling loop
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"Polling failed: {e}", exc_info=True)
    finally:
        logger.info("Stopping bot...")
        # Cancel background tasks gracefully
        reminder_task.cancel()
        try:
            await reminder_task
        except asyncio.CancelledError:
            logger.info("Reminder task cancelled.")
        # Close DB connection
        if db and db.conn:
            db.conn.close()
            logger.info("Database connection closed.")
        # Close bot session
        await bot.session.close()
        logger.info("Bot session closed.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually.")
    except Exception as e:
        logger.critical(f"Critical error in main execution: {e}", exc_info=True)
