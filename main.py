# –∫–æ–¥/main.py

import asyncio
from aiogram import Bot, Dispatcher, types, F # –î–æ–±–∞–≤–∏–ª–∏ F –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ---
from config import (
    TOKEN, CHANNEL_ID, ADMIN_ID, UNIVERSE_ADVICE, BOT_LINK,
    TIMEZONE, NO_LOGS_USERS, DATA_DIR
)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤:
from database.db import Database # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è db.py
from modules.logging_service import LoggingService
from modules.notification_service import NotificationService
from modules.user_management import UserState, UserManager # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è user_management.py
from modules.ai_service import build_user_profile # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø ai_service.py

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ü–†–ê–í–ò–õ–¨–ù–û–ô card_of_the_day.py
from modules.card_of_the_day import (
    get_main_menu,
    # --- –®–∞–≥–∏ –Ω–æ–≤–æ–≥–æ —Ñ–ª–æ—É ---
    handle_card_request,                 # 0. –ù–∞–∂–∞—Ç–∏–µ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
    ask_initial_resource,                # 1. –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –æ –Ω–∞—á. —Ä–µ—Å—É—Ä—Å–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_card_request)
    process_initial_resource_callback,   # 1.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –Ω–∞—á. —Ä–µ—Å—É—Ä—Å–∞
    ask_request_type_choice,             # 2. –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–∏–ø–µ –∑–∞–ø—Ä–æ—Å–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ 1.5)
    process_request_type_callback,       # 2.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    process_request_text,                # 3–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    draw_card_direct,                    # 3–±. –í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ 2.5 –∏–ª–∏ 3–∞)
    process_initial_response,            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
    ask_exploration_choice,              # 5. –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ?" (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ 4)
    process_exploration_choice_callback, # 5.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    ask_grok_question,                   # 6. –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞ Grok (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ 5.5 –∏–ª–∏ —Å–ª–µ–¥. —à–∞–≥–æ–≤)
    process_first_grok_response,         # 6–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 1–π –≤–æ–ø—Ä–æ—Å Grok
    process_second_grok_response,        # 6–±. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 2–π –≤–æ–ø—Ä–æ—Å Grok
    process_third_grok_response,         # 6–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 3–π –≤–æ–ø—Ä–æ—Å Grok
    generate_and_send_summary,           # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏
    finish_interaction_flow,             # 7. –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –æ –∫–æ–Ω. —Ä–µ—Å—É—Ä—Å–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ 5.5 –∏–ª–∏ 6–≤)
    process_final_resource_callback,     # 7.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–æ–Ω. —Ä–µ—Å—É—Ä—Å–∞
    process_recharge_method,             # 8. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ –º–µ—Ç–æ–¥–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    show_final_feedback_and_menu,        # 9. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ + –æ—á–∏—Å—Ç–∫–∞ state
    process_card_feedback                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞ (üëç/ü§î/üòï)
)

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import random
from datetime import datetime, timedelta
import os
import json
import logging
import sqlite3 # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ë–î

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger_root = logging.getLogger() # –ö–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__) # –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è main

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage() # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ RedisStorage –∏–ª–∏ –¥—Ä—É–≥–æ–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–∞–∂–Ω–æ –¥–ª—è Amvera –∏ Docker)
os.makedirs(DATA_DIR, exist_ok=True)
db_path = os.path.join(DATA_DIR, "bot.db")
logger.info(f"Initializing database at: {db_path}")
print(f"Initializing database at: {db_path}") # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö Amvera
try:
    db = Database(path=db_path)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    db.conn.execute("SELECT 1")
    logger.info(f"Database connection established successfully: {db.conn}")
    # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ db, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è get_chat)
    db.bot = bot
except sqlite3.Error as e:
    logger.exception(f"CRITICAL: Database initialization failed at {db_path}: {e}")
    print(f"CRITICAL: Database initialization failed at {db_path}: {e}")
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    raise SystemExit(f"Database failed to initialize: {e}")
except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.exception(f"CRITICAL: Unexpected error during Database initialization: {e}")
    print(f"CRITICAL: Unexpected error during Database initialization: {e}")
    raise SystemExit(f"Unexpected error initializing Database: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
logging_service = LoggingService(db)
notifier = NotificationService(bot, db)
user_manager = UserManager(db)

# --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–±—ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if isinstance(event, (types.Message, types.CallbackQuery)):
            user = event.from_user
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ —Å–ª—É—á–∞–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not user or user.is_bot:
                return await handler(event, data)

            user_id = user.id
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞
            if user_id == ADMIN_ID:
                return await handler(event, data)

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                user_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                allowed_statuses = ["member", "administrator", "creator"]
                if user_status.status not in allowed_statuses:
                    user_db_data = db.get_user(user_id) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Å—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç)
                    name = user_db_data.get("name") if user_db_data else None
                    link = f"https://t.me/{CHANNEL_ID.lstrip('@')}" # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! üëã\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{link}'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>. ‚ú®\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ /start." if name else f"–ü—Ä–∏–≤–µ—Ç! üëã\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{link}'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>. ‚ú®\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ /start."

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                    if isinstance(event, types.Message):
                        await event.answer(text, disable_web_page_preview=True)
                    elif isinstance(event, types.CallbackQuery):
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
                        await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                        await event.message.answer(text, disable_web_page_preview=True)
                    return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

            except Exception as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ)
                # –ö–æ–¥ –æ—à–∏–±–∫–∏ 'chat member not found' —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ
                logger.error(f"Subscription check failed for user {user_id}: {e}")
                error_text = f"–û–π, –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω(–∞), –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /start."
                if isinstance(event, types.Message):
                     await event.answer(error_text)
                elif isinstance(event, types.CallbackQuery):
                     # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ + —Å–æ–æ–±—â–µ–Ω–∏–µ
                     await event.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=False)
                     await event.message.answer(error_text)
                return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)

# –ü—Ä–∏–º–µ–Ω—è–µ–º Middleware –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –∫–æ–ª–±—ç–∫–∞–º
dp.message.middleware(SubscriptionMiddleware())
dp.callback_query.middleware(SubscriptionMiddleware())
logger.info("SubscriptionMiddleware registered.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ñ–∞–±—Ä–∏–∫–∏) ---
# (–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ '#–¥–æ—Ä–∞–±–æ—Ç—Ç–∞–Ω–Ω—ã–π_–∫–æ–¥ main.py.txt', —Ç.–∫. –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç —Ä–∞–±–æ—á–∏–º–∏ –∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞—á–µ)

def make_start_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext, command: CommandObject | None = None): # –î–æ–±–∞–≤–∏–ª–∏ command
        await state.clear() # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
        user_id = message.from_user.id
        username = message.from_user.username or ""
        args = command.args if command else "" # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã

        await logger_service.log_action(user_id, "start_command", {"args": args})

        user_data = db.get_user(user_id) # –ü–æ–ª—É—á–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data.get("username") != username:
            db.update_user(user_id, {"username": username})

        # –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if args and args.startswith("ref_"):
            try:
                referrer_id = int(args[4:])
                if referrer_id != user_id:
                    # add_referral –≤–µ—Ä–Ω–µ—Ç True, –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤–ø–µ—Ä–≤—ã–µ
                    if db.add_referral(referrer_id, user_id):
                         referrer_data = db.get_user(referrer_id)
                         # –î–∞–µ–º –±–æ–Ω—É—Å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                         if referrer_data and not referrer_data.get("bonus_available"):
                             await user_manager.set_bonus_available(referrer_id, True)
                             ref_name = referrer_data.get("name", "–î—Ä—É–≥")
                             text = f"{ref_name}, —É—Ä–∞! üéâ –ö—Ç–æ-—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π' –≤ –º–µ–Ω—é."
                             try:
                                 await bot.send_message(referrer_id, text, reply_markup=await get_main_menu(referrer_id, db))
                                 await logger_service.log_action(referrer_id, "referral_bonus_granted", {"referred_user": user_id})
                             except Exception as send_err:
                                 logger.error(f"Failed to send referral bonus message to {referrer_id}: {send_err}")
            except (ValueError, TypeError, IndexError) as ref_err:
                 logger.warning(f"Invalid referral code processing '{args}' from user {user_id}: {ref_err}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user_name = user_data.get("name")
        if not user_name:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! ‚ú® –†–∞–¥(–∞) –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!\n–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
            ]))
            await state.set_state(UserState.waiting_for_name)
        else:
            await message.answer(f"{user_name}, —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! üëã\n–ì–æ—Ç–æ–≤(–∞) –∫ –∫–∞—Ä—Ç–µ –¥–Ω—è?", reply_markup=await get_main_menu(user_id, db))

    return wrapped_handler

def make_share_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
        ref_link = f"{BOT_LINK}?start=ref_{user_id}"
        text = (f"{name}, —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏?\n"
                f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
                f"–ö–æ–≥–¥–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –Ω–µ–π –∏ –Ω–∞—á–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é! ‚ú®")
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await logger_service.log_action(user_id, "share_command")
    return wrapped_handler

def make_remind_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = db.get_user(user_id)
        name = user_data.get("name", "–î—Ä—É–≥")
        current_reminder = user_data.get("reminder_time")

        current_reminder_text = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>{current_reminder}</b> –ú–°–ö." if current_reminder else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        purpose_text = "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–∞–º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è."
        instruction_text = "–í–≤–µ–¥–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>09:00</b> –∏–ª–∏ <b>21:30</b>), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –ú–æ—Å–∫–≤–µ.\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /remind_off, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–æ–≤—Å–µ–º."
        text = f"{name}, –ø—Ä–∏–≤–µ—Ç!\n\n{purpose_text}\n\n{current_reminder_text}\n{instruction_text}"

        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.set_state(UserState.waiting_for_reminder_time)
        await logger_service.log_action(user_id, "remind_command")
    return wrapped_handler

def make_users_handler(db, logger_service):
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         if user_id != ADMIN_ID:
             await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
             return

         users = db.get_all_users()
         if not users:
             await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
             return

         excluded_users = set(NO_LOGS_USERS)
         filtered_users = [uid for uid in users if uid not in excluded_users]
         if not filtered_users:
             await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö).")
             return

         user_list = []
         for uid in filtered_users:
             user_data = db.get_user(uid)
             name = user_data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
             username = user_data.get("username", "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞")
             last_action_time = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"
             last_action_timestamp_iso = "1970-01-01T00:00:00+00:00" # Default for sorting

             user_actions = db.get_actions(uid) # Get sorted actions
             if user_actions:
                 last_action = user_actions[-1] # Last action because they are sorted ASC
                 last_action_timestamp_iso = last_action["timestamp"]
                 try:
                     last_action_dt = datetime.fromisoformat(last_action_timestamp_iso.replace('Z', '+00:00')).astimezone(TIMEZONE)
                     last_action_time = last_action_dt.strftime("%Y-%m-%d %H:%M")
                 except ValueError:
                     last_action_time = last_action_timestamp_iso # Show raw if format error

             user_list.append({
                 "uid": uid,
                 "username": username,
                 "name": name,
                 "last_action_time": last_action_time,
                 "last_action_timestamp_iso": last_action_timestamp_iso
             })

         user_list.sort(key=lambda x: x["last_action_timestamp_iso"], reverse=True)

         formatted_list = [
             f"ID: <code>{user['uid']}</code> | @{user['username']} | {user['name']} | –ü–æ—Å–ª. –¥–µ–π—Å—Ç–≤–∏–µ: {user['last_action_time']}"
             for user in user_list
         ]

         header = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(formatted_list)}):</b>\n(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n\n"
         full_text = header + "\n".join(formatted_list)

         max_len = 4000
         if len(full_text) > max_len:
             current_chunk = header
             for line in formatted_list:
                 if len(current_chunk) + len(line) + 1 > max_len:
                     await message.answer(current_chunk)
                     current_chunk = "" # Start new chunk empty
                 current_chunk += line + "\n"
             if current_chunk:
                 await message.answer(current_chunk)
         else:
             await message.answer(full_text)
         await logger_service.log_action(user_id, "users_command")
     return wrapped_handler

def make_user_profile_handler(db, logger_service):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         await state.clear() # Clear any state
         user_id = message.from_user.id
         await logger_service.log_action(user_id, "user_profile_viewed")
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç –ø—É—Å—Ç–æ–π
         profile = await build_user_profile(user_id, db)

         # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
         mood = profile.get("mood", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
         mood_trend_list = profile.get("mood_trend", [])
         mood_trend = " ‚Üí ".join(mood_trend_list) if mood_trend_list else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
         themes_list = profile.get("themes", [])
         themes = ", ".join(themes_list) if themes_list and themes_list != ["–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
         response_count = profile.get("response_count", 0)
         request_count = profile.get("request_count", 0)
         avg_response_length = round(profile.get("avg_response_length", 0), 1)
         days_active = profile.get("days_active", 0)
         interactions_per_day = round(profile.get("interactions_per_day", 0), 1)
         last_updated_dt = profile.get("last_updated")
         last_updated = last_updated_dt.strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) else "–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è"
         # –ù–æ–≤—ã–µ –ø–æ–ª—è —Ä–µ—Å—É—Ä—Å–∞
         initial_resource = profile.get("initial_resource") or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
         final_resource = profile.get("final_resource") or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
         recharge_method = profile.get("recharge_method") or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

         text = (
             f"üìä <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
             f"üë§ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n"
             f"  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ): {mood}\n"
             f"  - –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_trend}\n"
             f"  - –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã: {themes}\n\n"
             f"üåø <b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è):</b>\n"
             f"  - –í –Ω–∞—á–∞–ª–µ: {initial_resource}\n"
             f"  - –í –∫–æ–Ω—Ü–µ: {final_resource}\n"
             f"  - –°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recharge_method}\n\n"
             f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
             f"  - –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: {response_count}\n"
             f"  - –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–∞—Ä—Ç–∞–º (—Å —Ç–µ–∫—Å—Ç–æ–º): {request_count}\n"
             f"  - –°—Ä. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_response_length} —Å–∏–º–≤.\n"
             f"  - –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}\n"
             f"  - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å: {interactions_per_day}\n\n"
             f"‚è± <b>–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:</b> {last_updated} –ú–°–ö\n\n"
             f"<i>–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏.</i>"
         )

         await message.answer(text, reply_markup=await get_main_menu(user_id, db))
     return wrapped_handler

def make_admin_user_profile_handler(db, logger_service):
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         if user_id != ADMIN_ID:
             await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
             return

         args = message.text.split()
         if len(args) < 2:
             await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/admin_user_profile <user_id>`", parse_mode="MarkdownV2")
             return

         try:
             target_user_id = int(args[1])
         except ValueError:
             await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
             return

         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
         user_info = db.get_user(target_user_id)
         if not user_info: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
             await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
             return

         profile = await build_user_profile(target_user_id, db) # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å

         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
         name = user_info.get("name", "N/A")
         username = user_info.get("username", "N/A")
         mood = profile.get("mood", "N/A")
         mood_trend = " ‚Üí ".join(profile.get("mood_trend", [])) or "N/A"
         themes = ", ".join(profile.get("themes", [])) or "N/A"
         response_count = profile.get("response_count", "N/A")
         request_count = profile.get("request_count", "N/A")
         avg_response_length = round(profile.get("avg_response_length", 0), 2)
         days_active = profile.get("days_active", "N/A")
         interactions_per_day = round(profile.get("interactions_per_day", 0), 2)
         last_updated_dt = profile.get("last_updated")
         last_updated = last_updated_dt.strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) else "N/A"
         initial_resource = profile.get("initial_resource") or "N/A"
         final_resource = profile.get("final_resource") or "N/A"
         recharge_method = profile.get("recharge_method") or "N/A"

         text = (
             f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{target_user_id}</code>\n"
             f"   –ò–º—è: {name}, –ù–∏–∫: @{username}\n\n"
             f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n"
             f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
             f"  –¢—Ä–µ–Ω–¥: {mood_trend}\n"
             f"  –¢–µ–º—ã: {themes}\n\n"
             f"<b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π):</b>\n"
             f"  –ù–∞—á–∞–ª–æ: {initial_resource}\n"
             f"  –ö–æ–Ω–µ—Ü: {final_resource}\n"
             f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recharge_method}\n\n"
             f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
             f"  –û—Ç–≤–µ—Ç–æ–≤: {response_count}, –ó–∞–ø—Ä–æ—Å–æ–≤: {request_count}\n"
             f"  –°—Ä. –¥–ª–∏–Ω–∞ –æ—Ç–≤.: {avg_response_length}\n"
             f"  –î–Ω–µ–π –∞–∫—Ç–∏–≤.: {days_active}, –í–∑–∞–∏–º./–¥–µ–Ω—å: {interactions_per_day}\n\n"
             f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {last_updated} –ú–°–ö"
         )
         await message.answer(text)
         await logger_service.log_action(user_id, "admin_user_profile_viewed", {"target_user_id": target_user_id})
     return wrapped_handler

def make_feedback_handler(db, logger_service):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
         text = (
             f"{name}, —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ª—É—á—à–µ, –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ?\n"
             "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –ù–∞–ø–∏—à–∏ –∑–¥–µ—Å—å –≤—Å–µ, —á—Ç–æ –¥—É–º–∞–µ—à—å."
         )
         await message.answer(
             text,
             reply_markup=await get_main_menu(user_id, db),
             protect_content=True # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
         )
         await state.set_state(UserState.waiting_for_feedback)
         await logger_service.log_action(user_id, "feedback_initiated")
     return wrapped_handler

def make_process_feedback_handler(db, logger_service):
      async def wrapped_handler(message: types.Message, state: FSMContext):
          user_id = message.from_user.id
          feedback_text = message.text.strip()
          if not feedback_text:
              await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª(–∞). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=await get_main_menu(user_id, db))
              return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞

          user_data = db.get_user(user_id)
          name = user_data.get("name", "–ê–Ω–æ–Ω–∏–º")
          username = user_data.get("username", "N/A")
          timestamp_iso = datetime.now(TIMEZONE).isoformat()

          try:
              # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ –ë–î
              with db.conn:
                  db.conn.execute(
                      "INSERT INTO feedback (user_id, name, feedback, timestamp) VALUES (?, ?, ?, ?)",
                      (user_id, name, feedback_text, timestamp_iso)
                  )
              await logger_service.log_action(user_id, "feedback_submitted", {"feedback_length": len(feedback_text)}) # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
              await message.answer(
                  f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—É. üôè",
                  reply_markup=await get_main_menu(user_id, db),
                  protect_content=True
              )
              # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
              try:
                  admin_notify_text = (f"üìù –ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç:\n"
                                       f"ID: <code>{user_id}</code>\n"
                                       f"–ò–º—è: {name}\n"
                                       f"–ù–∏–∫: @{username}\n\n"
                                       f"<b>–¢–µ–∫—Å—Ç:</b>\n{feedback_text}")
                  await bot.send_message(ADMIN_ID, admin_notify_text[:4090]) # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
              except Exception as admin_err:
                  logger.error(f"Failed to send feedback notification to admin: {admin_err}")

              await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

          except sqlite3.Error as db_err:
               logger.error(f"Failed to save feedback from user {user_id} to DB: {db_err}", exc_info=True)
               await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=await get_main_menu(user_id, db))
               # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î
      return wrapped_handler

def make_name_handler(db, logger_service, user_manager):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = db.get_user(user_id).get("name")
         text = f"–¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –∏–º—è: <b>{name}</b>.\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?" if name else "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
         text += "\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å."
         await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
             [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
         ]))
         await state.set_state(UserState.waiting_for_name)
         await logger_service.log_action(user_id, "name_change_initiated")
     return wrapped_handler

def make_process_name_handler(db, logger_service, user_manager):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = message.text.strip()
         # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
         if not name:
             await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –≤—ã—à–µ.")
             return
         if len(name) > 50:
             await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
             return
         # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
         reserved_names = ["‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π"]
         if name in reserved_names:
             await message.answer(f"–ò–º—è '{name}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è :) –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.")
             return

         await user_manager.set_name(user_id, name)
         await logger_service.log_action(user_id, "set_name", {"name": name})
         await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
         await state.clear()
     return wrapped_handler

def make_process_skip_name_handler(db, logger_service, user_manager):
     async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
         user_id = callback.from_user.id
         await user_manager.set_name(user_id, "") # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–µ –∏–º—è
         await logger_service.log_action(user_id, "skip_name")
         try:
             await callback.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
         except Exception as e:
              logger.warning(f"Could not edit message on skip_name for user {user_id}: {e}")
         await callback.message.answer("–•–æ—Ä–æ—à–æ, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –±–µ–∑ –∏–º–µ–Ω–∏.\n–ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞).", reply_markup=await get_main_menu(user_id, db))
         await state.clear()
         await callback.answer()
     return wrapped_handler

def make_remind_off_handler(db, logger_service, user_manager):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–≤—è–∑–∞–Ω–æ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
         current_state = await state.get_state()
         if current_state == UserState.waiting_for_reminder_time:
             await state.clear()

         try:
             await user_manager.set_reminder(user_id, None) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ None
             await logger_service.log_action(user_id, "set_reminder_time_off")
             name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
             text = f"{name}, —è –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—è. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π /remind."
             await message.answer(text, reply_markup=await get_main_menu(user_id, db))
         except Exception as e:
             logger.error(f"Failed to disable reminders for user {user_id}: {e}", exc_info=True)
             await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
     return wrapped_handler

def make_process_reminder_time_handler(db, logger_service, user_manager):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
         reminder_time_str = message.text.strip()
         try:
             # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú
             reminder_dt = datetime.strptime(reminder_time_str, "%H:%M")
             reminder_time_normalized = reminder_dt.strftime("%H:%M") # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
             await user_manager.set_reminder(user_id, reminder_time_normalized)
             await logger_service.log_action(user_id, "set_reminder_time", {"reminder_time": reminder_time_normalized})
             text = f"{name}, –æ—Ç–ª–∏—á–Ω–æ! üëç –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ <b>{reminder_time_normalized}</b> –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."
             await message.answer(text, reply_markup=await get_main_menu(user_id, db))
             await state.clear()
         except ValueError:
             # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
             text = f"{name}, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. üï∞Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>08:30</b> –∏–ª–∏ <b>21:00</b>)."
             await message.answer(text) # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
     return wrapped_handler

def make_logs_handler(db, logger_service):
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         if user_id != ADMIN_ID:
             await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
             return

         args = message.text.split()
         target_date_str = None
         if len(args) > 1:
             target_date_str = args[1]
             try:
                 target_date = datetime.strptime(target_date_str, "%Y-%m-%d").date()
             except ValueError:
                 await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/logs 2024-04-16`", parse_mode="MarkdownV2")
                 return
         else:
             target_date = datetime.now(TIMEZONE).date()
             target_date_str = target_date.strftime("%Y-%m-%d")

         await logger_service.log_action(user_id, "logs_command", {"date": target_date_str})
         logs = db.get_actions() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã ASC)
         filtered_logs = []
         excluded_users = set(NO_LOGS_USERS)

         for log in logs:
             try:
                 # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
                 log_timestamp_dt = datetime.fromisoformat(log["timestamp"].replace('Z', '+00:00')).astimezone(TIMEZONE)
                 if log_timestamp_dt.date() == target_date and log.get("user_id") not in excluded_users:
                     filtered_logs.append(log)
             except (ValueError, TypeError, KeyError) as e: # –î–æ–±–∞–≤–ª–µ–Ω KeyError
                 logger.warning(f"Could not parse timestamp or missing data in log for admin view: {log}, error: {e}")
                 continue

         if not filtered_logs:
             await message.answer(f"–õ–æ–≥–æ–≤ –∑–∞ {target_date_str} –Ω–µ—Ç (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).")
             return

         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
         log_lines = []
         for log in filtered_logs:
             ts_str = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00')).astimezone(TIMEZONE).strftime('%H:%M:%S')
             uid = log.get('user_id', 'N/A')
             action = log.get('action', 'N/A')
             details = log.get('details', {})
             details_str = ""
             if isinstance(details, dict) and details:
                 details_str = ", ".join([f"{k}={v}" for k, v in details.items()])
                 details_str = f" ({details_str[:100]}{'...' if len(details_str) > 100 else ''})" # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–µ—Ç–∞–ª–µ–π
             log_lines.append(f"{ts_str} U:{uid} A:{action}{details_str}")

         header = f"üìú <b>–õ–æ–≥–∏ –∑–∞ {target_date_str} ({len(log_lines)} –∑–∞–ø–∏—Å–µ–π):</b>\n\n"
         full_text = header + "\n".join(log_lines)

         # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
         max_len = 4000
         if len(full_text) > max_len:
             current_chunk = header
             for line in log_lines:
                 if len(current_chunk) + len(line) + 1 > max_len:
                     await message.answer(current_chunk)
                     current_chunk = "" # –ù–æ–≤—ã–π —á–∞–Ω–∫ –Ω–∞—á–∏–Ω–∞–µ–º –ø—É—Å—Ç—ã–º
                 current_chunk += line + "\n"
             if current_chunk: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                 await message.answer(current_chunk)
         else:
             await message.answer(full_text)
     return wrapped_handler

def make_bonus_request_handler(db, logger_service, user_manager): # –î–æ–±–∞–≤–∏–ª user_manager
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         user_data = db.get_user(user_id)
         name = user_data.get("name", "–î—Ä—É–≥")
         if not user_data.get("bonus_available"):
             text = f"{name}, —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø, –∫–æ–≥–¥–∞ –¥—Ä—É–≥ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π."
             await message.answer(text, reply_markup=await get_main_menu(user_id, db))
             return

         advice = random.choice(UNIVERSE_ADVICE)
         text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\n\n{advice}"
         await message.answer(text, reply_markup=await get_main_menu(user_id, db))
         await logger_service.log_action(user_id, "bonus_request_used", {"advice_preview": advice[:50]}) # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–æ–≤–µ—Ç–∞

         # –û—Ç–∫–ª—é—á–∞–µ–º –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
         await user_manager.set_bonus_available(user_id, False)
         await logger_service.log_action(user_id, "bonus_disabled_after_use")
     return wrapped_handler

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ ---
async def handle_text_when_waiting_callback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏."""
    current_state = await state.get_state()
    logger.warning(f"User {message.from_user.id} sent text '{message.text}' while in state {current_state}, expected callback.")
    # –û—Ç–≤–µ—á–∞–µ–º –≤–µ–∂–ª–∏–≤–æ, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä. üëÜ")

async def handle_callback_when_waiting_text(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç."""
    current_state = await state.get_state()
    logger.warning(f"User {callback.from_user.id} sent callback '{callback.data}' while in state {current_state}, expected text.")
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
    await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç.", show_alert=True)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_handlers(dp: Dispatcher, db: Database, logger_service: LoggingService, user_manager: UserManager):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤."""
    logger.info("Registering handlers...")

    # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å CommandObject –¥–ª—è /start
    dp.message.register(make_start_handler(db, logger_service, user_manager), Command("start"), StateFilter(None, UserState.waiting_for_name)) # –†–∞–∑—Ä–µ—à–∞–µ–º /start –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–º–µ–Ω–∏
    dp.message.register(make_share_handler(db, logger_service), Command("share"), StateFilter("*")) # –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    dp.message.register(make_remind_handler(db, logger_service, user_manager), Command("remind"), StateFilter("*"))
    dp.message.register(make_remind_off_handler(db, logger_service, user_manager), Command("remind_off"), StateFilter("*"))
    dp.message.register(make_name_handler(db, logger_service, user_manager), Command("name"), StateFilter("*"))
    dp.message.register(make_feedback_handler(db, logger_service), Command("feedback"), StateFilter("*"))
    dp.message.register(make_user_profile_handler(db, logger_service), Command("user_profile"), StateFilter("*"))

    # --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
    dp.message.register(make_users_handler(db, logger_service), Command("users"))
    dp.message.register(make_logs_handler(db, logger_service), Command("logs"))
    dp.message.register(make_admin_user_profile_handler(db, logger_service), Command("admin_user_profile"))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º F.text == "..." –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    dp.message.register(make_bonus_request_handler(db, logger_service, user_manager), F.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π", StateFilter("*"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –Ω–æ–≤—ã–π —Ñ–ª–æ—É
    dp.message.register(handle_card_request, F.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", StateFilter("*"))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ---

    # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
    dp.message.register(make_process_name_handler(db, logger_service, user_manager), UserState.waiting_for_name)
    dp.callback_query.register(make_process_skip_name_handler(db, logger_service, user_manager), F.data == "skip_name", UserState.waiting_for_name)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è skip_name –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–∏)
    # dp.callback_query.register(handle_callback_when_waiting_text, StateFilter(UserState.waiting_for_name)) # –ù–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –µ—Å—Ç—å skip_name

    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    dp.message.register(make_process_reminder_time_handler(db, logger_service, user_manager), UserState.waiting_for_reminder_time)
    dp.callback_query.register(handle_callback_when_waiting_text, StateFilter(UserState.waiting_for_reminder_time)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞

    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —Ñ–∏–¥–±–µ–∫–∞
    dp.message.register(make_process_feedback_handler(db, logger_service), UserState.waiting_for_feedback)
    dp.callback_query.register(handle_callback_when_waiting_text, StateFilter(UserState.waiting_for_feedback)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞

    # --- –§–ª–æ—É "–ö–∞—Ä—Ç—ã –î–Ω—è" (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ —à–∞–≥–æ–≤) ---

    # –®–∞–≥ 1: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ù–ê–ß–ê–õ–¨–ù–û–ì–û —Ä–µ—Å—É—Ä—Å–∞
    dp.callback_query.register(process_initial_resource_callback, UserState.waiting_for_initial_resource, F.data.startswith("resource_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_initial_resource) # –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏

    # –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¢–ò–ü–ê –∑–∞–ø—Ä–æ—Å–∞ (–≤ —É–º–µ / –Ω–∞–ø–∏—Å–∞—Ç—å)
    dp.callback_query.register(process_request_type_callback, UserState.waiting_for_request_type_choice, F.data.startswith("request_type_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_request_type_choice) # –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏

    # –®–∞–≥ 3–∞: –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¢–ï–ö–°–¢–ê –∑–∞–ø—Ä–æ—Å–∞
    dp.message.register(process_request_text, UserState.waiting_for_request_text_input)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_request_text_input) # –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞

    # –®–∞–≥ 4: –û–∂–∏–¥–∞–Ω–∏–µ –ü–ï–†–í–û–ô –ê–°–°–û–¶–ò–ê–¶–ò–ò (—Ç–µ–∫—Å—Ç)
    dp.message.register(process_initial_response, UserState.waiting_for_initial_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_initial_response) # –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞

    # –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ò–°–°–õ–ï–î–û–í–ê–¢–¨ –î–ê–õ–¨–®–ï (–¥–∞/–Ω–µ—Ç)
    dp.callback_query.register(process_exploration_choice_callback, UserState.waiting_for_exploration_choice, F.data.startswith("explore_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_exploration_choice) # –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏

    # –®–∞–≥ 6: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã GROK (—Ç–µ–∫—Å—Ç)
    dp.message.register(process_first_grok_response, UserState.waiting_for_first_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_first_grok_response)

    dp.message.register(process_second_grok_response, UserState.waiting_for_second_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_second_grok_response)

    dp.message.register(process_third_grok_response, UserState.waiting_for_third_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_third_grok_response)

    # –®–∞–≥ 7: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ö–û–ù–ï–ß–ù–û–ì–û —Ä–µ—Å—É—Ä—Å–∞
    dp.callback_query.register(process_final_resource_callback, UserState.waiting_for_final_resource, F.data.startswith("resource_"))
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_final_resource) # –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏

    # –®–∞–≥ 8: –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –°–ü–û–°–û–ë–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø (—Ç–µ–∫—Å—Ç)
    dp.message.register(process_recharge_method, UserState.waiting_for_recharge_method)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_recharge_method) # –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞

    # –®–∞–≥ 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –§–ò–ù–ê–õ–¨–ù–û–ì–û –§–ò–î–ë–ï–ö–ê (üëç/ü§î/üòï)
    # –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É StateFilter("*")
    dp.callback_query.register(process_card_feedback, F.data.startswith("feedback_v2_"), StateFilter("*"))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥/—Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏) ---
    @dp.message(StateFilter("*")) # –õ–æ–≤–∏—Ç –ª—é–±–æ–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í –õ–Æ–ë–û–ú –°–û–°–¢–û–Ø–ù–ò–ò
    async def handle_unknown_message_state(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        logger.warning(f"Unknown message '{message.text}' received from user {message.from_user.id} in state {current_state}")
        # –î–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å–∏—Ç—å
        await message.reply("–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –Ω–µ –æ–∂–∏–¥–∞–ª(–∞) —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å. ü§î –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å /start.")

    @dp.message() # –õ–æ–≤–∏—Ç –ª—é–±–æ–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –°–û–°–¢–û–Ø–ù–ò–Ø
    async def handle_unknown_message_no_state(message: types.Message):
        logger.warning(f"Unknown message '{message.text}' received from user {message.from_user.id} with no state.")
        await message.reply("–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª(–∞) —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. ü§î –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /start, /name, /remind, /share, /feedback, /user_profile.")

    @dp.callback_query(StateFilter("*")) # –õ–æ–≤–∏—Ç –ª—é–±–æ–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫ –í –õ–Æ–ë–û–ú –°–û–°–¢–û–Ø–ù–ò–ò
    async def handle_unknown_callback_state(callback: types.CallbackQuery, state: FSMContext):
         current_state = await state.get_state()
         logger.warning(f"Unknown callback '{callback.data}' received from user {callback.from_user.id} in state {current_state}")
         await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)

    @dp.callback_query() # –õ–æ–≤–∏—Ç –ª—é–±–æ–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫ –ë–ï–ó –°–û–°–¢–û–Ø–ù–ò–Ø
    async def handle_unknown_callback_no_state(callback: types.CallbackQuery):
         logger.warning(f"Unknown callback '{callback.data}' received from user {callback.from_user.id} with no state.")
         await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)


    logger.info("Handlers registered successfully.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logger.info("Starting bot...")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞
    commands = [
        types.BotCommand(command="start", description="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        types.BotCommand(command="name", description="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"),
        types.BotCommand(command="remind", description="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–∫–ª/–∏–∑–º)"),
        types.BotCommand(command="remind_off", description="üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        types.BotCommand(command="share", description="üéÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º"),
        types.BotCommand(command="feedback", description="‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ / –ò–¥–µ—é"),
        types.BotCommand(command="user_profile", description="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers(dp, db, logging_service, user_manager)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ check_reminders –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    reminder_task = asyncio.create_task(notifier.check_reminders())
    logger.info("Reminder check task scheduled.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    logger.info("Starting polling...")
    print("Bot is starting polling...") # –î–ª—è –ª–æ–≥–æ–≤ Amvera
    try:
        # allowed_updates –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –ª–∏—à–Ω–∏–µ –∞–ø–¥–µ–π—Ç—ã
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"Polling failed: {e}", exc_info=True)
        print(f"CRITICAL: Polling failed: {e}")
    finally:
        logger.info("Stopping bot...")
        print("Bot is stopping...")
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        reminder_task.cancel()
        try:
            await reminder_task # –î–∞–µ–º –∑–∞–¥–∞—á–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        except asyncio.CancelledError:
            logger.info("Reminder task cancelled successfully.")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if db and db.conn:
            try:
                db.conn.close()
                logger.info("Database connection closed.")
            except Exception as db_close_err:
                 logger.error(f"Error closing database connection: {db_close_err}")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            await bot.session.close()
            logger.info("Bot session closed.")
        except Exception as session_close_err:
             logger.error(f"Error closing bot session: {session_close_err}")
        print("Bot stopped.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually (KeyboardInterrupt/SystemExit).")
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        logger.critical(f"Critical error in main execution scope: {e}", exc_info=True)
        print(f"CRITICAL error in main execution scope: {e}")
