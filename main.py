import random
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
from datetime import datetime, timedelta
import pytz
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import requests

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logging.debug("Starting script...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8054930534:AAFDdyp5_xiX0ZPQnSEZKpfOhk2PCdchKvg"
CHANNEL_ID = "@TopPsyGame"
BOT_LINK = "t.me/choose_a_card_bot"
TIMEZONE = pytz.timezone("Europe/Moscow")
ADMIN_ID = 6682555021  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROK_API_KEY = "xai-F86KOKXr4PzZitmUfevOpUQdP4TLndRlLJjLnxFsJZ33SoWDm7rXJVn91rfluMrc0glE56OmDchEVqSW"
GROK_API_URL = "https://api.xai.com/v1/grok"  # –£—Ç–æ—á–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ xAI
GROK_USERS = [6682555021, 392141189]  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç Grok

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

logging.debug("Bot and Dispatcher initialized.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_reminder_time = State()
    waiting_for_request_confirmation = State()
    waiting_for_feedback = State()
    waiting_for_request_text = State()
    waiting_for_yes_response = State()
    waiting_for_no_response = State()

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = "/data"
LAST_REQUEST_FILE = f"{DATA_DIR}/last_request.json"
USER_NAMES_FILE = f"{DATA_DIR}/user_names.json"
REFERRALS_FILE = f"{DATA_DIR}/referrals.json"
BONUS_AVAILABLE_FILE = f"{DATA_DIR}/bonus_available.json"
REMINDER_TIMES_FILE = f"{DATA_DIR}/reminder_times.json"
STATS_FILE = f"{DATA_DIR}/card_feedback.json"
FEEDBACK_FILE = f"{DATA_DIR}/feedback.json"
USER_ACTIONS_FILE = f"{DATA_DIR}/user_actions.json"
USER_REQUESTS_FILE = f"{DATA_DIR}/user_requests.json"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

logging.debug("File paths defined, directory created if needed.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
def load_json(file_path, default):
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return {int(k) if k.isdigit() else k: v for k, v in data.items()}
            return data
    return default

def save_json(file_path, data):
    with open(file_path, "w") as f:
        json.dump(data, f, indent=2)
    logging.info(f"Saved file {file_path}: {os.listdir(DATA_DIR)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
def load_user_actions():
    return load_json(USER_ACTIONS_FILE, [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
async def save_user_action(user_id, action, details=None):
    user_actions = load_user_actions()
    chat = await bot.get_chat(user_id)
    username = chat.username if chat.username else ""
    name = USER_NAMES.get(user_id, "")
    timestamp = datetime.now(TIMEZONE).isoformat()
    log_entry = {
        "user_id": user_id,
        "username": username,
        "name": name,
        "action": action,
        "details": details or {},
        "timestamp": timestamp
    }
    user_actions.append(log_entry)
    save_json(USER_ACTIONS_FILE, user_actions)
    logging.info(f"Logged action for user {user_id}: {action}, details: {details}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
def get_logs_for_today():
    user_actions = load_user_actions()
    today = datetime.now(TIMEZONE).date()
    logs_today = [log for log in user_actions if datetime.fromisoformat(log["timestamp"]).astimezone(TIMEZONE).date() == today]
    logs_today.sort(key=lambda x: x["timestamp"])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
    return logs_today

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_last_action(user_id):
    user_actions = load_user_actions()
    user_actions = [action for action in user_actions if action["user_id"] == user_id]
    if not user_actions:
        return None
    user_actions.sort(key=lambda x: x["timestamp"], reverse=True)
    return user_actions[0]

logging.debug("JSON functions defined.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
LAST_REQUEST = load_json(LAST_REQUEST_FILE, {})
USER_NAMES = load_json(USER_NAMES_FILE, {})
REFERRALS = load_json(REFERRALS_FILE, {})
BONUS_AVAILABLE = load_json(BONUS_AVAILABLE_FILE, {})
REMINDER_TIMES = load_json(REMINDER_TIMES_FILE, {})
FEEDBACK = load_json(FEEDBACK_FILE, {})
USER_ACTIONS = load_user_actions()
USER_REQUESTS = load_json(USER_REQUESTS_FILE, {})

for user_id, timestamp in LAST_REQUEST.items():
    LAST_REQUEST[user_id] = datetime.fromisoformat(timestamp.replace("Z", "+00:00")).astimezone(TIMEZONE)

logging.debug("Data initialized.")

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
REFLECTION_QUESTIONS = [
    "–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –¥–∞—ë—Ç –º–Ω–µ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?",
    "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –≤ —Å–ª–æ–∂–∏–≤—à–µ–π—Å—è —Å–∏—Ç—É–∞—Ü–∏–∏?",
    # ... (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞)
    "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞?"
]
UNIVERSE_ADVICE = [
    "<b>üíå –¢—ã ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–ª—ã.</b> –í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —É–∂–µ –≤–Ω—É—Ç—Ä–∏. –ü—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ –∏ —Å–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥.",
    # ... (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å–æ–≤–µ—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞)
    "<b>üíå –†–µ—Å—É—Ä—Å—ã –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –æ–Ω–∏ –ø–µ—Ä–µ—Ç–µ–∫–∞—é—Ç.</b> –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –ø–æ—Ç–æ–∫—É –∂–∏–∑–Ω–∏ –∏ –¥–æ–≤–µ—Ä—å—Å—è –µ—ë —Ä–∏—Ç–º—É„ÄÇ"
]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    return load_json(STATS_FILE, {"users": {}, "total": {"yes": 0, "no": 0}})

def save_stats(stats):
    save_json(STATS_FILE, stats)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu(user_id):
    keyboard = [
        [KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")]
    ]
    if BONUS_AVAILABLE.get(user_id, False):
        keyboard.append([KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            name = USER_NAMES.get(user_id, "")
            try:
                user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
                if user_status.status not in ["member", "administrator", "creator"]:
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!" if name else "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!"
                    await event.answer(text, disable_web_page_preview=True, protect_content=True)
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                await event.answer("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", protect_content=True)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
BROADCAST = {
    "datetime": datetime(2025, 4, 6, 2, 8, tzinfo=TIMEZONE),
    "text": "–ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ:  \n‚ú® \"–ö–∞—Ä—Ç–∞ –¥–Ω—è\" —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ —Å 00:00 –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥—ë—Ç –ø–æ –¥–∞—Ç–µ, –∞ –Ω–µ –ø–æ 24 —á–∞—Å–∞–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.  \n‚öôÔ∏è –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /name, /remind, /share, /feedback.  \n–û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—ë –Ω–æ–≤–æ–µ!",
    "recipients": [6682555021] # "recipients": [6682555021]  # –°–ø–∏—Å–æ–∫ ID, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ —á–∏—Å–ª–∞ –∏–ª–∏ "recipients": "all"
}
BROADCAST_SENT = False

async def check_broadcast():
    global BROADCAST_SENT
    while True:
        now = datetime.now(TIMEZONE)
        if not BROADCAST_SENT and now >= BROADCAST["datetime"]:
            recipients = USER_NAMES.keys() if BROADCAST["recipients"] == "all" else BROADCAST["recipients"]
            for user_id in recipients:
                name = USER_NAMES.get(user_id, "")
                text = f"{name}, {BROADCAST['text']}" if name else BROADCAST["text"]
                try:
                    await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
                except Exception as e:
                    logging.error(f"Failed to send broadcast to {user_id}: {e}")
            BROADCAST_SENT = True
        await asyncio.sleep(60)

async def check_reminders():
    while True:
        now = datetime.now(TIMEZONE)
        current_time = now.strftime("%H:%M")
        today = now.date()
        for user_id, reminder_time in list(REMINDER_TIMES.items()):
            reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
            last_request_time = LAST_REQUEST.get(user_id)
            card_available = not last_request_time or last_request_time.date() < today
            if current_time == reminder_time_normalized and card_available:
                name = USER_NAMES.get(user_id, "")
                text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú® –û–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è!" if name else "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú® –û–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è!"
                try:
                    await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
                except Exception as e:
                    logging.error(f"Failed to send reminder to {user_id}: {e}")
        await asyncio.sleep(60)

async def suggest_reminder(user_id, state: FSMContext):
    name = USER_NAMES.get(user_id, "")
    if user_id not in REMINDER_TIMES:
        text = f"{name}, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è! –ò—Å–ø–æ–ª—å–∑—É–π /remind, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è." if name else "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è! –ò—Å–ø–æ–ª—å–∑—É–π /remind, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è."
        try:
            await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
        except Exception as e:
            logging.error(f"Failed to suggest reminder to {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Grok API
async def get_grok_question(user_request, user_response, feedback_type):
    headers = {
        "Authorization": f"Bearer {GROK_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = (
        f"–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (–ú–ê–ö). –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_request}' "
        f"–∏ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞ '{user_response}' –ø–æ—Å–ª–µ —Ä–µ–∞–∫—Ü–∏–∏ '{feedback_type}' –Ω–∞ –∫–∞—Ä—Ç—É, –∑–∞–¥–∞–π –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. "
        f"–ù–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∫–∞—Ä—Ç—É, —Ç–æ–ª—å–∫–æ –ø–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª—É–±–∂–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."
    )
    payload = {
        "prompt": prompt,
        "max_tokens": 50  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    }
    try:
        response = requests.post(GROK_API_URL, headers=headers, json=payload)
        if response.status_code == 200:
            return response.json()["response"]
        else:
            logging.error(f"Grok API error: {response.status_code}, {response.text}")
            return "–ß—Ç–æ –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö —Å –∫–∞—Ä—Ç–æ–π?"
    except Exception as e:
        logging.error(f"Failed to call Grok API: {e}")
        return "–ß—Ç–æ –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö —Å –∫–∞—Ä—Ç–æ–π?"

# –ö–æ–º–∞–Ω–¥–∞ /start (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    
    await save_user_action(user_id, "start", {"args": args})

    if args.startswith("ref_"):
        try:
            referrer_id = int(args[4:])
            if referrer_id != user_id and referrer_id not in REFERRALS.get(user_id, []):
                REFERRALS.setdefault(referrer_id, []).append(user_id)
                save_json(REFERRALS_FILE, REFERRALS)
                if not BONUS_AVAILABLE.get(referrer_id, False):
                    BONUS_AVAILABLE[referrer_id] = True
                    save_json(BONUS_AVAILABLE_FILE, BONUS_AVAILABLE)
                    referrer_name = USER_NAMES.get(referrer_id, "")
                    text = f"{referrer_name}, —É—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'." if referrer_name else "–£—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'."
                    await bot.send_message(referrer_id, text, reply_markup=get_main_menu(referrer_id), protect_content=True)
        except ValueError as e:
            logging.error(f"Invalid referrer ID in args: '{args}', error: {e}")

    if user_id not in USER_NAMES:
        text = "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏ - –Ω–∞–∂–º–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
        skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]])
        await message.answer(text, reply_markup=skip_keyboard, protect_content=True)
        await state.set_state(UserState.waiting_for_name)
    else:
        await message.answer(
            f"{USER_NAMES[user_id]}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é." if USER_NAMES[user_id] else "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu(user_id),
            protect_content=True
        )

# –ö–æ–º–∞–Ω–¥–∞ /share (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("share"))
async def share_command(message: types.Message):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    ref_link = f"{BOT_LINK}?start=ref_{user_id}"
    text = f"{name}, —ç—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!" if name else f"–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=False)

# –ö–æ–º–∞–Ω–¥–∞ /remind (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("remind"))
async def remind_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    current_reminder = REMINDER_TIMES.get(user_id, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    text = f"{name}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)." if name else f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)."
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.set_state(UserState.waiting_for_reminder_time)

# –ö–æ–º–∞–Ω–¥–∞ /name (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("name"))
async def name_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    text = f"{name}, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ –º–µ–Ω—è—Ç—å." if name else "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å."
    skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]])
    await message.answer(text, reply_markup=skip_keyboard, protect_content=True)
    await state.set_state(UserState.waiting_for_name)

# –ö–æ–º–∞–Ω–¥–∞ /feedback (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("feedback"))
async def feedback_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    text = f"{name}, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞. –Ø —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –º—ã—Å–ª–∏!" if name else "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞. –Ø —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –º—ã—Å–ª–∏!"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.set_state(UserState.waiting_for_feedback)

# –ö–æ–º–∞–Ω–¥–∞ /logs (–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è)
@dp.message(Command("logs"))
async def logs_command(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", protect_content=True)
        return

    logs = get_logs_for_today()
    if not logs:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.", protect_content=True)
        return

    response = "*–î–µ–π—Å—Ç–≤–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
    for log in logs:
        timestamp = log["timestamp"]
        user_id_log = str(log["user_id"])
        name = USER_NAMES.get(user_id_log, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        action_type = log["action"]
        details = log["details"]
        details_str = " ".join(f"{k}: {v}" for k, v in details.items()) if details else "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π"

        response += (
            f"‚è∞ {timestamp}\n"
            f"üë§ *ID*: `{user_id_log}` ({name})\n"
            f"   –î–µ–π—Å—Ç–≤–∏–µ: {action_type}\n"
            f"   –î–µ—Ç–∞–ª–∏: {details_str}\n\n"
        )

    MAX_MESSAGE_LENGTH = 4096
    if len(response) <= MAX_MESSAGE_LENGTH:
        await message.answer(response, parse_mode="Markdown", protect_content=True)
    else:
        parts = [response[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
        for part in parts:
            await message.answer(part, parse_mode="Markdown", protect_content=True)
            await asyncio.sleep(0.5)

# –ö–æ–º–∞–Ω–¥–∞ /users (–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è)
@dp.message(Command("users"))
async def users_command(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", protect_content=True)
        return

    if not USER_NAMES:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", protect_content=True)
        return

    response = "*–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for user_id_key, name in USER_NAMES.items():
        username = CARD_FEEDBACK.get(user_id_key, {}).get("username", "")
        last_request = LAST_REQUEST.get(user_id_key, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        if isinstance(last_request, datetime):
            last_request = last_request.isoformat()
        cards = CARD_FEEDBACK.get(user_id_key, {}).get("responses", [])
        card_count = len(cards)
        yes_count = len([r for r in cards if r["answer"] == "yes"])
        yes_percent = (yes_count / card_count * 100) if card_count > 0 else 0
        bonus = "‚úÖ" if BONUS_AVAILABLE.get(user_id_key, False) else "‚ùå"
        reminder = REMINDER_TIMES.get(user_id_key, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        ref_count = len(REFERRALS.get(user_id_key, []))

        response += (
            f"üë§ *ID*: `{user_id_key}`\n"
            f"   –ò–º—è: {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (@{username or '–ù–µ—Ç'})\n"
            f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last_request}\n"
            f"   –ö–∞—Ä—Ç—ã: {card_count} (–î–∞: {yes_percent:.1f}%)\n"
            f"   –ë–æ–Ω—É—Å: {bonus}\n"
            f"   –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder}\n"
            f"   –†–µ—Ñ–µ—Ä–∞–ª—ã: {ref_count}\n\n"
        )

    MAX_MESSAGE_LENGTH = 4096
    if len(response) <= MAX_MESSAGE_LENGTH:
        await message.answer(response, parse_mode="Markdown", protect_content=True)
    else:
        parts = [response[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(response), MAX_MESSAGE_LENGTH)]
        for part in parts:
            await message.answer(part, parse_mode="Markdown", protect_content=True)
            await asyncio.sleep(0.5)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(UserState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    USER_NAMES[user_id] = name
    save_json(USER_NAMES_FILE, USER_NAMES)
    
    await save_user_action(user_id, "set_name", {"name": name})

    await message.answer(
        f"{name}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user_id),
        protect_content=True
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –∏–º–µ–Ω–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.callback_query(lambda c: c.data == "skip_name")
async def process_skip_name(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    USER_NAMES[user_id] = ""
    save_json(USER_NAMES_FILE, USER_NAMES)
    
    await save_user_action(user_id, "skip_name")

    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, –±–µ–∑ –∏–º–µ–Ω–∏ —Ç–æ–∂–µ –∑–¥–æ—Ä–æ–≤–æ! –í—ã–±–µ—Ä–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é!",
        reply_markup=get_main_menu(user_id),
        protect_content=True
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(UserState.waiting_for_reminder_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    reminder_time = message.text.strip()
    try:
        reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
        REMINDER_TIMES[user_id] = reminder_time_normalized
        save_json(REMINDER_TIMES_FILE, REMINDER_TIMES)
        
        await save_user_action(user_id, "set_reminder_time", {"reminder_time": reminder_time_normalized})

        text = f"{name}, —Å—É–ø–µ—Ä! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {reminder_time_normalized} –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)." if name else f"–°—É–ø–µ—Ä! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {reminder_time_normalized} –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()
    except ValueError:
        text = f"{name}, –∫–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)." if name else "–ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(UserState.waiting_for_feedback)
async def process_feedback_submission(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    feedback_text = message.text.strip()
    FEEDBACK[user_id] = {"name": name, "feedback": feedback_text, "timestamp": datetime.now(TIMEZONE).isoformat()}
    save_json(FEEDBACK_FILE, FEEDBACK)
    
    await save_user_action(user_id, "submit_feedback", {"feedback": feedback_text})

    text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –µ–≥–æ." if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –µ–≥–æ."
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(lambda message: message.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")
async def handle_card_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    now = datetime.now(TIMEZONE)
    today = now.date()

    last_request_time = LAST_REQUEST.get(user_id)
    if user_id != 6682555021 and last_request_time and last_request_time.date() == today:
        text = f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)." if name else "–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        return

    text = f"{name}, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üåø –ü–æ–¥—É–º–∞–π: –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∫–∞—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å?')? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞!" if name else "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üåø –ü–æ–¥—É–º–∞–π: –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∫–∞—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å?')? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞!"
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–∞!", callback_data="confirm_request")]])
    await message.answer(text, reply_markup=confirmation_keyboard, protect_content=True)
    await state.set_state(UserState.waiting_for_request_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è "–ö–∞—Ä—Ç–∞ –¥–Ω—è" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.callback_query(lambda c: c.data == "confirm_request")
async def process_request_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    if name:
        text = f"{name}, —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –µ—â—ë –≥–ª—É–±–∂–µ? üåø –ï—Å–ª–∏ –∂–µ–ª–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ —Ç–æ—á–Ω–µ–µ. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—É–º–∞–π –æ –Ω—ë–º ‚Äî –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∏ –Ω–∞–∂–º–∏ '–î–∞–ª—å—à–µ'"
    else:
        text = "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –µ—â—ë –≥–ª—É–±–∂–µ? üåø –ï—Å–ª–∏ –∂–µ–ª–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ —Ç–æ—á–Ω–µ–µ. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—É–º–∞–π –æ –Ω—ë–º ‚Äî –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∏ –Ω–∞–∂–º–∏ '–î–∞–ª—å—à–µ'"
    skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="skip_request")]])
    await callback.message.answer(text, reply_markup=skip_keyboard, protect_content=True)
    await state.set_state(UserState.waiting_for_request_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.callback_query(lambda c: c.data == "skip_request")
async def process_skip_request(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    now = datetime.now(TIMEZONE)

    try:
        card_numbers = list(range(1, 41))
        random.shuffle(card_numbers)
        card_number = card_numbers[0]
        card_path = f"cards/card_{card_number}.jpg"
        logging.debug(f"Attempting to load card: {card_path}")

        if not os.path.exists(card_path):
            logging.error(f"Card file not found: {card_path}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(user_id))
            return

        photo = FSInputFile(card_path)
        await bot.send_photo(user_id, photo, reply_markup=get_main_menu(user_id), protect_content=True)
        LAST_REQUEST[user_id] = now
        save_json(LAST_REQUEST_FILE, {k: v.isoformat() for k, v in LAST_REQUEST.items()})

        reflection_question = random.choice(REFLECTION_QUESTIONS)
        await callback.message.answer(reflection_question, protect_content=True)

        feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞ üôÇ", callback_data=f"feedback_yes_{card_number}"), InlineKeyboardButton(text="–ù–µ—Ç üôÅ", callback_data=f"feedback_no_{card_number}")]
        ])
        text = f"{name}, —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?" if name else "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?"
        await callback.message.answer(text, reply_markup=feedback_keyboard, protect_content=True)

        await save_user_action(user_id, "card_request", {"card_number": card_number, "reflection_question": reflection_question})

        await state.update_data(card_number=card_number, user_request="")
        
        await suggest_reminder(user_id, state)
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã: {e}")
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(UserState.waiting_for_request_text)
async def process_request_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    request_text = message.text.strip()
    now = datetime.now(TIMEZONE)

    USER_REQUESTS[user_id] = {"request": request_text, "timestamp": now.isoformat()}
    save_json(USER_REQUESTS_FILE, USER_REQUESTS)
    await save_user_action(user_id, "set_request", {"request": request_text})

    try:
        card_numbers = list(range(1, 41))
        random.shuffle(card_numbers)
        card_number = card_numbers[0]
        card_path = f"cards/card_{card_number}.jpg"
        logging.debug(f"Attempting to load card: {card_path}")

        if not os.path.exists(card_path):
            logging.error(f"Card file not found: {card_path}")
            await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(user_id))
            return

        photo = FSInputFile(card_path)
        await bot.send_photo(user_id, photo, reply_markup=get_main_menu(user_id), protect_content=True)
        LAST_REQUEST[user_id] = now
        save_json(LAST_REQUEST_FILE, {k: v.isoformat() for k, v in LAST_REQUEST.items()})

        reflection_question = random.choice(REFLECTION_QUESTIONS)
        await message.answer(reflection_question, protect_content=True)

        feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞ üôÇ", callback_data=f"feedback_yes_{card_number}"), InlineKeyboardButton(text="–ù–µ—Ç üôÅ", callback_data=f"feedback_no_{card_number}")]
        ])
        text = f"{name}, —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?" if name else "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?"
        await message.answer(text, reply_markup=feedback_keyboard, protect_content=True)

        await save_user_action(user_id, "card_request", {"card_number": card_number, "reflection_question": reflection_question})

        await state.update_data(card_number=card_number, user_request=request_text)

        await suggest_reminder(user_id, state)
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–æ–≤–µ—Ç –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(lambda message: message.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")
async def handle_bonus_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    if not BONUS_AVAILABLE.get(user_id, False):
        text = f"{name}, —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!" if name else "–≠—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!"
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        return

    advice = random.choice(UNIVERSE_ADVICE)
    text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}" if name else f"–í–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

    await save_user_action(user_id, "bonus_request", {"advice": advice})

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∫–∞—Ä—Ç–∞–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.callback_query(lambda c: c.data.startswith("feedback_"))
async def process_feedback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or ""
    name = USER_NAMES.get(user_id, "")
    feedback, card_number = callback.data.split("_")[1], callback.data.split("_")[2]
    stats = load_stats()

    user_key = str(user_id)
    if user_key not in stats["users"]:
        stats["users"][user_key] = {"name": name, "username": username, "responses": []}
    stats["users"][user_key]["responses"].append({"card": card_number, "answer": feedback})
    stats["total"][feedback] += 1
    save_stats(stats)

    await save_user_action(user_id, "card_feedback", {"card_number": card_number, "feedback": feedback})

    await state.update_data(card_number=card_number)

    if feedback == "yes":
        text = f"{name}, –∫–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å? –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏!" if name else "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å? –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏!"
        await callback.message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        await state.set_state(UserState.waiting_for_yes_response)
    elif feedback == "no":
        text = f"{name}, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –≤ —ç—Ç–æ–º –æ–±—Ä–∞–∑–µ?" if name else "–ß—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –≤ —ç—Ç–æ–º –æ–±—Ä–∞–∑–µ?"
        await callback.message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        await state.set_state(UserState.waiting_for_no_response)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ "–î–∞"
@dp.message(UserState.waiting_for_yes_response)
async def process_yes_response(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    response_text = message.text.strip()
    
    data = await state.get_data()
    card_number = data.get("card_number")
    user_request = data.get("user_request", "")

    await save_user_action(user_id, "yes_response", {
        "card_number": card_number,
        "request": user_request,
        "response": response_text
    })

    text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!" if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç Grok API –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in GROK_USERS:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ "all" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∑–∂–µ
        grok_question = await get_grok_question(user_request or "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–∞", response_text, "–î–∞")
        await message.answer(grok_question, reply_markup=get_main_menu(user_id), protect_content=True)

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ "–ù–µ—Ç"
@dp.message(UserState.waiting_for_no_response)
async def process_no_response(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    response_text = message.text.strip()
    
    data = await state.get_data()
    card_number = data.get("card_number")
    user_request = data.get("user_request", "")

    await save_user_action(user_id, "no_response", {
        "card_number": card_number,
        "request": user_request,
        "response": response_text
    })

    text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!" if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç Grok API –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in GROK_USERS:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ "all" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∑–∂–µ
        grok_question = await get_grok_question(user_request or "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–∞", response_text, "–ù–µ—Ç")
        await message.answer(grok_question, reply_markup=get_main_menu(user_id), protect_content=True)

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("Bot starting...")
    asyncio.create_task(check_reminders())
    asyncio.create_task(check_broadcast())
    while True:
        try:
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            logging.error(f"Polling failed: {e}, restarting in 10 seconds...")
            await asyncio.sleep(10)
        else:
            break

if __name__ == "__main__":
    try:
        logging.debug("Starting main...")
        asyncio.run(main())
    except Exception as e:
        logging.error(f"Failed to start bot: {e}")
        raise
