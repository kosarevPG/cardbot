import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN, CHANNEL_ID, ADMIN_ID, UNIVERSE_ADVICE, BOT_LINK, TIMEZONE, NO_LOGS_USERS
from database.db import Database
from modules.logging_service import LoggingService
from modules.notification_service import NotificationService
from modules.card_of_the_day import (
    handle_card_request, draw_card, process_request_text, process_initial_response,
    process_first_grok_response, process_second_grok_response, process_third_grok_response,
    process_card_feedback, get_main_menu, process_initial_resource, process_scenario_choice,
    process_continue_choice, process_final_resource, process_final_resource_response,
    process_recovery_method
)
from modules.user_management import UserState, UserManager
from modules.ai_service import build_user_profile
import random
from datetime import datetime, timedelta
import os
import json
import logging

logging.basicConfig(level=logging.INFO)
logger_root = logging.getLogger()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db_path = "/data/bot.db"
print(f"Checking if database file exists at {db_path}: {os.path.exists(db_path)}")
db = Database(path=db_path)
print(f"Database initialized at {db.conn}")
logger = LoggingService(db)
notifier = NotificationService(bot, db)
user_manager = UserManager(db)

try:
    db.get_user(0)
    print("Database check successful")
except Exception as e:
    logger.log_action(0, "db_init_error", {"error": str(e)})
    print(f"Database initialization failed: {e}")
    raise

class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            if user_id == ADMIN_ID:
                return await handler(event, data)
            try:
                user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
                if user_status.status not in ["member", "administrator", "creator"]:
                    name = db.get_user(user_id)["name"]
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!" if name else "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!"
                    await event.answer(text, disable_web_page_preview=True)
                    return
            except Exception as e:
                logger_root.error(f"Subscription check failed for user {user_id}: {e}")
                await event.answer("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

class SurveyState(StatesGroup):
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()

async def send_survey(message: types.Message, state: FSMContext, db, logger):
    user_id = message.from_user.id
    allowed_users = [6682555021]
    logger_root.info(f"Processing /survey for user {user_id}")
    if user_id not in allowed_users:
        await message.answer("–≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return
    name = db.get_user(user_id)["name"]
    intro_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üåü –¢—ã —É–∂–µ —É—Å–ø–µ–ª–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ ‚Äî –∫–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? "
        "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ù–∞—á–Ω—ë–º!"
        if name else
        "–ü—Ä–∏–≤–µ—Ç! üåü –¢—ã —É–∂–µ —É—Å–ø–µ–ª–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ ‚Äî –∫–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? "
        "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ù–∞—á–Ω—ë–º!"
    )
    question_1_text = "1. –ü—Ä–æ–±–æ–≤–∞–ª–∞ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–æ–π (–ú–µ–Ω—é -> 'üéÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è')?"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–∞", callback_data="survey_1_yes")],
        [types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="survey_1_no")]
    ])
    await message.answer(intro_text)
    await message.answer(question_1_text, reply_markup=keyboard)
    await state.set_state(SurveyState.question_1)

async def process_survey_response(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    current_state = await state.get_state()

    questions = {
        SurveyState.question_1: {
            "text": "2. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π?",
            "next_state": SurveyState.question_2,
            "options": []
        },
        SurveyState.question_2: {
            "text": "3. –ë—ã–ª–∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≤ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ—É–¥–æ–±–Ω—ã–º?",
            "next_state": SurveyState.question_3,
            "options": []
        },
        SurveyState.question_3: {
            "text": "4. –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –≥–æ—Ç–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–∞–º? –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é?",
            "next_state": SurveyState.question_4,
            "options": []
        },
        SurveyState.question_4: {
            "text": "5. –ö–∞–∫–∏–µ —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –±—ã —Ö–æ—Ç–µ–ª–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ –≤ –±—É–¥—É—â–µ–º?",
            "next_state": SurveyState.question_5,
            "options": []
        }
    }

    if current_state in questions:
        await logger.log_action(user_id, "survey_response", {"question": current_state, "response": data})
        next_question = questions[current_state]
        if next_question["options"]:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=opt, callback_data=f"survey_{current_state[-1]}_{opt.lower()}")]
                for opt in next_question["options"]
            ])
        else:
            await callback.message.answer(next_question["text"])
            await state.set_state(next_question["next_state"])
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()
    elif current_state == SurveyState.question_5:
        await logger.log_action(user_id, "survey_response", {"question": current_state, "response": data})
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã! –û–Ω–∏ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ. üòä")
        await state.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username
    db.update_user(user_id, {"name": name, "username": username})
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç. üåü "
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –∏ –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ –Ω–µ–π. "
        "–≠—Ç–æ –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–µ–±–µ ‚Äî —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, —á—É–≤—Å—Ç–≤–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã. "
        "–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /card!"
    )
    await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    await state.clear()
    await logger.log_action(user_id, "start_command", {})

async def set_name_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.")
    await state.set_state(UserState.waiting_for_name)
    await logger.log_action(user_id, "set_name_command", {})

async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    if name:
        await user_manager.set_name(user_id, name)
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ —Ç–∞–∫.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await logger.log_action(user_id, "name_set", {"name": name})
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.")
        await logger.log_action(user_id, "name_set_failed", {"reason": "empty_name"})

async def set_reminder_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = db.get_user(user_id)["name"]
    text = f"{name}, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è? –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –ú–æ—Å–∫–≤–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)." if name else "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è? –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –ú–æ—Å–∫–≤–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)."
    await message.answer(text)
    await state.set_state(UserState.waiting_for_reminder_time)
    await logger.log_action(user_id, "set_reminder_command", {})

async def process_reminder_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    time_str = message.text.strip()
    name = db.get_user(user_id)["name"]
    try:
        datetime.strptime(time_str, "%H:%M")
        await user_manager.set_reminder(user_id, time_str)
        text = f"{name}, —è –∑–∞–ø–æ–º–Ω–∏–ª! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {time_str} –ø–æ –ú–æ—Å–∫–≤–µ. üòä" if name else f"–Ø –∑–∞–ø–æ–º–Ω–∏–ª! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {time_str} –ø–æ –ú–æ—Å–∫–≤–µ. üòä"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await logger.log_action(user_id, "reminder_set", {"time": time_str})
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00.")
        await logger.log_action(user_id, "reminder_set_failed", {"reason": "invalid_format", "input": time_str})

async def cancel_reminder_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = db.get_user(user_id)["name"]
    await user_manager.set_reminder(user_id, None)
    text = f"{name}, —è –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /reminder." if name else "–Ø –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /reminder."
    await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    await state.clear()
    await logger.log_action(user_id, "cancel_reminder", {})

async def feedback_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = db.get_user(user_id)["name"]
    text = f"{name}, –ø–æ–¥–µ–ª–∏—Å—å, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π? –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?" if name else "–ü–æ–¥–µ–ª–∏—Å—å, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π? –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
    await message.answer(text)
    await state.set_state(UserState.waiting_for_feedback)
    await logger.log_action(user_id, "feedback_command", {})

async def process_feedback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    feedback_text = message.text.strip()
    name = db.get_user(user_id)["name"]
    if feedback_text:
        with db.conn:
            db.conn.execute(
                "INSERT INTO feedback (user_id, name, feedback, timestamp) VALUES (?, ?, ?, ?)",
                (user_id, name, feedback_text, datetime.now(TIMEZONE).isoformat())
            )
        text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. üòä" if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. üòä"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await logger.log_action(user_id, "feedback_submitted", {"feedback": feedback_text[:50] + "..." if len(feedback_text) > 50 else feedback_text})
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤.")
        await logger.log_action(user_id, "feedback_failed", {"reason": "empty_feedback"})

async def universe_advice_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    name = user_data["name"]
    if not user_data.get("bonus_available", False):
        text = f"{name}, —ç—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏, –∏ —è –æ—Ç–∫—Ä–æ—é –µ—ë –¥–ª—è —Ç–µ–±—è!" if name else "–≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏, –∏ —è –æ—Ç–∫—Ä–æ—é –µ—ë –¥–ª—è —Ç–µ–±—è!"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        return
    advice = random.choice(UNIVERSE_ADVICE)
    text = f"{name}, –≤–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π: {advice}" if name else f"–í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π: {advice}"
    await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    await user_manager.set_bonus_available(user_id, False)
    await logger.log_action(user_id, "universe_advice", {"advice": advice})
    await state.clear()

async def share_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = db.get_user(user_id)["name"]
    text = (
        f"{name}, –ø—Ä–∏–≥–ª–∞—à–∞–π –ø–æ–¥—Ä—É–≥ –∫ –Ω–∞–º! üòä –í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {BOT_LINK}?start={user_id}\n"
        "–ü–æ–¥–µ–ª–∏—Å—å –µ—é, –∏ —è –æ—Ç–∫—Ä–æ—é —Ç–µ–±–µ –±–æ–Ω—É—Å ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π!"
        if name else
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ–¥—Ä—É–≥ –∫ –Ω–∞–º! üòä –í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {BOT_LINK}?start={user_id}\n"
        "–ü–æ–¥–µ–ª–∏—Å—å –µ—é, –∏ —è –æ—Ç–∫—Ä–æ—é —Ç–µ–±–µ –±–æ–Ω—É—Å ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π!"
    )
    await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    await logger.log_action(user_id, "share_command", {"referral_link": f"{BOT_LINK}?start={user_id}"})
    await state.clear()

async def process_referral(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.get_args()
    if args and args.isdigit():
        referrer_id = int(args)
        if referrer_id != user_id:
            db.add_referral(referrer_id, user_id)
            await user_manager.set_bonus_available(referrer_id, True)
            referrer_name = db.get_user(referrer_id)["name"]
            await bot.send_message(
                referrer_id,
                f"{referrer_name}, —Ç–≤–æ—è –ø–æ–¥—Ä—É–≥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å! üòä –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π ‚Äî –≤—ã–±–µ—Ä–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π' –≤ –º–µ–Ω—é."
                if referrer_name else
                "–¢–≤–æ—è –ø–æ–¥—Ä—É–≥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å! üòä –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π ‚Äî –≤—ã–±–µ—Ä–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π' –≤ –º–µ–Ω—é."
            )
            await logger.log_action(user_id, "referral_added", {"referrer_id": referrer_id})
    await start_command(message, state)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message.register(start_command, Command(commands=["start"]), StateFilter(None))
dp.message.register(process_referral, Command(commands=["start"]), lambda message: bool(message.get_args()))
dp.message.register(set_name_command, Command(commands=["name"]), StateFilter(None))
dp.message.register(process_name, StateFilter(UserState.waiting_for_name))
dp.message.register(set_reminder_command, Command(commands=["reminder"]), StateFilter(None))
dp.message.register(process_reminder_time, StateFilter(UserState.waiting_for_reminder_time))
dp.message.register(cancel_reminder_command, Command(commands=["cancel_reminder"]), StateFilter(None))
dp.message.register(feedback_command, Command(commands=["feedback"]), StateFilter(None))
dp.message.register(process_feedback, StateFilter(UserState.waiting_for_feedback))
dp.message.register(universe_advice_command, Command(commands=["universe"]), StateFilter(None))
dp.message.register(share_command, Command(commands=["share"]), StateFilter(None))
dp.message.register(send_survey, Command(commands=["survey"]), StateFilter(None))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
dp.message.register(handle_card_request, lambda message: message.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", StateFilter(None))
dp.message.register(process_request_text, StateFilter(UserState.waiting_for_request_text))
dp.message.register(process_initial_response, StateFilter(UserState.waiting_for_initial_response))
dp.message.register(process_first_grok_response, StateFilter(UserState.waiting_for_first_grok_response))
dp.message.register(process_second_grok_response, StateFilter(UserState.waiting_for_second_grok_response))
dp.message.register(process_third_grok_response, StateFilter(UserState.waiting_for_third_grok_response))
dp.message.register(process_recovery_method, StateFilter(UserState.waiting_for_recovery_method))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
dp.callback_query.register(process_initial_resource, lambda callback: callback.data.startswith("resource_initial_"))
dp.callback_query.register(process_scenario_choice, lambda callback: callback.data.startswith("scenario_"))
dp.callback_query.register(draw_card, lambda callback: callback.data.startswith("draw_card_"))
dp.callback_query.register(process_continue_choice, lambda callback: callback.data.startswith("scenario_"))
dp.callback_query.register(process_final_resource_response, lambda callback: callback.data.startswith("resource_final_"))
dp.callback_query.register(process_card_feedback, lambda callback: callback.data.startswith("feedback_"))
dp.callback_query.register(process_survey_response, lambda callback: callback.data.startswith("survey_"))

async def on_startup():
    logger_root.info("Bot is starting...")

async def on_shutdown():
    logger_root.info("Bot is shutting down...")
    db.conn.close()
    logger_root.info("Database connection closed.")

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    asyncio.run(dp.start_polling(bot))
