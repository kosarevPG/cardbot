import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN, CHANNEL_ID, ADMIN_ID, UNIVERSE_ADVICE, BOT_LINK, TIMEZONE, NO_LOGS_USERS
from database.db import Database
from modules.logging_service import LoggingService
from modules.notification_service import NotificationService
from modules.card_of_the_day import handle_card_request, draw_card, process_request_text, process_initial_response, process_first_grok_response, process_second_grok_response, process_third_grok_response, process_card_feedback, get_main_menu
from modules.user_management import UserState, UserManager
from modules.ai_service import build_user_profile
import random
from datetime import datetime, timedelta
import os
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger_root = logging.getLogger()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db_path = "/data/bot.db"
print(f"Checking if database file exists at {db_path}: {os.path.exists(db_path)}")
db = Database(path=db_path)
print(f"Database initialized at {db.conn}")
logger = LoggingService(db)
notifier = NotificationService(bot, db)
user_manager = UserManager(db)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db.get_user(0)
    print("Database check successful")
except Exception as e:
    logger.log_action(0, "db_init_error", {"error": str(e)})
    print(f"Database initialization failed: {e}")
    raise

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            if user_id == ADMIN_ID:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
                return await handler(event, data)
            try:
                user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
                if user_status.status not in ["member", "administrator", "creator"]:
                    name = db.get_user(user_id)["name"]
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!" if name else "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!"
                    await event.answer(text, disable_web_page_preview=True)
                    return
            except Exception as e:
                logger_root.error(f"Subscription check failed for user {user_id}: {e}")
                await event.answer("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
async def send_survey(message: types.Message, db, logger):
    user_id = message.from_user.id
    allowed_users = [6682555021, 392141189]
    
    logger_root.info(f"Processing /survey for user {user_id}")
    if user_id not in allowed_users:
        await message.answer("–≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    name = db.get_user(user_id)["name"]
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üåü –¢—ã —É–∂–µ —É—Å–ø–µ–ª–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ ‚Äî –∫–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? –ü–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ:\n"
        "1. –ü—Ä–æ–±–æ–≤–∞–ª–∞ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–æ–π —á–µ—Ä–µ–∑ /share?\n"
        "2. –ü–∏—à–µ—à—å –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –¥–µ—Ä–∂–∏—à—å –≤ –≥–æ–ª–æ–≤–µ?\n"
        "3. –í–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –∫–∞—Ä—Ç—ã ‚Äî —Ç–≤–æ—ë?\n"
        "4. –•–æ—á–µ—à—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤?\n"
        "5. –ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?\n"
        "–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ. –°–ø–∞—Å–∏–±–æ! üíå"
        if name else
        "–ü—Ä–∏–≤–µ—Ç! üåü –¢—ã —É–∂–µ —É—Å–ø–µ–ª–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ ‚Äî –∫–∞–∫ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? –ü–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ:\n"
        "1. –ü—Ä–æ–±–æ–≤–∞–ª–∞ –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–æ–π —á–µ—Ä–µ–∑ /share?\n"
        "2. –ü–∏—à–µ—à—å –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –¥–µ—Ä–∂–∏—à—å –≤ –≥–æ–ª–æ–≤–µ?\n"
        "3. –í–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –∫–∞—Ä—Ç—ã ‚Äî —Ç–≤–æ—ë?\n"
        "4. –•–æ—á–µ—à—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤?\n"
        "5. –ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?\n"
        "–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ. –°–ø–∞—Å–∏–±–æ! üíå"
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="1. –î–∞", callback_data="survey_1_yes"),
         types.InlineKeyboardButton(text="1. –ù–µ—Ç, –Ω–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞", callback_data="survey_1_no_reason"),
         types.InlineKeyboardButton(text="1. –ù–µ –∑–Ω–∞–ª–∞", callback_data="survey_1_no_knowledge")],
        [types.InlineKeyboardButton(text="2. –ü–∏—à—É", callback_data="survey_2_write"),
         types.InlineKeyboardButton(text="2. –í –≥–æ–ª–æ–≤–µ", callback_data="survey_2_head"),
         types.InlineKeyboardButton(text="2. –ù–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è", callback_data="survey_2_private")],
        [types.InlineKeyboardButton(text="3. –ù—Ä–∞–≤—è—Ç—Å—è", callback_data="survey_3_like"),
         types.InlineKeyboardButton(text="3. –•–æ—á—É –≥–ª—É–±–∏–Ω—ã", callback_data="survey_3_depth"),
         types.InlineKeyboardButton(text="3. –ù–µ –º–æ—ë", callback_data="survey_3_not_mine")],
        [types.InlineKeyboardButton(text="4. –î–∞", callback_data="survey_4_yes"),
         types.InlineKeyboardButton(text="4. –ù–µ—Ç", callback_data="survey_4_no"),
         types.InlineKeyboardButton(text="4. –ë–æ—é—Å—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π", callback_data="survey_4_fear")],
        [types.InlineKeyboardButton(text="5. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="survey_5_reminders"),
         types.InlineKeyboardButton(text="5. –ë–æ–ª—å—à–µ –∫–∞—Ä—Ç", callback_data="survey_5_cards"),
         types.InlineKeyboardButton(text="5. –ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä", callback_data="survey_5_depth")]
    ])

    try:
        await message.answer(text, reply_markup=keyboard)
        await logger.log_action(user_id, "survey_initiated")
    except Exception as e:
        logger_root.error(f"Failed to send survey to user {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
async def process_survey_response(callback: types.CallbackQuery, db, logger):
    user_id = callback.from_user.id
    callback_data = callback.data
    question, answer = callback_data.split("_", 1)

    logger_root.info(f"Processing survey response for user {user_id}: {callback_data}")

    answer_map = {
        "survey_1_yes": "–î–∞",
        "survey_1_no_reason": "–ù–µ—Ç, –Ω–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞",
        "survey_1_no_knowledge": "–ù–µ –∑–Ω–∞–ª–∞",
        "survey_2_write": "–ü–∏—à—É",
        "survey_2_head": "–í –≥–æ–ª–æ–≤–µ",
        "survey_2_private": "–ù–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è",
        "survey_3_like": "–ù—Ä–∞–≤—è—Ç—Å—è",
        "survey_3_depth": "–•–æ—á—É –≥–ª—É–±–∏–Ω—ã",
        "survey_3_not_mine": "–ù–µ –º–æ—ë",
        "survey_4_yes": "–î–∞",
        "survey_4_no": "–ù–µ—Ç",
        "survey_4_fear": "–ë–æ—é—Å—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π",
        "survey_5_reminders": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        "survey_5_cards": "–ë–æ–ª—å—à–µ –∫–∞—Ä—Ç",
        "survey_5_depth": "–ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä"
    }

    question_num = question.split("_")[1]
    response = answer_map.get(callback_data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

    try:
        await logger.log_action(user_id, "survey_response", {
            "question": f"–í–æ–ø—Ä–æ—Å {question_num}",
            "answer": response
        })
        await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_num}!")
    except Exception as e:
        logger_root.error(f"Failed to process survey response for user {user_id}: {e}")

# –Ø–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è /survey
async def handle_survey(message: types.Message):
    logger_root.info(f"Handle_survey called for message: {message.text} from user {message.from_user.id}")
    await send_survey(message, db, logger)

# –§–∞–±—Ä–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
def make_start_handler(db, logger, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        username = message.from_user.username or ""
        args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
        
        user_data = db.get_user(user_id)
        if user_data["username"] != username:
            user_data["username"] = username
            db.update_user(user_id, user_data)

        await logger.log_action(user_id, "start", {"args": args})

        if args.startswith("ref_"):
            referrer_id = int(args[4:])
            if referrer_id != user_id and user_id not in db.get_referrals(referrer_id):
                db.add_referral(referrer_id, user_id)
                if not db.get_user(referrer_id)["bonus_available"]:
                    await user_manager.set_bonus_available(referrer_id, True)
                    name = db.get_user(referrer_id)["name"]
                    text = f"{name}, —É—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'." if name else "–£—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'."
                    await bot.send_message(referrer_id, text, reply_markup=await get_main_menu(referrer_id, db))

        if not db.get_user(user_id)["name"]:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
            ]))
            await state.set_state(UserState.waiting_for_name)
        else:
            name = db.get_user(user_id)["name"]
            await message.answer(f"{name}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'." if name else "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
    return wrapped_handler

def make_share_handler(db):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or ""
        user_data = db.get_user(user_id)
        if user_data["username"] != username:
            user_data["username"] = username
            db.update_user(user_id, user_data)

        name = db.get_user(user_id)["name"]
        ref_link = f"{BOT_LINK}?start=ref_{user_id}"
        text = f"{name}, –ø–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!" if name else f"–ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    return wrapped_handler

def make_remind_handler(db, logger, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id)["name"]
        current_reminder = db.get_user(user_id)["reminder_time"] or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        text = f"{name}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (—á—á:–º–º)." if name else f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (—á—á:–º–º)."
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.set_state(UserState.waiting_for_reminder_time)
    return wrapped_handler

def make_users_handler(db):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        users = db.get_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        excluded_users = set(NO_LOGS_USERS)
        filtered_users = [uid for uid in users if uid not in excluded_users]
        if not filtered_users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö.")
            return

        user_list = []
        for uid in filtered_users:
            user_data = db.get_user(uid)
            name = user_data["name"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_data["username"] or "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞"
            
            user_actions = db.get_actions(uid)
            last_action_time = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"
            last_action_timestamp = "1970-01-01T00:00:00+00:00"
            if user_actions:
                last_action = max(user_actions, key=lambda x: x["timestamp"])
                last_action_time = last_action["timestamp"]
                last_action_timestamp = last_action_time

            user_list.append({
                "uid": uid,
                "username": username,
                "name": name,
                "last_action_time": last_action_time,
                "last_action_timestamp": last_action_timestamp
            })

        user_list.sort(key=lambda x: x["last_action_timestamp"])

        formatted_list = [
            f"ID: {user['uid']}, –ù–∏–∫: @{user['username']}, –ò–º—è: {user['name']}, –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {user['last_action_time']}"
            for user in user_list
        ]

        if len("\n".join(formatted_list)) > 4096:
            chunk_size = 10
            for i in range(0, len(formatted_list), chunk_size):
                chunk = formatted_list[i:i + chunk_size]
                chunk_text = f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∞—Å—Ç—å {i // chunk_size + 1}):\n" + "\n".join(chunk)
                await message.answer(chunk_text)
        else:
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(formatted_list)
            await message.answer(text)
    return wrapped_handler

def make_user_profile_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.from_user.id
        await logger.log_action(user_id, "user_profile_viewed")
        profile = await build_user_profile(user_id, db)

        if not profile:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã! ‚ú®")
            return

        mood = profile["mood"]
        mood_trend = " ‚Üí ".join(profile["mood_trend"]) if profile["mood_trend"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        themes = ", ".join(profile["themes"]) if profile["themes"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        response_count = profile["response_count"]
        request_count = profile["request_count"]
        avg_response_length = round(profile["avg_response_length"], 2)
        days_active = profile["days_active"]
        interactions_per_day = round(profile["interactions_per_day"], 2)
        last_updated = profile["last_updated"].strftime("%Y-%m-%d %H:%M:%S") if profile["last_updated"] else "–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è"

        text = (
            f"üåü –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
            f"–¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_trend}\n"
            f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {themes}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {response_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}\n"
            f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_response_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}\n"
            f"–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å: {interactions_per_day}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}"
        )

        await message.answer(text)
    return wrapped_handler

def make_admin_user_profile_handler(db):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        args = message.text.split()
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_user_profile <user_id>")
            return

        try:
            target_user_id = int(args[1])
        except ValueError:
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        profile = await build_user_profile(target_user_id, db)

        if not profile:
            await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        mood = profile["mood"]
        mood_trend = " ‚Üí ".join(profile["mood_trend"]) if profile["mood_trend"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        themes = ", ".join(profile["themes"]) if profile["themes"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        response_count = profile["response_count"]
        request_count = profile["request_count"]
        avg_response_length = round(profile["avg_response_length"], 2)
        days_active = profile["days_active"]
        interactions_per_day = round(profile["interactions_per_day"], 2)
        last_updated = profile["last_updated"].strftime("%Y-%m-%d %H:%M:%S") if profile["last_updated"] else "–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è"

        text = (
            f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
            f"–¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_trend}\n"
            f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {themes}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {response_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}\n"
            f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_response_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}\n"
            f"–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å: {interactions_per_day}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}"
        )
        await message.answer(text)
    return wrapped_handler

def make_feedback_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id)["name"]
        text = (
            f"{name}, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—é, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å—Ç–∞—Ç—å –µ—â—ë –ø–æ–ª–µ–∑–Ω–µ–µ. –Ø —Å–æ—Ö—Ä–∞–Ω—é –≤–∞—à–∏ –º—ã—Å–ª–∏!"
            if name
            else "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—é, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å—Ç–∞—Ç—å –µ—â—ë –ø–æ–ª–µ–∑–Ω–µ–µ. –Ø —Å–æ—Ö—Ä–∞–Ω—é –≤–∞—à–∏ –º—ã—Å–ª–∏!"
        )
        await message.answer(
            text,
            reply_markup=await get_main_menu(user_id, db),
            protect_content=True
        )
        await state.set_state(UserState.waiting_for_feedback)
        await logger.log_action(user_id, "feedback_initiated")
    return wrapped_handler

def make_process_feedback_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        feedback_text = message.text.strip()
        name = db.get_user(user_id)["name"]
        timestamp = datetime.now(TIMEZONE).isoformat()

        with db.conn:
            db.conn.execute(
                "INSERT INTO feedback (user_id, name, feedback, timestamp) VALUES (?, ?, ?, ?)",
                (user_id, name, feedback_text, timestamp)
            )

        await logger.log_action(user_id, "feedback_submitted", {"feedback": feedback_text})
        text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤!" if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤!"
        await message.answer(
            text,
            reply_markup=await get_main_menu(user_id, db),
            protect_content=True
        )
        await state.clear()
    return wrapped_handler

def make_name_handler(db, logger, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id)["name"]
        text = f"{name}, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'." if name else "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –∏–º—è –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
        ]))
        await state.set_state(UserState.waiting_for_name)
    return wrapped_handler

def make_process_name_handler(db, logger, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = message.text.strip()
        if name == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∏–º—è. –≠—Ç–æ –∏–º—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ.")
            return
        await user_manager.set_name(user_id, name)
        await logger.log_action(user_id, "set_name", {"name": name})
        await message.answer(f"{name}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
    return wrapped_handler

def make_process_skip_name_handler(db, logger, user_manager):
    async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        await user_manager.set_name(user_id, "")
        await logger.log_action(user_id, "skip_name")
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –±–µ–∑ –∏–º–µ–Ω–∏ —Ç–æ–∂–µ –∑–¥–æ—Ä–æ–≤–æ! –í—ã–±–µ—Ä–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'!", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.answer()
    return wrapped_handler

def make_process_reminder_time_handler(db, logger, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id)["name"]
        reminder_time = message.text.strip()
        try:
            reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
            await user_manager.set_reminder(user_id, reminder_time_normalized)
            await logger.log_action(user_id, "set_reminder_time", {"reminder_time": reminder_time_normalized})
            text = f"{name}, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≤ {reminder_time_normalized} –ø–æ –ú–æ—Å–∫–≤–µ." if name else f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≤ {reminder_time_normalized} –ø–æ –ú–æ—Å–∫–≤–µ."
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
            await state.clear()
        except ValueError:
            text = f"{name}, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (—á—á:–º–º)." if name else "–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (—á—á:–º–º)."
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
    return wrapped_handler

def make_logs_handler(db):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        args = message.text.split()
        if len(args) > 1:
            try:
                target_date = datetime.strptime(args[1], "%Y-%m-%d").date()
            except ValueError:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä: /logs 2025-04-07")
                return
        else:
            target_date = datetime.now(TIMEZONE).date()

        logs = db.get_actions()
        filtered_logs = []
        excluded_users = set(NO_LOGS_USERS)
        for log in logs:
            try:
                log_timestamp = datetime.fromisoformat(log["timestamp"]).astimezone(TIMEZONE)
                if log_timestamp.date() == target_date and log["user_id"] not in excluded_users:
                    filtered_logs.append(log)
            except ValueError as e:
                await message.answer(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–µ: {log['timestamp']}, –æ—à–∏–±–∫–∞: {e}")
                return

        if not filtered_logs:
            await message.answer(f"–õ–æ–≥–æ–≤ –∑–∞ {target_date} –Ω–µ—Ç.")
            return

        chunk_size = 20
        for i in range(0, len(filtered_logs), chunk_size):
            chunk = filtered_logs[i:i + chunk_size]
            text = f"–õ–æ–≥–∏ –∑–∞ {target_date} (—á–∞—Å—Ç—å {i // chunk_size + 1}):\n"
            for log in chunk:
                text += f"User {log['user_id']}: {log['action']} at {log['timestamp']}, details: {log['details']}\n"
            
            if len(text) > 4096:
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —É–º–µ–Ω—å—à–∏—Ç–µ chunk_size.")
                return
            
            await message.answer(text)
    return wrapped_handler

def make_bonus_request_handler(db, logger):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        name = db.get_user(user_id)["name"]
        if not db.get_user(user_id)["bonus_available"]:
            text = f"{name}, —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ." if name else "–≠—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ."
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
            return
        advice = random.choice(UNIVERSE_ADVICE)
        text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}" if name else f"–í–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}"
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await logger.log_action(user_id, "bonus_request", {"advice": advice})
    return wrapped_handler

# –§–∞–±—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
def make_card_request_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        return await handle_card_request(message, state, db, logger)
    return wrapped_handler

def make_draw_card_handler(db, logger):
    async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
        return await draw_card(callback, state, db, logger)
    return wrapped_handler

def make_process_request_text_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        return await process_request_text(message, state, db, logger)
    return wrapped_handler

def make_process_initial_response_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        return await process_initial_response(message, state, db, logger)
    return wrapped_handler

def make_process_first_grok_response_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        return await process_first_grok_response(message, state, db, logger)
    return wrapped_handler

def make_process_second_grok_response_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        return await process_second_grok_response(message, state, db, logger)
    return wrapped_handler

def make_process_third_grok_response_handler(db, logger):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        return await process_third_grok_response(message, state, db, logger)
    return wrapped_handler

def make_process_card_feedback_handler(db, logger):
    async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
        return await process_card_feedback(callback, state, db, logger)
    return wrapped_handler

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message.register(make_start_handler(db, logger, user_manager), Command("start"))
dp.message.register(make_share_handler(db), Command("share"))
dp.message.register(make_remind_handler(db, logger, user_manager), Command("remind"))
dp.message.register(make_users_handler(db), Command("users"))
dp.message.register(make_user_profile_handler(db, logger), Command("user_profile"), StateFilter("*"))
dp.message.register(make_admin_user_profile_handler(db), Command("admin_user_profile"))
dp.message.register(make_feedback_handler(db, logger), Command("feedback"))
dp.message.register(make_process_feedback_handler(db, logger), UserState.waiting_for_feedback)
dp.message.register(make_name_handler(db, logger, user_manager), Command("name"))
dp.message.register(make_process_name_handler(db, logger, user_manager), UserState.waiting_for_name)
dp.callback_query.register(make_process_skip_name_handler(db, logger, user_manager), lambda c: c.data == "skip_name")
dp.message.register(make_process_reminder_time_handler(db, logger, user_manager), UserState.waiting_for_reminder_time)
dp.message.register(make_logs_handler(db), Command("logs"))
dp.message.register(make_bonus_request_handler(db, logger), lambda m: m.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")
dp.message.register(handle_survey, Command("survey"))
dp.callback_query.register(lambda c: process_survey_response(c, db, logger), lambda c: c.data.startswith("survey_"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
dp.message.register(make_card_request_handler(db, logger), lambda m: m.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")
dp.callback_query.register(make_draw_card_handler(db, logger), lambda c: c.data == "draw_card")
dp.message.register(make_process_request_text_handler(db, logger), UserState.waiting_for_request_text)
dp.message.register(make_process_initial_response_handler(db, logger), UserState.waiting_for_initial_response)
dp.message.register(make_process_first_grok_response_handler(db, logger), UserState.waiting_for_first_grok_response)
dp.message.register(make_process_second_grok_response_handler(db, logger), UserState.waiting_for_second_grok_response)
dp.message.register(make_process_third_grok_response_handler(db, logger), UserState.waiting_for_third_grok_response)
dp.callback_query.register(make_process_card_feedback_handler(db, logger), lambda c: c.data.startswith("feedback_"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown_message(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /name, /remind, /share, /feedback, /user_profile")

# –ó–∞–ø—É—Å–∫
async def main():
    try:
        db.bot = bot
        logger_root.info("Starting bot initialization")
        
        # –†–∞–∑–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º username –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.get_all_users()
        for user_id in users:
            try:
                chat = await bot.get_chat(user_id)
                username = chat.username or ""
                user_data = db.get_user(user_id)
                if user_data["username"] != username:
                    user_data["username"] = username
                    db.update_user(user_id, user_data)
            except Exception as e:
                logger.log_action(user_id, "username_migration_error", {"error": str(e)})

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
        commands = [
            types.BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"),
            types.BotCommand(command="name", description="–£üßë –£–∫–∞–∑–∞—Ç—å –∏–º—è"),
            types.BotCommand(command="remind", description="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            types.BotCommand(command="share", description="üéÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è"),
            types.BotCommand(command="feedback", description="üì© –û—Ç–∑—ã–≤")
        ]
        await bot.set_my_commands(commands)
        logger_root.info("Bot commands set successfully")

        asyncio.create_task(notifier.check_reminders())
        
        # –†–∞—Å—Å—ã–ª–∫–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        survey_users = [6682555021, 392141189]
        broadcast_data_survey = {
            "datetime": datetime.now(TIMEZONE).replace(second=0, microsecond=0),
            "text": "–ü—Ä–∏–≤–µ—Ç! üåü –ù–∞–∂–º–∏ /survey, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ –ø–æ–º–æ—á—å –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
            "recipients": survey_users
        }
        asyncio.create_task(notifier.send_broadcast(broadcast_data_survey))
        logger_root.info("Survey broadcast task created")

        logger_root.info("Entering polling loop")
        await dp.start_polling(bot)
        logger_root.info("Polling stopped unexpectedly")
    except Exception as e:
        logger.log_action(0, "main_error", {"error": str(e)})
        logger_root.error(f"Main loop failed: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
