import random
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
from datetime import datetime, timedelta
import pytz

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logging.debug("Starting script...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8054930534:AAFDdyp5_xiX0ZPQnSEZKpfOhk2PCdchKvg"
CHANNEL_ID = "@TopPsyGame"
BOT_LINK = "t.me/choose_a_card_bot"
TIMEZONE = pytz.timezone("Europe/Moscow")  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤–∞ (UTC+3)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

logging.debug("Bot and Dispatcher initialized.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_reminder_time = State()
    waiting_for_request_confirmation = State()
    waiting_for_feedback = State()

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = "/data"
LAST_REQUEST_FILE = f"{DATA_DIR}/last_request.json"
USER_NAMES_FILE = f"{DATA_DIR}/user_names.json"
REFERRALS_FILE = f"{DATA_DIR}/referrals.json"
BONUS_AVAILABLE_FILE = f"{DATA_DIR}/bonus_available.json"
REMINDER_TIMES_FILE = f"{DATA_DIR}/reminder_times.json"
STATS_FILE = f"{DATA_DIR}/card_feedback.json"
FEEDBACK_FILE = f"{DATA_DIR}/feedback.json"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

logging.debug("File paths defined, directory created if needed.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
def load_json(file_path, default):
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return {int(k) if k.isdigit() else k: v for k, v in data.items()}
            return data
    return default

def save_json(file_path, data):
    with open(file_path, "w") as f:
        json.dump(data, f, indent=2)
    logging.info(f"Saved file {file_path}: {os.listdir(DATA_DIR)}")

logging.debug("JSON functions defined.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
LAST_REQUEST = load_json(LAST_REQUEST_FILE, {})
USER_NAMES = load_json(USER_NAMES_FILE, {})
REFERRALS = load_json(REFERRALS_FILE, {})
BONUS_AVAILABLE = load_json(BONUS_AVAILABLE_FILE, {})
REMINDER_TIMES = load_json(REMINDER_TIMES_FILE, {})
FEEDBACK = load_json(FEEDBACK_FILE, {})

for user_id, timestamp in LAST_REQUEST.items():
    LAST_REQUEST[user_id] = datetime.fromisoformat(timestamp.replace("Z", "+00:00")).astimezone(TIMEZONE)

logging.debug("Data initialized.")

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤
REFLECTION_QUESTIONS = [
    "–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –¥–∞—ë—Ç –º–Ω–µ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?",
    "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –≤ —Å–ª–æ–∂–∏–≤—à–µ–π—Å—è —Å–∏—Ç—É–∞—Ü–∏–∏?",
    "–ö–∞–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –∏–ª–∏ —Å–∏–ª—É –Ω–µ—Å—ë—Ç —ç—Ç–∞ –∫–∞—Ä—Ç–∞?",
    "–ö–∞–∫–æ–π –ø—Ä–∏—Ä–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–¥–µ—Å—å –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç, –∏ —á—Ç–æ –æ–Ω –¥–ª—è –º–µ–Ω—è –∑–Ω–∞—á–∏—Ç?",
    "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ —Å–≤—è–∑–∞–Ω —Å –º–æ–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏?",
    "–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –º–æ–∂–µ—Ç –¥–∞—Ç—å –º–Ω–µ —ç—Ç–æ—Ç –ø—Ä–∏—Ä–æ–¥–Ω—ã–π —Å–∏–º–≤–æ–ª?",
    "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –∂–∏–∑–Ω–∏ –º–Ω–µ —Å–µ–π—á–∞—Å –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å?",
    "–ö–∞–∫ —è –º–æ–≥—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å?",
    "–ö–∞–∫–∏–º –±—ã–ª–æ –±—ã –º–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã —è —É–∂–µ –æ–±–ª–∞–¥–∞–ª–∞ —ç—Ç–∏–º —Ä–µ—Å—É—Ä—Å–æ–º?",
    "–ö–∞–∫ –ø—Ä–∏—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –≥–æ–≤–æ—Ä–∏—Ç —Å–æ –º–Ω–æ–π?",
    "–ö–∞–∫—É—é –≤–∞–∂–Ω—É—é –º—ã—Å–ª—å –∏–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ –º–Ω–µ –¥–∞—ë—Ç —ç—Ç–∞ –∫–∞—Ä—Ç–∞?",
    "–ï—Å–ª–∏ –±—ã —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ –±—ã –æ–Ω–∞ —Å–∫–∞–∑–∞–ª–∞?",
    "–ö–∞–∫ —è –º–æ–≥—É –ø—Ä–æ—è–≤–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–≤–æ—ë–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö?",
    "–ß—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ —á—ë–º-—Ç–æ –≤–∞–∂–Ω–æ–º –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏?",
    "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –º–Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—é?",
    "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–∏—Ä–æ–¥—É –∑–∞ –µ—ë –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑?",
    "–ö–∞–∫–æ–π –≥–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å –∑–∞–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –¥–ª—è –º–µ–Ω—è?",
    "–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å —É–∂–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏?",
    "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –º–Ω–µ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å?",
    "–ö–∞–∫ —è –º–æ–≥—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–µ–±–µ?",
    "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å–µ–π—á–∞—Å –æ—Å–æ–∑–Ω–∞—Ç—å –º–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏–ª—ã?",
    "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –Ω–∞ –∫–∞—Ä—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –º–Ω–µ –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?",
    "–ï—Å–ª–∏ –±—ã —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –±—ã–ª –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è, –∫–∞–∫ –±—ã –æ–Ω –ø—Ä–æ—è–≤–ª—è–ª—Å—è?",
    "–í –∫–∞–∫–æ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –º–Ω–µ —É–∂–µ –ø–æ–º–æ–≥–∞–ª –ø–æ–¥–æ–±–Ω—ã–π —Ä–µ—Å—É—Ä—Å?",
    "–ß—Ç–æ –º–µ—à–∞–µ—Ç –º–Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å?",
    "–ö–∞–∫–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É?",
    "–ö–∞–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ —è –Ω–∞–ø–æ–ª–Ω—è—é—Å—å, –≥–ª—è–¥—è –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç—É?",
    "–ß—Ç–æ –≤ —ç—Ç–æ–º –æ–±—Ä–∞–∑–µ –¥–∞—ë—Ç –º–Ω–µ –æ—â—É—â–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏?",
    "–ö–∞–∫ –ø—Ä–∏—Ä–æ–¥–∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–µ –∑–¥–µ—Å—å, –≥–¥–µ –∏—Å–∫–∞—Ç—å —Å–≤–æ—é –æ–ø–æ—Ä—É?",
    "–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –æ–±—Ä–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Ä–µ—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å?",
    "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?",
    "–ï—Å–ª–∏ –±—ã —è —É–∂–µ –æ–±–ª–∞–¥–∞–ª–∞ —ç—Ç–∏–º —Ä–µ—Å—É—Ä—Å–æ–º, –∫–∞–∫ –±—ã —è —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞?",
    "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏, –µ—Å–ª–∏ —è –ø—Ä–∏–º—É —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å?",
    "–ö–∞–∫ —è –º–æ–≥—É –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º —Ä–µ—Å—É—Ä—Å–æ–º —Å –¥—Ä—É–≥–∏–º–∏?",
    "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞?"
]
UNIVERSE_ADVICE = [
    "<b>üíå –¢—ã ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–ª—ã.</b> –í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —É–∂–µ –≤–Ω—É—Ç—Ä–∏. –ü—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ –∏ —Å–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥.",
    "<b>üíå –í—Å–µ–ª–µ–Ω–Ω–∞—è –≤–µ–¥—ë—Ç —Ç–µ–±—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º.</b> –ó–∞–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∏ –ø–æ–∑–≤–æ–ª—å —Å–µ–±–µ –∏—Ö –ø—Ä–∏–Ω—è—Ç—å.",
    "<b>üíå –¢–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –±–µ–∑–≥—Ä–∞–Ω–∏—á–µ–Ω.</b> –û—Å–º–µ–ª—å—Å—è –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è –∏ –º–∏—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–µ–±–µ –Ω–∞–≤—Å—Ç—Ä–µ—á—É.",
    "<b>üíå –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ —Ä–æ—Å—Ç.</b> –î–∞–∂–µ –º–∞–ª–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –º–µ—á—Ç–µ.",
    "<b>üíå –¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ –∏–∑–æ–±–∏–ª–∏—è.</b> –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –±–æ–ª—å—à–µ ‚Äî —ç–Ω–µ—Ä–≥–∏–∏, —Ä–∞–¥–æ—Å—Ç–∏, —É—Å–ø–µ—Ö–∞.",
    "<b>üíå –ù–∞–ø–æ–ª–Ω–∏ —Å–µ–±—è —Ä–µ—Å—É—Ä—Å–∞–º–∏.</b> –ö–æ–≥–¥–∞ —Ç—ã —Å–∏–ª—å–Ω–∞ –≤–Ω—É—Ç—Ä–∏, –≤–µ—Å—å –º–∏—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–±—è.",
    "<b>üíå –î–æ–≤–µ—Ä—è–π –ø—Ä–æ—Ü–µ—Å—Å—É.</b> –í—Å—ë —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∫–∞ —Ç—ã —ç—Ç–æ–≥–æ –Ω–µ –≤–∏–¥–∏—à—å.",
    "<b>üíå –°–µ–≥–æ–¥–Ω—è ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.</b> –°–¥–µ–ª–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è.",
    "<b>üíå –¢–≤–æ–π –ø—É—Ç—å –æ—Å–≤–µ—â—ë–Ω —Å–≤–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.</b> –û—Ç–∫—Ä—ã–≤–∞–π —Å–µ—Ä–¥—Ü–µ ‚Äî –∏ —É–≤–∏–¥–∏—à—å –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã.",
    "<b>üíå –¢—ã —Å–∞–º–∞ —Å–æ–∑–¥–∞—ë—à—å —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.</b> –ß–µ–º –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–∞ –≤ —Ç–µ–±–µ, —Ç–µ–º —è—Ä—á–µ —Ç–≤–æ—è –∂–∏–∑–Ω—å.",
    "<b>üíå –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å.</b> –¶–µ–Ω–∏ —Å–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –±–µ–∑ —É—Å–ª–æ–≤–∏–π –∏ –æ–∂–∏–¥–∞–Ω–∏–π.",
    "<b>üíå –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è.</b> –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è ‚Äî –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π —á–µ—Ä–µ–∑ –∏–Ω—Ç—É–∏—Ü–∏—é.",
    "<b>üíå –¢—ã –º–∞–≥–Ω–∏—Ç –¥–ª—è –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è.</b> –ü–æ–∑–≤–æ–ª—å —Ö–æ—Ä–æ—à–µ–º—É –ø—Ä–∏–π—Ç–∏ –ª–µ–≥–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
    "<b>üíå –°–º–µ–ª–æ—Å—Ç—å –º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.</b> –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ.",
    "<b>üíå –†–∞–¥–æ—Å—Ç—å ‚Äî —Ç–≤–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å.</b> –ù–∞–π–¥–∏ –µ—ë –≤ –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–∞—Ö, –∏ –∂–∏–∑–Ω—å –Ω–∞–ø–æ–ª–Ω–∏—Ç—Å—è —Å–º—ã—Å–ª–æ–º.",
    "<b>üíå –°–µ–π –¥–æ–±—Ä–æ ‚Äî –∏ –æ–Ω–æ –≤–µ—Ä–Ω—ë—Ç—Å—è.</b> –ß–µ–º –±–æ–ª—å—à–µ —Å–≤–µ—Ç–∞ —Ç—ã –¥–∞—ë—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—É—á–∞–µ—à—å„ÄÇ",
    "<b>üíå –ü—Ä–∏—Ä–æ–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–±—è.</b> –ù–∞–ø–æ–ª–Ω–∏—Å—å –µ—ë —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Å–≤–æ—é —Å–∏–ª—É„ÄÇ",
    "<b>üíå –ù–µ—Ç –ø—Ä–µ–¥–µ–ª–∞ —Ç–≤–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.</b> –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ —Å—Ç–∞—Ç—å –µ—â—ë –ª—É—á—à–µ, –µ—â—ë —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ„ÄÇ",
    "<b>üíå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —É—Å–ø–µ—Ö–∞.</b> –î–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ –∏ —Å–¥–µ–ª–∞–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥„ÄÇ",
    "<b>üíå –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ.</b> –í—Å–µ–ª–µ–Ω–Ω–∞—è —â–µ–¥—Ä–∞ –∫ —Ç–µ–º, –∫—Ç–æ –æ—Ç–∫—Ä—ã—Ç –µ—ë –¥–∞—Ä–∞–º.",
    "<b>üíå –í—Å—ë –≤ —Ç–µ–±–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞.</b> –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥„ÄÇ",
    "<b>üíå –¢—ã —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞.</b> –¢–≤–æ–π —Å–≤–µ—Ç –Ω—É–∂–µ–Ω –¥—Ä—É–≥–∏–º, –Ω–µ —Å–∫—Ä—ã–≤–∞–π –µ–≥–æ„ÄÇ",
    "<b>üíå –†–µ—Å—É—Ä—Å—ã –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–æ–ª—å —Å–µ–±–µ –∏—Ö –ø—Ä–∏–Ω—è—Ç—å.</b> –¢—ã –¥–æ—Å—Ç–æ–∏–Ω(–∞) –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è„ÄÇ",
    "<b>üíå –°–µ–≥–æ–¥–Ω—è ‚Äì –ª—É—á—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ.</b> –ù–∞–ø–æ–ª–Ω–∏ —Å–µ–±—è —Ç–µ–º, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å„ÄÇ",
    "<b>üíå –í—Å–µ–ª–µ–Ω–Ω–∞—è –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç —Ç–µ–±–µ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–æ—Å—Ç–∞.</b> –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç„ÄÇ",
    "<b>üíå –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è.</b> –°–¥–µ–ª–∞–π —à–∞–≥, –∏ —Ç—ã —É–≤–∏–¥–∏—à—å, –∫–∞–∫ –ª–µ–≥–∫–æ –≤—Å—ë –º–µ–Ω—è–µ—Ç—Å—è„ÄÇ",
    "<b>üíå –õ—é–±–∞—è —Å–∏—Ç—É–∞—Ü–∏—è ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.</b> –ù–∞–π–¥–∏ —Ä–µ—Å—É—Ä—Å –¥–∞–∂–µ —Ç–∞–º, –æ—Ç–∫—É–¥–∞ –µ–≥–æ –Ω–µ –∂–¥—ë—à—å„ÄÇ",
    "<b>üíå –¢–≤–æ–∏ –º–µ—á—Ç—ã –¥–æ—Å—Ç–∏–∂–∏–º—ã.</b> –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–µ—Ä–∏—Ç—å –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å„ÄÇ",
    "<b>üíå –¢—ã —Ç–≤–æ—Ä–µ—Ü —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.</b> –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –∫ –ª—É—á—à–µ–º—É„ÄÇ",
    "<b>üíå –ü—É—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è –ø–æ—Ç–æ–∫–∞ –≤–µ–¥—ë—Ç —Ç–µ–±—è.</b> –î–æ–≤–µ—Ä—å—Å—è –∏ –æ—Ç–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å ‚Äî –≤—Å—ë —Å–ª–æ–∂–∏—Ç—Å—è –∏–¥–µ–∞–ª—å–Ω–æ„ÄÇ",
    "<b>üíå –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ª—ë–≥–∫–æ—Å—Ç–∏.</b> –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∂–∏–∑–Ω–∏ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å„ÄÇ",
    "<b>üíå –ü—Ä–∏—Ä–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è ‚Äî –∏ —Ç—ã —Ç–æ–∂–µ –º–æ–∂–µ—à—å.</b> –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏„ÄÇ",
    "<b>üíå –ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –Ω–∞–ø–æ–ª–Ω—è–µ—à—å —Å–µ–±—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –º–∏—Ä—É.</b> –ù–∞—á–Ω–∏ —Å —Å–µ–±—è„ÄÇ",
    "<b>üíå –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.</b> –í—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è„ÄÇ",
    "<b>üíå –õ—é–±–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ –ª–∏—à—å —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ —Ç–≤–æ–µ–º—É —Ä–æ—Å—Ç—É.</b> –¢–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã„ÄÇ",
    "<b>üíå –û—Ç–∫—Ä—ã–≤–∞—è—Å—å –Ω–æ–≤–æ–º—É, —Ç—ã —Ä–∞—Å—à–∏—Ä—è–µ—à—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã.</b> –ù–µ –±–æ–π—Å—è –∏–¥—Ç–∏ –≤ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ„ÄÇ",
    "<b>üíå –¢—ã —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à(–∞), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ª—É—á—à–µ–µ.</b> –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å„ÄÇ",
    "<b>üíå –ë—É–¥—å –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π ‚Äî –∏ –º–∏—Ä –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é.</b> –ù–∞–ø–æ–ª–Ω—è–π —Å–≤–æ—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ª—é–±–æ–≤—å—é„ÄÇ",
    "<b>üíå –¢–æ, –æ —á—ë–º —Ç—ã –º–µ—á—Ç–∞–µ—à—å, —É–∂–µ –¥–≤–∏–∂–µ—Ç—Å—è –∫ —Ç–µ–±–µ.</b> –û—Ç–∫—Ä—ã–≤–∞–π—Å—è —á—É–¥–µ—Å–∞–º„ÄÇ",
    "<b>üíå –†–µ—Å—É—Ä—Å—ã –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –æ–Ω–∏ –ø–µ—Ä–µ—Ç–µ–∫–∞—é—Ç.</b> –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –ø–æ—Ç–æ–∫—É –∂–∏–∑–Ω–∏ –∏ –¥–æ–≤–µ—Ä—å—Å—è –µ—ë —Ä–∏—Ç–º—É."
]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    return load_json(STATS_FILE, {"users": {}, "total": {"yes": 0, "no": 0}})

def save_stats(stats):
    save_json(STATS_FILE, stats)

logging.debug("Stats functions defined.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu(user_id):
    keyboard = [
        [KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    if BONUS_AVAILABLE.get(user_id, False):
        keyboard.append([KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

logging.debug("Menu generation function defined.")

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            name = USER_NAMES.get(user_id, "")
            try:
                user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
                if user_status.status not in ["member", "administrator", "creator"]:
                    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!" if name else "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='https://t.me/TopPsyGame'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>!"
                    await event.answer(text, disable_web_page_preview=True, protect_content=True)
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                await event.answer("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", protect_content=True)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())
logging.debug("Subscription middleware registered.")

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
BROADCAST = {
    "datetime": datetime(2025, 4, 10, 12, 0, tzinfo=TIMEZONE),  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, —á–∞—Å, –º–∏–Ω—É—Ç–∞)
    "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç –±–æ—Ç–∞: —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã! üåü",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    "recipients": "all"  # "all" –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ID, –Ω–∞–ø—Ä–∏–º–µ—Ä: [123456, 789101]
}
BROADCAST_SENT = False  # –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ

async def check_broadcast():
    global BROADCAST_SENT
    while True:
        now = datetime.now(TIMEZONE)
        if not BROADCAST_SENT and now >= BROADCAST["datetime"]:
            recipients = USER_NAMES.keys() if BROADCAST["recipients"] == "all" else BROADCAST["recipients"]
            for user_id in recipients:
                name = USER_NAMES.get(user_id, "")
                text = f"{name}, {BROADCAST['text']}" if name else BROADCAST["text"]
                try:
                    await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
                    logging.info(f"Broadcast sent to {user_id}")
                except Exception as e:
                    logging.error(f"Failed to send broadcast to {user_id}: {e}")
            BROADCAST_SENT = True
            logging.info("Broadcast completed")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders():
    while True:
        now = datetime.now(TIMEZONE)
        current_time = now.strftime("%H:%M")
        today = now.date()
        for user_id, reminder_time in list(REMINDER_TIMES.items()):
            reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
            last_request_time = LAST_REQUEST.get(user_id)
            card_available = not last_request_time or last_request_time.date() < today
            if current_time == reminder_time_normalized and card_available:
                name = USER_NAMES.get(user_id, "")
                text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú® –û–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è!" if name else "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú® –û–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è!"
                try:
                    await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
                    logging.info(f"Reminder sent to {user_id} at {reminder_time_normalized}")
                except Exception as e:
                    logging.error(f"Failed to send reminder to {user_id}: {e}")
        await asyncio.sleep(60)

logging.debug("Reminder check function defined.")

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def suggest_reminder(user_id, state: FSMContext):
    name = USER_NAMES.get(user_id, "")
    if user_id not in REMINDER_TIMES:
        text = f"{name}, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è! –í –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –≤—ã–±–µ—Ä–∏ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'." if name else "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è! –í –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –≤—ã–±–µ—Ä–∏ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'."
        try:
            await bot.send_message(user_id, text, reply_markup=get_main_menu(user_id), protect_content=True)
        except Exception as e:
            logging.error(f"Failed to suggest reminder to {user_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    if args.startswith("ref_"):
        try:
            referrer_id = int(args[4:])
            if referrer_id != user_id and referrer_id not in REFERRALS.get(user_id, []):
                REFERRALS.setdefault(referrer_id, []).append(user_id)
                save_json(REFERRALS_FILE, REFERRALS)
                if not BONUS_AVAILABLE.get(referrer_id, False):
                    BONUS_AVAILABLE[referrer_id] = True
                    save_json(BONUS_AVAILABLE_FILE, BONUS_AVAILABLE)
                    referrer_name = USER_NAMES.get(referrer_id, "")
                    text = f"{referrer_name}, —É—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'." if referrer_name else "–£—Ä–∞! –ö—Ç–æ-—Ç–æ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –í–æ–∑—å–º–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'."
                    await bot.send_message(referrer_id, text, reply_markup=get_main_menu(referrer_id), protect_content=True)
        except ValueError as e:
            logging.error(f"Invalid referrer ID in args: '{args}', error: {e}")

    if user_id not in USER_NAMES:
        text = "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞–ª–∞—Å—å –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏ - –Ω–∞–∂–º–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
        skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]])
        await message.answer(text, reply_markup=skip_keyboard, protect_content=True)
        await state.set_state(UserState.waiting_for_name)
    else:
        await message.answer(
            f"{USER_NAMES[user_id]}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é." if USER_NAMES[user_id] else "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu(user_id),
            protect_content=True
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: types.Message):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    settings_text = (
        f"{name}, –≤–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "<b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</b> ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ –∏ –ø–æ–ª—É—á–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π', –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.\n"
        "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è.\n"
        "<b>–£–∫–∞–∑–∞—Ç—å –∏–º—è</b> ‚Äî –∑–∞–¥–∞–π –∏–ª–∏ –æ–±–Ω–æ–≤–∏ –∏–º—è, –∫–æ—Ç–æ—Ä—ã–º —è –±—É–¥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n"
        "<b>–û—Ç–∑—ã–≤</b> ‚Äî –ø–æ–¥–µ–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –∏–¥–µ–µ–π, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç –ª—É—á—à–µ. –Ø —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –º—ã—Å–ª–∏!"
    ) if name else (
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "<b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</b> ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ –∏ –ø–æ–ª—É—á–∏ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π', –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.\n"
        "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è.\n"
        "<b>–£–∫–∞–∑–∞—Ç—å –∏–º—è</b> ‚Äî –∑–∞–¥–∞–π –∏–ª–∏ –æ–±–Ω–æ–≤–∏ –∏–º—è, –∫–æ—Ç–æ—Ä—ã–º —è –±—É–¥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n"
        "<b>–û—Ç–∑—ã–≤</b> ‚Äî –ø–æ–¥–µ–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –∏–¥–µ–µ–π, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç –ª—É—á—à–µ. –Ø —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –º—ã—Å–ª–∏!"
    )
    settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="settings_share")],
        [InlineKeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="settings_reminder")],
        [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –∏–º—è", callback_data="settings_name")],
        [InlineKeyboardButton(text="–û—Ç–∑—ã–≤", callback_data="settings_feedback")]
    ])
    await message.answer(settings_text, reply_markup=settings_keyboard, protect_content=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
@dp.callback_query(lambda c: c.data == "settings_share")
async def process_settings_share(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    ref_link = f"{BOT_LINK}?start=ref_{user_id}"
    text = f"{name}, —ç—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!" if name else f"–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å: {ref_link}. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç, –ø–æ–ª—É—á–∏—à—å 'üíå –ü–æ–¥—Å–∫–∞–∑–∫—É –í—Å–µ–ª–µ–Ω–Ω–æ–π'!"
    await callback.message.answer(text, reply_markup=get_main_menu(user_id), protect_content=False)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@dp.callback_query(lambda c: c.data == "settings_reminder")
async def process_settings_reminder(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    current_reminder = REMINDER_TIMES.get(user_id, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    text = f"{name}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)." if name else f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_reminder}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00) –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)."
    await callback.message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.set_state(UserState.waiting_for_reminder_time)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –£–∫–∞–∑–∞—Ç—å –∏–º—è
@dp.callback_query(lambda c: c.data == "settings_name")
async def process_settings_name(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    text = f"{name}, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ –º–µ–Ω—è—Ç—å." if name else "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å."
    skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]])
    await callback.message.answer(text, reply_markup=skip_keyboard, protect_content=True)
    await state.set_state(UserState.waiting_for_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –û—Ç–∑—ã–≤
@dp.callback_query(lambda c: c.data == "settings_feedback")
async def process_settings_feedback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    text = f"{name}, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞. –Ø —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –º—ã—Å–ª–∏!" if name else "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞. –Ø —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –º—ã—Å–ª–∏!"
    await callback.message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.set_state(UserState.waiting_for_feedback)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(UserState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    USER_NAMES[user_id] = name
    save_json(USER_NAMES_FILE, USER_NAMES)
    await message.answer(
        f"{name}, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–∂–º–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user_id),
        protect_content=True
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query(lambda c: c.data == "skip_name")
async def process_skip_name(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    USER_NAMES[user_id] = ""
    save_json(USER_NAMES_FILE, USER_NAMES)
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, –±–µ–∑ –∏–º–µ–Ω–∏ —Ç–æ–∂–µ –∑–¥–æ—Ä–æ–≤–æ! –í—ã–±–µ—Ä–∏ '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è' –≤ –º–µ–Ω—é!",
        reply_markup=get_main_menu(user_id),
        protect_content=True
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(UserState.waiting_for_reminder_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    reminder_time = message.text.strip()
    try:
        reminder_time_normalized = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
        REMINDER_TIMES[user_id] = reminder_time_normalized
        save_json(REMINDER_TIMES_FILE, REMINDER_TIMES)
        text = f"{name}, —Å—É–ø–µ—Ä! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {reminder_time_normalized} (UTC+3)." if name else f"–°—É–ø–µ—Ä! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ {reminder_time_normalized} (UTC+3)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()
    except ValueError:
        text = f"{name}, –∫–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)." if name else "–ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
@dp.message(UserState.waiting_for_feedback)
async def process_feedback_submission(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    feedback_text = message.text.strip()
    FEEDBACK[user_id] = {"name": name, "feedback": feedback_text, "timestamp": datetime.now(TIMEZONE).isoformat()}
    save_json(FEEDBACK_FILE, FEEDBACK)
    text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –µ–≥–æ." if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –µ–≥–æ."
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
@dp.message(lambda message: message.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")
async def handle_card_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    now = datetime.now(TIMEZONE)
    today = now.date()

    last_request_time = LAST_REQUEST.get(user_id)
    if last_request_time and last_request_time.date() == today:
        text = f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª(–∞) –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 (UTC+3)." if name else "–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª(–∞) –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 (UTC+3)."
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        return

    text = f"{name}, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üåø –ü–æ–¥—É–º–∞–π: –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∫–∞—Ä—Ç–µ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞)!" if name else "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üåø –ü–æ–¥—É–º–∞–π: –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∫–∞—Ä—Ç–µ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞)!"
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å –≥–æ—Ç–æ–≤!", callback_data="confirm_request")]])
    await message.answer(text, reply_markup=confirmation_keyboard, protect_content=True)
    await state.set_state(UserState.waiting_for_request_confirmation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
@dp.callback_query(lambda c: c.data == "confirm_request")
async def process_request_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = USER_NAMES.get(user_id, "")
    now = datetime.now(TIMEZONE)
    today = now.date()

    try:
        card_numbers = list(range(1, 41))
        random.shuffle(card_numbers)
        card_number = card_numbers[0]
        card_path = f"cards/card_{card_number}.jpg"
        logging.debug(f"Attempting to load card: {card_path}")

        if not os.path.exists(card_path):
            logging.error(f"Card file not found: {card_path}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(user_id))
            return

        photo = FSInputFile(card_path)
        await bot.send_photo(user_id, photo, reply_markup=get_main_menu(user_id), protect_content=True)
        LAST_REQUEST[user_id] = nowascopy now
        LAST_REQUEST[user_id] = now
        save_json(LAST_REQUEST_FILE, {k: v.isoformat() for k, v in LAST_REQUEST.items()})

        reflection_question = random.choice(REFLECTION_QUESTIONS)
        await callback.message.answer(reflection_question, protect_content=True)

        feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞ üôÇ", callback_data=f"feedback_yes_{card_number}"), InlineKeyboardButton(text="–ù–µ—Ç üôÅ", callback_data=f"feedback_no_{card_number}")]
        ])
        text = f"{name}, —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?" if name else "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?"
        await callback.message.answer(text, reply_markup=feedback_keyboard, protect_content=True)

        await suggest_reminder(user_id, state)

        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã: {e}")
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu(user_id), protect_content=True)
        await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–æ–≤–µ—Ç –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π"
@dp.message(lambda message: message.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")
async def handle_bonus_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = USER_NAMES.get(user_id, "")
    if not BONUS_AVAILABLE.get(user_id, False):
        text = f"{name}, —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –í '–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö' –≤—ã–±–µ—Ä–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!" if name else "–≠—Ç–æ—Ç —Å–æ–≤–µ—Ç –ø–æ–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω! –í '–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö' –≤—ã–±–µ—Ä–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!"
        await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)
        return

    advice = random.choice(UNIVERSE_ADVICE)
    text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}" if name else f"–í–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{advice}"
    await message.answer(text, reply_markup=get_main_menu(user_id), protect_content=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∫–∞—Ä—Ç–∞–º
@dp.callback_query(lambda c: c.data.startswith("feedback_"))
async def process_feedback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or ""
    name = USER_NAMES.get(user_id, "")
    feedback, card_number = callback.data.split("_")[1], callback.data.split("_")[2]
    stats = load_stats()

    user_key = str(user_id)
    if user_key not in stats["users"]:
        stats["users"][user_key] = {"name": name, "username": username, "responses": []}
    stats["users"][user_key]["responses"].append({"card": card_number, "answer": feedback})
    stats["total"][feedback] += 1
    save_stats(stats)

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", reply_markup=get_main_menu(user_id), protect_content=True)
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("Bot starting...")
    asyncio.create_task(check_reminders())
    asyncio.create_task(check_broadcast())  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    while True:
        try:
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            logging.error(f"Polling failed: {e}, restarting in 10 seconds...")
            await asyncio.sleep(10)
        else:
            break

if __name__ == "__main__":
    try:
        logging.debug("Starting main...")
        asyncio.run(main())
    except Exception as e:
        logging.error(f"Failed to start bot: {e}")
        raise