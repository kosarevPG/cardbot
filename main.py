# –∫–æ–¥/main.py

import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from functools import partial
import pytz # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ pytz –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ---
from config import (
    TOKEN, CHANNEL_ID, ADMIN_ID, UNIVERSE_ADVICE, BOT_LINK,
    TIMEZONE, NO_LOGS_USERS, DATA_DIR
)
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –°–µ—Ä–≤–∏—Å—ã
from database.db import Database
from modules.logging_service import LoggingService
from modules.notification_service import NotificationService
from modules.user_management import UserState, UserManager
from modules.ai_service import build_user_profile

# –ú–æ–¥—É–ª—å –ö–∞—Ä—Ç—ã –î–Ω—è
from modules.card_of_the_day import (
    get_main_menu,
    handle_card_request,
    process_initial_resource_callback,
    process_request_type_callback,
    process_request_text,
    process_initial_response,
    process_exploration_choice_callback,
    process_first_grok_response,
    process_second_grok_response,
    process_third_grok_response,
    process_final_resource_callback,
    process_recharge_method,
    process_card_feedback
    # –£–±—Ä–∞–ª –∏–º–ø–æ—Ä—Ç—ã ask_* —Ñ—É–Ω–∫—Ü–∏–π, —Ç.–∫. –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö
)

# –ù–û–í–´–ô –ò–ú–ü–û–†–¢: –ú–æ–¥—É–ª—å –í–µ—á–µ—Ä–Ω–µ–π –†–µ—Ñ–ª–µ–∫—Å–∏–∏
from modules.evening_reflection import (
    reflection_router, # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∏–∑ –º–æ–¥—É–ª—è
    start_evening_reflection # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
)


# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import random
from datetime import datetime, timedelta
import os
import json
import logging
import sqlite3

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ–¥–∏–Ω —Ä–∞–∑ –∑–¥–µ—Å—å
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger_root = logging.getLogger()
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
# ... (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bot, storage –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
os.makedirs(DATA_DIR, exist_ok=True)
db_path = os.path.join(DATA_DIR, "bot.db")
logger.info(f"Initializing database at: {db_path}")
print(f"Initializing database at: {db_path}")
try:
    db = Database(path=db_path)
    db.conn.execute("SELECT 1")
    logger.info(f"Database connection established successfully: {db.conn}")
    db.bot = bot # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –≤ DB
except (sqlite3.Error, Exception) as e:
    logger.exception(f"CRITICAL: Database initialization failed at {db_path}: {e}")
    print(f"CRITICAL: Database initialization failed at {db_path}: {e}")
    raise SystemExit(f"Database failed to initialize: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
logging_service = LoggingService(db)
notifier = NotificationService(bot, db)
user_manager = UserManager(db)

# --- Middleware ---
# ... (–∫–æ–¥ SubscriptionMiddleware –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
class SubscriptionMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, (types.Message, types.CallbackQuery)):
            user = event.from_user
            if not user or user.is_bot:
                 return await handler(event, data)
            user_id = user.id
            if user_id == ADMIN_ID:
                return await handler(event, data)
            try:
                user_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                allowed_statuses = ["member", "administrator", "creator"]
                if user_status.status not in allowed_statuses:
                    user_db_data = db.get_user(user_id)
                    name = user_db_data.get("name") if user_db_data else None
                    link = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
                    text = f"{name}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è. ‚ú® –î–ª—è –Ω–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{link}'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start." if name else f"–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è. ‚ú® –î–ª—è –Ω–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href='{link}'>–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</a>. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start."
                    if isinstance(event, types.Message):
                        await event.answer(text, disable_web_page_preview=True)
                    elif isinstance(event, types.CallbackQuery):
                        await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
                        await event.message.answer(text, disable_web_page_preview=True)
                    return
            except Exception as e:
                logger.error(f"Subscription check failed for user {user_id}: {e}")
                error_text = f"–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}. –£–±–µ–¥–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start."
                if isinstance(event, types.Message):
                     await event.answer(error_text)
                elif isinstance(event, types.CallbackQuery):
                     await event.answer("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=False)
                     await event.message.answer(error_text)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())
dp.callback_query.middleware(SubscriptionMiddleware())
logger.info("SubscriptionMiddleware registered.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

def make_start_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext, command: CommandObject | None = None):
        # ... (–∫–æ–¥ start –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∏ –∏–º—è –Ω–µ –º–µ–Ω—è—é—Ç—Å—è) ...
        await state.clear()
        user_id = message.from_user.id
        username = message.from_user.username or ""
        args = command.args if command else ""

        await logger_service.log_action(user_id, "start_command", {"args": args})

        user_data = db.get_user(user_id)
        if user_data.get("username") != username:
             db.update_user(user_id, {"username": username})

        if args and args.startswith("ref_"):
            try:
                referrer_id = int(args[4:])
                if referrer_id != user_id:
                    if db.add_referral(referrer_id, user_id):
                         referrer_data = db.get_user(referrer_id)
                         if referrer_data and not referrer_data.get("bonus_available"):
                             await user_manager.set_bonus_available(referrer_id, True)
                             ref_name = referrer_data.get("name", "–î—Ä—É–≥")
                             text = f"{ref_name}, —É—Ä–∞! üéâ –ö—Ç–æ-—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π' –≤ –º–µ–Ω—é."
                             try:
                                 await bot.send_message(referrer_id, text, reply_markup=await get_main_menu(referrer_id, db))
                                 await logger_service.log_action(referrer_id, "referral_bonus_granted", {"referred_user": user_id})
                             except Exception as send_err:
                                 logger.error(f"Failed to send referral bonus message to {referrer_id}: {send_err}")
            except (ValueError, TypeError, IndexError) as ref_err:
                 logger.warning(f"Invalid referral code processing '{args}' from user {user_id}: {ref_err}")

        user_name = user_data.get("name")
        if not user_name:
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! ‚ú® –û—á–µ–Ω—å —Ä–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É. –ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –º–Ω–µ –ª—É—á—à–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                 [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
            ]))
            await state.set_state(UserState.waiting_for_name)
        else:
            await message.answer(f"{user_name}, —Å–Ω–æ–≤–∞ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üëã –ì–æ—Ç–æ–≤–∞ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π –¥–Ω—è –∏–ª–∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥?", reply_markup=await get_main_menu(user_id, db))

    return wrapped_handler

# --- –ö–æ–º–∞–Ω–¥–∞ /remind (–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞) ---
def make_remind_handler(db, logger_service, user_manager):
    async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = db.get_user(user_id)
        name = user_data.get("name", "–î—Ä—É–≥")
        morning_reminder = user_data.get("reminder_time")
        evening_reminder = user_data.get("reminder_time_evening") # –ü–æ–ª—É—á–∞–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ

        morning_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ö–∞—Ä—Ç–∞ –¥–Ω—è': <b>{morning_reminder}</b> –ú–°–ö." if morning_reminder else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ö–∞—Ä—Ç–∞ –¥–Ω—è': <b>–æ—Ç–∫–ª—é—á–µ–Ω–æ</b>."
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        evening_default = "21:30"
        evening_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ò—Ç–æ–≥ –¥–Ω—è': <b>{evening_reminder}</b> –ú–°–ö." if evening_reminder else f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ò—Ç–æ–≥ –¥–Ω—è': <b>{evening_default}</b> –ú–°–ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."

        purpose_text = "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ."
        instruction_text = (
            "–í–≤–µ–¥–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è <b>—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '–ö–∞—Ä—Ç–∞ –¥–Ω—è' (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>09:00</b> –∏–ª–∏ <b>08:15</b>).\n"
            f"–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ò—Ç–æ–≥ –¥–Ω—è' –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>{evening_default}</b> –ú–°–ö.\n\n" # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ
            "–ò—Å–ø–æ–ª—å–∑—É–π /remind_off, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å <b>–æ–±–∞</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        )
        text = f"{name}, –ø—Ä–∏–≤–µ—Ç!\n\n{purpose_text}\n\n{morning_text}\n{evening_text}\n\n{instruction_text}"

        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.set_state(UserState.waiting_for_reminder_time)
        await logger_service.log_action(user_id, "remind_command_invoked")
    return wrapped_handler

# --- –ö–æ–º–∞–Ω–¥–∞ /remind_off (–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞) ---
def make_remind_off_handler(db, logger_service, user_manager):
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         current_state = await state.get_state()
         if current_state == UserState.waiting_for_reminder_time:
             await state.clear()

         try:
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–±–æ–∏—Ö –≤—Ä–µ–º–µ–Ω
             await user_manager.clear_reminders(user_id)
             await logger_service.log_action(user_id, "reminders_cleared")
             name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
             text = f"{name}, —è –æ—Ç–∫–ª—é—á–∏–ª <b>–≤—Å–µ</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—è (—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ). –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π /remind."
             await message.answer(text, reply_markup=await get_main_menu(user_id, db))
         except Exception as e:
             logger.error(f"Failed to disable reminders for user {user_id}: {e}", exc_info=True)
             await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
     return wrapped_handler

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è /remind (–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞) ---
def make_process_reminder_time_handler(db, logger_service, user_manager):
     async def wrapped_handler(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
        reminder_time_str = message.text.strip()
        evening_default_time = "21:30" # –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            reminder_dt = datetime.strptime(reminder_time_str, "%H:%M")
            morning_time_normalized = reminder_dt.strftime("%H:%M")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏: –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —É—Ç—Ä–æ + –¥–µ—Ñ–æ–ª—Ç –≤–µ—á–µ—Ä
            await user_manager.set_reminder(user_id, morning_time_normalized, evening_default_time)
            await logger_service.log_action(user_id, "reminders_set", {
                "morning_time": morning_time_normalized,
                "evening_time": evening_default_time
            })
            text = (f"{name}, –æ—Ç–ª–∏—á–Ω–æ! üëç\n"
                    f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ö–∞—Ä—Ç–∞ –¥–Ω—è' –Ω–∞ <b>{morning_time_normalized}</b> –ú–°–ö.\n"
                    f"–ò –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ò—Ç–æ–≥ –¥–Ω—è' –Ω–∞ <b>{evening_default_time}</b> –ú–°–ö.")
            await message.answer(text, reply_markup=await get_main_menu(user_id, db))
            await state.clear()
        except ValueError:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ (—Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ)
            text = f"{name}, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. üï∞Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è <b>—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>08:30</b> –∏–ª–∏ <b>21:00</b>)."
            await message.answer(text) # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
     return wrapped_handler


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π) ---
def make_share_handler(db, logger_service):
    # ... (–∫–æ–¥ share –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
        ref_link = f"{BOT_LINK}?start=ref_{user_id}"
        text = (f"{name}, —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏?\n"
                f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
                f"–ö–æ–≥–¥–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –Ω–µ–π –∏ –Ω–∞—á–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ 'üíå –ü–æ–¥—Å–∫–∞–∑–∫–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é! ‚ú®")
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await logger_service.log_action(user_id, "share_command")
    return wrapped_handler

def make_name_handler(db, logger_service, user_manager):
    # ... (–∫–æ–¥ name –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = db.get_user(user_id).get("name")
         text = f"–¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –∏–º—è: <b>{name}</b>.\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?" if name else "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
         text += "\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å."
         await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
             [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]
         ]))
         await state.set_state(UserState.waiting_for_name)
         await logger_service.log_action(user_id, "name_change_initiated")
     return wrapped_handler


def make_feedback_handler(db, logger_service):
    # ... (–∫–æ–¥ feedback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = db.get_user(user_id).get("name", "–î—Ä—É–≥")
         text = (
             f"{name}, —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ª—É—á—à–µ, –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ?\n"
             "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –ù–∞–ø–∏—à–∏ –∑–¥–µ—Å—å –≤—Å–µ, —á—Ç–æ –¥—É–º–∞–µ—à—å."
         )
         await message.answer(
             text,
             reply_markup=await get_main_menu(user_id, db),
             protect_content=True
         )
         await state.set_state(UserState.waiting_for_feedback)
         await logger_service.log_action(user_id, "feedback_initiated")
     return wrapped_handler


def make_user_profile_handler(db, logger_service):
    # ... (–∫–æ–¥ user_profile –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. build_user_profile —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è) ...
     async def wrapped_handler(message: types.Message, state: FSMContext):
        await state.clear() # Clear any state
        user_id = message.from_user.id
        await logger_service.log_action(user_id, "user_profile_viewed")
        profile = await build_user_profile(user_id, db) # build_user_profile —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è

        mood = profile.get("mood", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        mood_trend_list = profile.get("mood_trend", [])
        mood_trend = " ‚Üí ".join(mood_trend_list) if mood_trend_list else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        themes_list = profile.get("themes", [])
        themes = ", ".join(themes_list) if themes_list and themes_list != ["–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        response_count = profile.get("response_count", 0)
        request_count = profile.get("request_count", 0)
        avg_response_length = round(profile.get("avg_response_length", 0), 1)
        days_active = profile.get("days_active", 0)
        interactions_per_day = round(profile.get("interactions_per_day", 0), 1)
        last_updated_dt = profile.get("last_updated")
        last_updated = last_updated_dt.astimezone(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) else "–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è" # –ò—Å–ø–æ–ª—å–∑—É–µ–º TIMEZONE –∏–∑ config
        initial_resource = profile.get("initial_resource") or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        final_resource = profile.get("final_resource") or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        recharge_method = profile.get("recharge_method") or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        text = (
             f"üìä <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
             f"üë§ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n"
             f"  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ): {mood}\n"
             f"  - –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_trend}\n"
             f"  - –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã: {themes}\n\n"
             f"üåø <b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è '–ö–∞—Ä—Ç–∞ –¥–Ω—è'):</b>\n"
             f"  - –í –Ω–∞—á–∞–ª–µ: {initial_resource}\n"
             f"  - –í –∫–æ–Ω—Ü–µ: {final_resource}\n"
             f"  - –°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recharge_method}\n\n"
             f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
             f"  - –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: {response_count}\n"
             f"  - –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–∞—Ä—Ç–∞–º (—Å —Ç–µ–∫—Å—Ç–æ–º): {request_count}\n"
             f"  - –°—Ä. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_response_length} —Å–∏–º–≤.\n"
             f"  - –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}\n"
             f"  - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å: {interactions_per_day}\n\n"
             f"‚è± <b>–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:</b> {last_updated} –ú–°–ö\n\n"
             f"<i>–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –î–∞–Ω–Ω—ã–µ –∏–∑ '–ò—Ç–æ–≥–∞ –¥–Ω—è' –ø–æ–∫–∞ –∑–¥–µ—Å—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.</i>"
         )
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
     return wrapped_handler

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def make_admin_user_profile_handler(db, logger_service):
    # ... (–∫–æ–¥ admin_user_profile –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         if user_id != ADMIN_ID:
             await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
             return
         args = message.text.split()
         if len(args) < 2:
             await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/admin_user_profile <user_id>`", parse_mode="MarkdownV2")
             return
         try:
             target_user_id = int(args[1])
         except ValueError:
             await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
             return
         user_info = db.get_user(target_user_id)
         if not user_info:
             await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
             return
         profile = await build_user_profile(target_user_id, db)
         name = user_info.get("name", "N/A")
         username = user_info.get("username", "N/A")
         mood = profile.get("mood", "N/A")
         mood_trend = " ‚Üí ".join(profile.get("mood_trend", [])) or "N/A"
         themes = ", ".join(profile.get("themes", [])) or "N/A"
         response_count = profile.get("response_count", "N/A")
         request_count = profile.get("request_count", "N/A")
         avg_response_length = round(profile.get("avg_response_length", 0), 2)
         days_active = profile.get("days_active", "N/A")
         interactions_per_day = round(profile.get("interactions_per_day", 0), 2)
         last_updated_dt = profile.get("last_updated")
         last_updated = last_updated_dt.astimezone(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) else "N/A"
         initial_resource = profile.get("initial_resource") or "N/A"
         final_resource = profile.get("final_resource") or "N/A"
         recharge_method = profile.get("recharge_method") or "N/A"
         text = (
             f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{target_user_id}</code>\n"
             f"   –ò–º—è: {name}, –ù–∏–∫: @{username}\n\n"
             f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n"
             f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
             f"  –¢—Ä–µ–Ω–¥: {mood_trend}\n"
             f"  –¢–µ–º—ã: {themes}\n\n"
             f"<b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π '–ö–∞—Ä—Ç–∞ –¥–Ω—è'):</b>\n"
             f"  –ù–∞—á–∞–ª–æ: {initial_resource}\n"
             f"  –ö–æ–Ω–µ—Ü: {final_resource}\n"
             f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recharge_method}\n\n"
             f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
             f"  –û—Ç–≤–µ—Ç–æ–≤: {response_count}, –ó–∞–ø—Ä–æ—Å–æ–≤: {request_count}\n"
             f"  –°—Ä. –¥–ª–∏–Ω–∞ –æ—Ç–≤.: {avg_response_length}\n"
             f"  –î–Ω–µ–π –∞–∫—Ç–∏–≤.: {days_active}, –í–∑–∞–∏–º./–¥–µ–Ω—å: {interactions_per_day}\n\n"
             f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {last_updated} –ú–°–ö"
         )
         await message.answer(text)
         await logger_service.log_action(user_id, "admin_user_profile_viewed", {"target_user_id": target_user_id})
     return wrapped_handler

def make_users_handler(db, logger_service):
    # ... (–∫–æ–¥ users –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         if user_id != ADMIN_ID:
             await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
             return
         users = db.get_all_users()
         if not users:
             await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
             return
         excluded_users = set(NO_LOGS_USERS)
         filtered_users = [uid for uid in users if uid not in excluded_users]
         if not filtered_users:
             await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö).")
             return
         user_list = []
         for uid in filtered_users:
             user_data = db.get_user(uid)
             name = user_data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
             username = user_data.get("username", "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞")
             last_action_time = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"
             last_action_timestamp_iso = "1970-01-01T00:00:00+00:00"
             user_actions = db.get_actions(uid)
             if user_actions:
                 last_action = user_actions[-1]
                 last_action_timestamp_iso = last_action["timestamp"]
                 try:
                     last_action_dt = datetime.fromisoformat(last_action_timestamp_iso.replace('Z', '+00:00')).astimezone(pytz.timezone("Europe/Moscow")) # Use TIMEZONE
                     last_action_time = last_action_dt.strftime("%Y-%m-%d %H:%M")
                 except ValueError:
                     last_action_time = last_action_timestamp_iso
             user_list.append({
                 "uid": uid, "username": username, "name": name,
                 "last_action_time": last_action_time,
                 "last_action_timestamp_iso": last_action_timestamp_iso
             })
         user_list.sort(key=lambda x: x["last_action_timestamp_iso"], reverse=True)
         formatted_list = [
             f"ID: <code>{user['uid']}</code> | @{user['username']} | {user['name']} | –ü–æ—Å–ª. –¥–µ–π—Å—Ç–≤–∏–µ: {user['last_action_time']}"
             for user in user_list
         ]
         header = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(formatted_list)}):</b>\n(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n\n"
         full_text = header + "\n".join(formatted_list)
         max_len = 4000
         if len(full_text) > max_len:
             current_chunk = header
             for line in formatted_list:
                 if len(current_chunk) + len(line) + 1 > max_len:
                     await message.answer(current_chunk)
                     current_chunk = ""
                 current_chunk += line + "\n"
             if current_chunk:
                 await message.answer(current_chunk)
         else:
             await message.answer(full_text)
         await logger_service.log_action(user_id, "users_command")
     return wrapped_handler


def make_logs_handler(db, logger_service):
    # ... (–∫–æ–¥ logs –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         if user_id != ADMIN_ID:
             await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
             return
         args = message.text.split()
         target_date_str = None
         if len(args) > 1:
             target_date_str = args[1]
             try:
                 target_date = datetime.strptime(target_date_str, "%Y-%m-%d").date()
             except ValueError:
                 await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/logs 2024-04-16`", parse_mode="MarkdownV2")
                 return
         else:
             target_date = datetime.now(pytz.timezone("Europe/Moscow")).date() # Use TIMEZONE
             target_date_str = target_date.strftime("%Y-%m-%d")
         await logger_service.log_action(user_id, "logs_command", {"date": target_date_str})
         logs = db.get_actions()
         filtered_logs = []
         excluded_users = set(NO_LOGS_USERS)
         for log in logs:
             try:
                 log_timestamp_dt = datetime.fromisoformat(log["timestamp"].replace('Z', '+00:00')).astimezone(pytz.timezone("Europe/Moscow")) # Use TIMEZONE
                 if log_timestamp_dt.date() == target_date and log.get("user_id") not in excluded_users:
                     filtered_logs.append(log)
             except (ValueError, TypeError, KeyError) as e:
                 logger.warning(f"Could not parse timestamp or missing data in log for admin view: {log}, error: {e}")
                 continue
         if not filtered_logs:
             await message.answer(f"–õ–æ–≥–æ–≤ –∑–∞ {target_date_str} –Ω–µ—Ç (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).")
             return
         log_lines = []
         for log in filtered_logs:
             ts_str = datetime.fromisoformat(log['timestamp'].replace('Z', '+00:00')).astimezone(pytz.timezone("Europe/Moscow")).strftime('%H:%M:%S') # Use TIMEZONE
             uid = log.get('user_id', 'N/A')
             action = log.get('action', 'N/A')
             details = log.get('details', {})
             details_str = ""
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ details —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–¥ –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
             if isinstance(details, dict) and details:
                 details_str = ", ".join([f"{k}={v}" for k, v in details.items()])
                 details_str = f" ({details_str[:100]}{'...' if len(details_str) > 100 else ''})"
             # –ï—Å–ª–∏ details –Ω–µ —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ JSON), –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
             elif isinstance(details, str):
                 details_str = f" (Details: {details[:100]}{'...' if len(details) > 100 else ''})"

             log_lines.append(f"{ts_str} U:{uid} A:{action}{details_str}")

         header = f"üìú <b>–õ–æ–≥–∏ –∑–∞ {target_date_str} ({len(log_lines)} –∑–∞–ø–∏—Å–µ–π):</b>\n\n"
         full_text = header + "\n".join(log_lines)
         max_len = 4000
         if len(full_text) > max_len:
             current_chunk = header
             for line in log_lines:
                 if len(current_chunk) + len(line) + 1 > max_len:
                     await message.answer(current_chunk)
                     current_chunk = ""
                 current_chunk += line + "\n"
             if current_chunk:
                 await message.answer(current_chunk)
         else:
             await message.answer(full_text)
     return wrapped_handler

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def make_process_name_handler(db, logger_service, user_manager):
    # ... (–∫–æ–¥ process_name –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message, state: FSMContext):
         user_id = message.from_user.id
         name = message.text.strip()
         if not name:
             await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –≤—ã—à–µ.")
             return
         if len(name) > 50:
             await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
             return
         reserved_names = ["‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π", "üåô –ò—Ç–æ–≥ –¥–Ω—è"] # –î–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
         if name in reserved_names:
             await message.answer(f"–ò–º—è '{name}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è :) –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.")
             return
         await user_manager.set_name(user_id, name)
         await logger_service.log_action(user_id, "set_name", {"name": name})
         await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.", reply_markup=await get_main_menu(user_id, db)) # –û–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç
         await state.clear()
     return wrapped_handler

def make_process_skip_name_handler(db, logger_service, user_manager):
    # ... (–∫–æ–¥ skip_name –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(callback: types.CallbackQuery, state: FSMContext):
         user_id = callback.from_user.id
         await user_manager.set_name(user_id, "")
         await logger_service.log_action(user_id, "skip_name")
         try:
             await callback.message.edit_reply_markup(reply_markup=None)
         except Exception as e:
             logger.warning(f"Could not edit message on skip_name for user {user_id}: {e}")
         await callback.message.answer("–•–æ—Ä–æ—à–æ, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –±–µ–∑ –∏–º–µ–Ω–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.", reply_markup=await get_main_menu(user_id, db)) # –û–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç
         await state.clear()
         await callback.answer()
     return wrapped_handler


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ñ–∏–¥–±–µ–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def make_process_feedback_handler(db, logger_service):
    # ... (–∫–æ–¥ process_feedback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
      async def wrapped_handler(message: types.Message, state: FSMContext):
          user_id = message.from_user.id
          feedback_text = message.text.strip()
          if not feedback_text:
              await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=await get_main_menu(user_id, db))
              return

          user_data = db.get_user(user_id)
          name = user_data.get("name", "–ê–Ω–æ–Ω–∏–º")
          username = user_data.get("username", "N/A")
          timestamp_iso = datetime.now(pytz.timezone("Europe/Moscow")).isoformat() # Use TIMEZONE

          try:
              with db.conn:
                  db.conn.execute(
                      "INSERT INTO feedback (user_id, name, feedback, timestamp) VALUES (?, ?, ?, ?)",
                      (user_id, name, feedback_text, timestamp_iso)
                  )
              await logger_service.log_action(user_id, "feedback_submitted", {"feedback_length": len(feedback_text)})
              await message.answer(
                  f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—É. üôè",
                  reply_markup=await get_main_menu(user_id, db),
                  protect_content=True
              )
              try:
                  admin_notify_text = (f"üìù –ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç:\n"
                                       f"ID: <code>{user_id}</code>\n"
                                       f"–ò–º—è: {name}\n"
                                       f"–ù–∏–∫: @{username}\n\n"
                                       f"<b>–¢–µ–∫—Å—Ç:</b>\n{feedback_text}")
                  await bot.send_message(ADMIN_ID, admin_notify_text[:4090])
              except Exception as admin_err:
                  logger.error(f"Failed to send feedback notification to admin: {admin_err}")
              await state.clear()
          except sqlite3.Error as db_err:
               logger.error(f"Failed to save feedback from user {user_id} to DB: {db_err}", exc_info=True)
               await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=await get_main_menu(user_id, db))
      return wrapped_handler


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–Ω—É—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def make_bonus_request_handler(db, logger_service, user_manager):
    # ... (–∫–æ–¥ bonus_request –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
     async def wrapped_handler(message: types.Message):
         user_id = message.from_user.id
         user_data = db.get_user(user_id)
         name = user_data.get("name", "–î—Ä—É–≥")
         if not user_data.get("bonus_available"):
             text = f"{name}, —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø, –∫–æ–≥–¥–∞ –¥—Ä—É–≥ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π."
             await message.answer(text, reply_markup=await get_main_menu(user_id, db))
             return

         advice = random.choice(UNIVERSE_ADVICE)
         text = f"{name}, –≤–æ—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\n\n{advice}"
         await message.answer(text, reply_markup=await get_main_menu(user_id, db))
         await logger_service.log_action(user_id, "bonus_request_used", {"advice_preview": advice[:50]})

         await user_manager.set_bonus_available(user_id, False)
         await logger_service.log_action(user_id, "bonus_disabled_after_use")
     return wrapped_handler


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_handlers(dp: Dispatcher, db: Database, logger_service: LoggingService, user_manager: UserManager):
    logger.info("Registering handlers...")

    # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    start_handler = make_start_handler(db, logger_service, user_manager)
    share_handler = make_share_handler(db, logger_service)
    remind_handler = make_remind_handler(db, logger_service, user_manager)
    remind_off_handler = make_remind_off_handler(db, logger_service, user_manager)
    process_reminder_time_handler = make_process_reminder_time_handler(db, logger_service, user_manager)
    name_handler = make_name_handler(db, logger_service, user_manager)
    process_name_handler = make_process_name_handler(db, logger_service, user_manager)
    process_skip_name_handler = make_process_skip_name_handler(db, logger_service, user_manager)
    feedback_handler = make_feedback_handler(db, logger_service)
    process_feedback_handler = make_process_feedback_handler(db, logger_service)
    user_profile_handler = make_user_profile_handler(db, logger_service)
    bonus_request_handler = make_bonus_request_handler(db, logger_service, user_manager)

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ
    users_handler = make_users_handler(db, logger_service)
    logs_handler = make_logs_handler(db, logger_service)
    admin_user_profile_handler = make_admin_user_profile_handler(db, logger_service)

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ---
    dp.message.register(start_handler, Command("start"), StateFilter("*")) # –†–∞–∑—Ä–µ—à–∞–µ–º /start –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞
    dp.message.register(share_handler, Command("share"), StateFilter("*"))
    dp.message.register(remind_handler, Command("remind"), StateFilter("*"))
    dp.message.register(remind_off_handler, Command("remind_off"), StateFilter("*"))
    dp.message.register(name_handler, Command("name"), StateFilter("*"))
    dp.message.register(feedback_handler, Command("feedback"), StateFilter("*"))
    dp.message.register(user_profile_handler, Command("user_profile"), StateFilter("*"))
    dp.message.register(users_handler, Command("users"), StateFilter("*"))
    dp.message.register(logs_handler, Command("logs"), StateFilter("*"))
    dp.message.register(admin_user_profile_handler, Command("admin_user_profile"), StateFilter("*"))

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
    dp.message.register(bonus_request_handler, F.text == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π", StateFilter("*"))
    dp.message.register(
        partial(handle_card_request, db=db, logger_service=logger_service),
        F.text == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è", StateFilter("*")
    )
    # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –ò—Ç–æ–≥ –¥–Ω—è
    dp.message.register(
        partial(start_evening_reflection, db=db, logger_service=logger_service),
        F.text == "üåô –ò—Ç–æ–≥ –¥–Ω—è", StateFilter("*")
    )


    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ---

    # –ò–º—è
    dp.message.register(process_name_handler, UserState.waiting_for_name)
    dp.callback_query.register(process_skip_name_handler, F.data == "skip_name", UserState.waiting_for_name)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    dp.message.register(process_reminder_time_handler, UserState.waiting_for_reminder_time)

    # –û–±—â–∏–π —Ñ–∏–¥–±–µ–∫
    dp.message.register(process_feedback_handler, UserState.waiting_for_feedback)

    # --- –§–ª–æ—É "–ö–∞—Ä—Ç—ã –î–Ω—è" ---
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.callback_query.register(partial(process_initial_resource_callback, db=db, logger_service=logging_service), UserState.waiting_for_initial_resource, F.data.startswith("resource_"))
    dp.callback_query.register(partial(process_request_type_callback, db=db, logger_service=logging_service), UserState.waiting_for_request_type_choice, F.data.startswith("request_type_"))
    dp.message.register(partial(process_request_text, db=db, logger_service=logging_service), UserState.waiting_for_request_text_input)
    dp.message.register(partial(process_initial_response, db=db, logger_service=logging_service), UserState.waiting_for_initial_response)
    dp.callback_query.register(partial(process_exploration_choice_callback, db=db, logger_service=logging_service), UserState.waiting_for_exploration_choice, F.data.startswith("explore_"))
    dp.message.register(partial(process_first_grok_response, db=db, logger_service=logging_service), UserState.waiting_for_first_grok_response)
    dp.message.register(partial(process_second_grok_response, db=db, logger_service=logging_service), UserState.waiting_for_second_grok_response)
    dp.message.register(partial(process_third_grok_response, db=db, logger_service=logging_service), UserState.waiting_for_third_grok_response)
    dp.callback_query.register(partial(process_final_resource_callback, db=db, logger_service=logging_service), UserState.waiting_for_final_resource, F.data.startswith("resource_"))
    dp.message.register(partial(process_recharge_method, db=db, logger_service=logging_service), UserState.waiting_for_recharge_method)
    dp.callback_query.register(partial(process_card_feedback, db=db, logger_service=logging_service), F.data.startswith("feedback_v2_"), StateFilter("*"))

    # --- –ù–û–í–´–ô –§–õ–û–£: "–ò—Ç–æ–≥ –¥–Ω—è" ---
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏–∑ –º–æ–¥—É–ª—è evening_reflection
    # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ dp['key']
    # (–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ aiogram,
    # –Ω–æ –¥–ª—è aiogram 3.x —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤)
    # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —Ä–æ—É—Ç–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ, –æ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã.
    # –ú—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π dp.
    dp.include_router(reflection_router)
    # –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (db, logger_service) –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞.
    # –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å middleware
    # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö —è–≤–Ω–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞, –µ—Å–ª–∏ aiogram —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —Ç.–∫. –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º partial –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤,
    # –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ã "–ò—Ç–æ–≥–∞ –¥–Ω—è" –Ω–∞–ø—Ä—è–º—É—é –≤ dp, –∞ –Ω–µ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä.
    # –í—ã–±–µ—Ä–µ–º —ç—Ç–æ—Ç –ø—É—Ç—å –¥–ª—è —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:

# --- –ù–û–í–´–ô –§–õ–û–£: "–ò—Ç–æ–≥ –¥–Ω—è" ---
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞–ø—Ä—è–º—É—é —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ partial
    dp.message.register(partial(start_evening_reflection, db=db, logger_service=logger_service), F.text == "üåô –ò—Ç–æ–≥ –¥–Ω—è", StateFilter("*")) # –£–∂–µ –±—ã–ª –≤—ã—à–µ, –¥—É–±–ª—å —É–±—Ä–∞–Ω
    dp.message.register(partial(process_good_moments, db=db, logger_service=logger_service), UserState.waiting_for_good_moments)
    dp.message.register(partial(process_gratitude, db=db, logger_service=logger_service), UserState.waiting_for_gratitude)
    dp.message.register(partial(process_hard_moments, db=db, logger_service=logger_service), UserState.waiting_for_hard_moments)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    async def handle_text_when_waiting_callback(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        logger.warning(f"User {message.from_user.id} sent text '{message.text}' while in state {current_state}, expected callback.")
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä. üëÜ")

    async def handle_callback_when_waiting_text(callback: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        logger.warning(f"User {callback.from_user.id} sent callback '{callback.data}' while in state {current_state}, expected text.")
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç.", show_alert=True)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–´–• —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≥–¥–µ —ç—Ç–æ –Ω—É–∂–Ω–æ
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ö–∞—Ä—Ç—ã –î–Ω—è:
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_initial_resource)
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_request_type_choice)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_request_text_input)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_initial_response)
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_exploration_choice)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_first_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_second_grok_response)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_third_grok_response)
    dp.message.register(handle_text_when_waiting_callback, UserState.waiting_for_final_resource)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_recharge_method)

    # –ù–æ–≤—ã–µ –¥–ª—è –ò—Ç–æ–≥–∞ –î–Ω—è (–µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_good_moments)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_gratitude)
    dp.callback_query.register(handle_callback_when_waiting_text, UserState.waiting_for_hard_moments)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥/—Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ) ---
    @dp.message(StateFilter("*"))
    async def handle_unknown_message_state(message: types.Message, state: FSMContext):
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        current_state = await state.get_state()
        logger.warning(f"Unknown message '{message.text}' received from user {message.from_user.id} in state {current_state}")
        await message.reply("–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –Ω–µ –æ–∂–∏–¥–∞–ª —ç—Ç–æ–≥–æ —Å–µ–π—á–∞—Å. ü§î –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å /start.")

    @dp.message()
    async def handle_unknown_message_no_state(message: types.Message):
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        logger.warning(f"Unknown message '{message.text}' received from user {message.from_user.id} with no state.")
        await message.reply("–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. ü§î –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è', 'üåô –ò—Ç–æ–≥ –¥–Ω—è' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /start, /name, /remind, /share, /feedback, /user_profile.") # –î–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É

    @dp.callback_query(StateFilter("*"))
    async def handle_unknown_callback_state(callback: types.CallbackQuery, state: FSMContext):
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
         current_state = await state.get_state()
         logger.warning(f"Unknown callback '{callback.data}' received from user {callback.from_user.id} in state {current_state}")
         await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)


    @dp.callback_query()
    async def handle_unknown_callback_no_state(callback: types.CallbackQuery):
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
         logger.warning(f"Unknown callback '{callback.data}' received from user {callback.from_user.id} with no state.")
         await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

    logger.info("Handlers registered successfully.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logger.info("Starting bot...")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    commands = [
        types.BotCommand(command="start", description="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        types.BotCommand(command="name", description="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"),
        types.BotCommand(command="remind", description="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ö–∞—Ä—Ç–∞/–ò—Ç–æ–≥)"), # –û–±–Ω–æ–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ
        types.BotCommand(command="remind_off", description="üîï –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), # –û–±–Ω–æ–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ
        types.BotCommand(command="share", description="üéÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º"),
        types.BotCommand(command="feedback", description="‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ / –ò–¥–µ—é"),
        types.BotCommand(command="user_profile", description="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã (–ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    # –ü–ï–†–ï–î–ï–õ–ö–ê: –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ dp –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö
    dp["db"] = db
    dp["logger_service"] = logging_service
    dp["user_manager"] = user_manager # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤ —Ä–æ—É—Ç–µ—Ä–µ

    register_handlers(dp, db, logging_service, user_manager)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_task = asyncio.create_task(notifier.check_reminders())
    logger.info("Reminder check task scheduled.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    logger.info("Starting polling...")
    print("Bot is starting polling...")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"Polling failed: {e}", exc_info=True)
        print(f"CRITICAL: Polling failed: {e}")
    finally:
        logger.info("Stopping bot...")
        print("Bot is stopping...")
        reminder_task.cancel()
        try:
            await reminder_task
        except asyncio.CancelledError:
            logger.info("Reminder task cancelled successfully.")
        if db and db.conn:
            try:
                db.conn.close()
                logger.info("Database connection closed.")
            except Exception as db_close_err:
                 logger.error(f"Error closing database connection: {db_close_err}")
        try:
             # –£ aiogram 3 —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –±–æ—Ç–æ–º, –Ω–æ –º–æ–∂–Ω–æ –∏ —è–≤–Ω–æ
             # await bot.session.close() - –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä—Å–∏–∏ aiogram, –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∞—Ç—Ä–∏–±—É—Ç–∞
             logger.info("Bot session cleanup (handled by aiogram).")
        except Exception as session_close_err:
             logger.error(f"Error closing bot session: {session_close_err}")
        print("Bot stopped.")


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TIMEZONE –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    # os.environ['TZ'] = 'Europe/Moscow'
    # time.tzset() - –¥–ª—è Unix-like —Å–∏—Å—Ç–µ–º
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –¥–ª—è asyncio, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ
        # (–û–±—ã—á–Ω–æ pytz –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ datetime)
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually (KeyboardInterrupt/SystemExit).")
    except Exception as e:
        logger.critical(f"Critical error in main execution scope: {e}", exc_info=True)
        print(f"CRITICAL error in main execution scope: {e}")
