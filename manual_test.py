#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†—É—á–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
"""

def main():
    print("üß™ –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        from modules.texts.gender_utils import determine_gender_by_name, personalize_text
        from modules.texts import LEARNING_TEXTS
        print("   ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞...")
        test_names = [
            ('–ê–Ω–Ω–∞', 'female'),
            ('–ú–∞—Ä–∏—è', 'female'), 
            ('–ò–≤–∞–Ω', 'male'),
            ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', 'male'),
            ('Alex', 'neutral')
        ]
        
        for name, expected in test_names:
            result = determine_gender_by_name(name)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"   {status} '{name}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}')")
        
        # –¢–µ—Å—Ç 3: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏...")
        test_text = "–ü—Ä–∏–≤–µ—Ç{name_part}! –¢—ã{ready} –≥–æ—Ç–æ–≤{ready} –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?"
        
        test_users = [
            {'name': '–ê–Ω–Ω–∞', 'gender': 'female', 'has_name': True},
            {'name': '–ò–≤–∞–Ω', 'gender': 'male', 'has_name': True},
            {'name': '', 'gender': 'neutral', 'has_name': False}
        ]
        
        for user_info in test_users:
            result = personalize_text(test_text, user_info)
            name_display = user_info['name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'
            print(f"   {name_display} ({user_info['gender']}): '{result}'")
        
        # –¢–µ—Å—Ç 4: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤...")
        welcome_text = LEARNING_TEXTS['intro']['welcome']
        print(f"   ‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω: {len(welcome_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        has_placeholders = '{name_part}' in welcome_text or '{ready}' in welcome_text
        if has_placeholders:
            print("   ‚úÖ –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
        else:
            print("   ‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–°–ü–ï–•")
    else:
        print("\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–®–ò–ë–ö–ê")

