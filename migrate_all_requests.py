#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ actions –≤ user_requests
"""
import sqlite3
import json
import os
from datetime import datetime

def migrate_all_requests():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ actions –≤ user_requests"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"üìÅ –ë–î: {db_path}")
        
        migrated_count = 0
        
        # 1. typed_question_submitted
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º typed_question_submitted...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'typed_question_submitted' 
            AND details LIKE '%request%'
            ORDER BY timestamp DESC
        """)
        
        typed_questions = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(typed_questions)} –∑–∞–ø–∏—Å–µ–π")
        
        for row in typed_questions:
            try:
                details = json.loads(row['details'])
                request_text = details.get('request')
                
                if request_text:
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    session_id = f"typed_question_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, request_text, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                            (user_id, request_text, timestamp, session_id)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω typed_question: {request_text[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ typed_question: {e}")
        
        # 2. initial_response_provided (—Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ request)
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º initial_response_provided...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'initial_response_provided' 
            AND details LIKE '%request%'
            ORDER BY timestamp DESC
        """)
        
        initial_responses = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(initial_responses)} –∑–∞–ø–∏—Å–µ–π")
        
        for row in initial_responses:
            try:
                details = json.loads(row['details'])
                request_text = details.get('request')
                
                if request_text and request_text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    card_number = details.get('card_number')
                    session_id = f"initial_response_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, request_text, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id, card_number) VALUES (?, ?, ?, ?, ?)",
                            (user_id, request_text, timestamp, session_id, card_number)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω initial_response: {request_text[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ initial_response: {e}")
        
        # 3. initial_response (—Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ request)
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º initial_response...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'initial_response' 
            AND details LIKE '%request%'
            ORDER BY timestamp DESC
        """)
        
        initial_responses_old = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(initial_responses_old)} –∑–∞–ø–∏—Å–µ–π")
        
        for row in initial_responses_old:
            try:
                details = json.loads(row['details'])
                request_text = details.get('request')
                
                if request_text and request_text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    card_number = details.get('card_number')
                    session_id = f"initial_response_old_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, request_text, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id, card_number) VALUES (?, ?, ?, ?, ?)",
                            (user_id, request_text, timestamp, session_id, card_number)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω initial_response_old: {request_text[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ initial_response_old: {e}")
        
        # 4. card_drawn_with_request
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º card_drawn_with_request...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'card_drawn_with_request' 
            AND details LIKE '%request%'
            ORDER BY timestamp DESC
        """)
        
        card_drawn_requests = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(card_drawn_requests)} –∑–∞–ø–∏—Å–µ–π")
        
        for row in card_drawn_requests:
            try:
                details = json.loads(row['details'])
                request_text = details.get('request')
                
                if request_text:
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    card_number = details.get('card_number')
                    session_id = f"card_drawn_request_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, request_text, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id, card_number) VALUES (?, ?, ?, ?, ?)",
                            (user_id, request_text, timestamp, session_id, card_number)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω card_drawn_request: {request_text[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ card_drawn_request: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_requests = cursor.fetchone()[0]
        
        print(f"\nüéâ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ user_requests: {total_requests}")
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {migrated_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        cursor = conn.execute("""
            SELECT ur.request_text, ur.timestamp, u.name, u.username, ur.card_number
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 10
        """)
        
        examples = cursor.fetchall()
        if examples:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
            for i, row in enumerate(examples, 1):
                name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                username = f"@{row['username']}" if row['username'] else ""
                card_number = row['card_number'] or "N/A"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(row['timestamp'].replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    formatted_date = row['timestamp'][:16]
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                request_text = row['request_text']
                if len(request_text) > 60:
                    request_text = request_text[:60] + "..."
                
                print(f"  {i}. {formatted_date} | {name} {username} | –ö–∞—Ä—Ç–∞: {card_number}")
                print(f"     üí¨ {request_text}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = migrate_all_requests()
    if success:
        print("\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!") 