#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ dump_production.db
"""
import sqlite3
import json
import sys
import os
from datetime import datetime
import uuid

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db import Database

def migrate_from_dump():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏–∑ dump_production.db"""
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó DUMP_PRODUCTION.DB")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ dump_production.db
        dump_conn = sqlite3.connect('database/dump_production.db')
        dump_conn.row_factory = sqlite3.Row
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        db = Database('database/dev.db')
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ actions
        print("üîç –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ actions...")
        
        # 1. –ò—â–µ–º card_request —Å reflection_question
        cursor = dump_conn.execute("""
            SELECT user_id, username, name, details, timestamp
            FROM actions 
            WHERE action = 'card_request' 
            AND details LIKE '%reflection_question%'
        """)
        
        card_requests = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ card_request —Å —Ç–µ–∫—Å—Ç–æ–º: {len(card_requests)}")
        
        # 2. –ò—â–µ–º set_request
        cursor = dump_conn.execute("""
            SELECT user_id, username, name, details, timestamp
            FROM actions 
            WHERE action = 'set_request'
        """)
        
        set_requests = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ set_request: {len(set_requests)}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º card_request
        migrated_count = 0
        skipped_count = 0
        
        print(f"\nüìã –ú–ò–ì–†–ê–¶–ò–Ø card_request:")
        for row in card_requests:
            try:
                user_id = row['user_id']
                details = row['details']
                timestamp = row['timestamp']
                
                # –ü–∞—Ä—Å–∏–º JSON
                details_data = json.loads(details)
                reflection_question = details_data.get('reflection_question', '')
                card_number = details_data.get('card_number')
                
                if reflection_question:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id
                    session_id = f"migrated_dump_{uuid.uuid4().hex[:16]}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                    cursor = db.conn.execute("""
                        SELECT COUNT(*) as count 
                        FROM user_requests 
                        WHERE user_id = ? AND request_text = ? AND timestamp = ?
                    """, (user_id, reflection_question, timestamp))
                    
                    if cursor.fetchone()['count'] == 0:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                        db.save_user_request(user_id, reflection_question, session_id, card_number)
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{reflection_question[:30]}...¬ª")
                    else:
                        skipped_count += 1
                        
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ card_request: {e}")
                continue
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º set_request
        print(f"\nüìã –ú–ò–ì–†–ê–¶–ò–Ø set_request:")
        for row in set_requests:
            try:
                user_id = row['user_id']
                details = row['details']
                timestamp = row['timestamp']
                
                # –ü–∞—Ä—Å–∏–º JSON
                details_data = json.loads(details)
                request_text = details_data.get('request', '')
                
                if request_text:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id
                    session_id = f"migrated_dump_{uuid.uuid4().hex[:16]}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                    cursor = db.conn.execute("""
                        SELECT COUNT(*) as count 
                        FROM user_requests 
                        WHERE user_id = ? AND request_text = ? AND timestamp = ?
                    """, (user_id, request_text, timestamp))
                    
                    if cursor.fetchone()['count'] == 0:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                        db.save_user_request(user_id, request_text, session_id)
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{request_text[:30]}...¬ª")
                    else:
                        skipped_count += 1
                        
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ set_request: {e}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        final_count = cursor.fetchone()['count']
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print(f"  ‚Ä¢ card_request —Å —Ç–µ–∫—Å—Ç–æ–º: {len(card_requests)}")
        print(f"  ‚Ä¢ set_request: {len(set_requests)}")
        print(f"  ‚Ä¢ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {skipped_count}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤ –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {final_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ú–ò–ì–†–ò–†–û–í–ê–ù–ù–´–• –ó–ê–ü–†–û–°–û–í:")
        cursor = db.conn.execute("""
            SELECT ur.user_id, ur.request_text, ur.timestamp, u.name, u.username
            FROM user_requests ur
            LEFT JOIN users u ON ur.user_id = u.user_id
            WHERE ur.session_id LIKE 'migrated_dump_%'
            ORDER BY ur.timestamp DESC
            LIMIT 5
        """)
        
        for row in cursor.fetchall():
            user_id = row['user_id']
            request_text = row['request_text']
            timestamp = row['timestamp']
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = row['username'] or "–±–µ–∑ username"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = timestamp
            
            print(f"  ‚Ä¢ {formatted_date} | {user_id} | {name} | @{username}")
            print(f"    ¬´{request_text}¬ª")
            print()
        
        dump_conn.close()
        db.close()
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó DUMP –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    migrate_from_dump() 