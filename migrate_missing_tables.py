#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ production –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os
from datetime import datetime

def migrate_missing_tables():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ production"""
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü")
    print("=" * 50)
    
    local_db = "database/bot.db"
    prod_db = "/data/bot.db"
    
    if not os.path.exists(local_db):
        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {local_db}")
        return
    
    if not os.path.exists(prod_db):
        print(f"‚ùå Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {prod_db}")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±–µ–∏–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        local_conn = sqlite3.connect(local_db)
        prod_conn = sqlite3.connect(prod_db)
        
        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        tables_to_migrate = [
            'user_requests',
            'scenario_logs', 
            'user_scenarios',
            'posts',
            'mailings'
        ]
        
        for table in tables_to_migrate:
            print(f"\nüìã –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ production
            cursor = prod_conn.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if cursor.fetchone():
                print(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ production")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            cursor = local_conn.execute(f"SELECT sql FROM sqlite_master WHERE type='table' AND name='{table}'")
            schema = cursor.fetchone()
            
            if not schema:
                print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ production
            print(f"  üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table}")
            prod_conn.execute(schema[0])
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                cursor = local_conn.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                
                if count > 0:
                    print(f"  üì• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {count} –∑–∞–ø–∏—Å–µ–π")
                    cursor = local_conn.execute(f"SELECT * FROM {table}")
                    rows = cursor.fetchall()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                    cursor = local_conn.execute(f"PRAGMA table_info({table})")
                    columns = [col[1] for col in cursor.fetchall()]
                    placeholders = ','.join(['?' for _ in columns])
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    prod_conn.executemany(f"INSERT INTO {table} VALUES ({placeholders})", rows)
                else:
                    print(f"  ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –ø—É—Å—Ç–∞—è")
                    
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            prod_conn.commit()
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        print(f"\nüîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤")
        indexes_to_create = [
            ("user_requests", "user_id"),
            ("user_requests", "timestamp"),
            ("scenario_logs", "user_id"),
            ("scenario_logs", "scenario"),
            ("scenario_logs", "timestamp"),
            ("user_scenarios", "user_id"),
            ("user_scenarios", "scenario"),
            ("user_scenarios", "started_at"),
            ("posts", "created_at"),
            ("mailings", "created_at")
        ]
        
        for table, column in indexes_to_create:
            try:
                index_name = f"idx_{table}_{column}"
                prod_conn.execute(f"CREATE INDEX IF NOT EXISTS {index_name} ON {table}({column})")
                print(f"  ‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
        
        prod_conn.commit()
        local_conn.close()
        prod_conn.close()
        
        print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect("/data/bot.db")
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        required_tables = [
            'user_requests',
            'scenario_logs', 
            'user_scenarios',
            'posts',
            'mailings'
        ]
        
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü:")
        for table in required_tables:
            if any(table in t[0] for t in tables):
                print(f"  ‚úÖ {table}")
            else:
                print(f"  ‚ùå {table} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == '__main__':
    migrate_missing_tables()
    verify_migration() 