#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î bot (20).db
"""
import sqlite3
import json
import os
from datetime import datetime

def migrate_to_local_db():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        db_path = "database/bot (20).db"
        if not os.path.exists(db_path):
            print(f"‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
            return False
            
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ë–î: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_requests
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_requests'")
        table_exists = cursor.fetchone() is not None
        
        if not table_exists:
            print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests...")
            conn.execute("""
                CREATE TABLE user_requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    request_text TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    session_id TEXT,
                    card_number INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            conn.execute("CREATE INDEX idx_user_requests_user_id ON user_requests(user_id)")
            conn.execute("CREATE INDEX idx_user_requests_timestamp ON user_requests(timestamp)")
            conn.execute("CREATE INDEX idx_user_requests_session_id ON user_requests(session_id)")
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_requests —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_requests —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor = conn.execute("PRAGMA table_info(user_requests)")
            columns = cursor.fetchall()
            column_names = [col[1] for col in columns]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'request_text' not in column_names:
                conn.execute("ALTER TABLE user_requests ADD COLUMN request_text TEXT")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ request_text")
            
            if 'session_id' not in column_names:
                conn.execute("ALTER TABLE user_requests ADD COLUMN session_id TEXT")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ session_id")
            
            if 'card_number' not in column_names:
                conn.execute("ALTER TABLE user_requests ADD COLUMN card_number INTEGER")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ card_number")
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑ JSON —Ñ–∞–π–ª–∞
        json_data = {
            "6682555021": {"request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å?", "timestamp": "2025-04-06T21:07:36.372613+03:00"},
            "6682555021": {"request": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ç—Ä–µ–≤–æ–≥–æ–π?", "timestamp": "2025-04-07T10:15:22.123456+03:00"},
            "6682555021": {"request": "–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?", "timestamp": "2025-04-08T14:30:45.789012+03:00"},
            "6682555021": {"request": "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è", "timestamp": "2025-04-09T09:20:33.456789+03:00"},
            "6682555021": {"request": "–ö–∞–∫ –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?", "timestamp": "2025-04-10T16:45:12.345678+03:00"},
            "6682555021": {"request": "–ü–æ–º–æ–≥–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–Ω—è", "timestamp": "2025-04-11T11:10:55.678901+03:00"},
            "6682555021": {"request": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏?", "timestamp": "2025-04-12T13:25:18.901234+03:00"}
        }
        
        migrated_count = 0
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        print("\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON...")
        for user_id_str, data in json_data.items():
            try:
                user_id = int(user_id_str)
                request_text = data["request"]
                timestamp = data["timestamp"]
                session_id = f"json_migrate_{user_id}_{migrated_count}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                cursor = conn.execute(
                    "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                    (user_id, request_text, session_id)
                )
                
                if not cursor.fetchone():
                    conn.execute(
                        "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                        (user_id, request_text, timestamp, session_id)
                    )
                    migrated_count += 1
                    print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {request_text[:50]}...")
                else:
                    print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑ dump_production.db
        print("\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ dump_production.db...")
        try:
            dump_conn = sqlite3.connect('database/dump_production.db')
            dump_conn.row_factory = sqlite3.Row
            
            # –ò—â–µ–º card_request —Å reflection_question
            cursor = dump_conn.execute("""
                SELECT user_id, details, timestamp 
                FROM actions 
                WHERE action = 'card_request' 
                AND details LIKE '%reflection_question%'
                LIMIT 20
            """)
            
            card_requests = cursor.fetchall()
            print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(card_requests)} card_request –∑–∞–ø–∏—Å–µ–π")
            
            for row in card_requests:
                try:
                    details = json.loads(row['details'])
                    reflection_question = details.get('reflection_question')
                    
                    if reflection_question:
                        user_id = row['user_id']
                        timestamp = row['timestamp']
                        session_id = f"dump_card_{user_id}_{migrated_count}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        cursor = conn.execute(
                            "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                            (user_id, reflection_question, session_id)
                        )
                        
                        if not cursor.fetchone():
                            conn.execute(
                                "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                                (user_id, reflection_question, timestamp, session_id)
                            )
                            migrated_count += 1
                            print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω card_request: {reflection_question[:50]}...")
                        else:
                            print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω card_request (–¥—É–±–ª–∏–∫–∞—Ç): {reflection_question[:50]}...")
                
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ card_request: {e}")
            
            # –ò—â–µ–º set_request
            cursor = dump_conn.execute("""
                SELECT user_id, details, timestamp 
                FROM actions 
                WHERE action = 'set_request' 
                AND details LIKE '%request%'
                LIMIT 20
            """)
            
            set_requests = cursor.fetchall()
            print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(set_requests)} set_request –∑–∞–ø–∏—Å–µ–π")
            
            for row in set_requests:
                try:
                    details = json.loads(row['details'])
                    request_text = details.get('request')
                    
                    if request_text:
                        user_id = row['user_id']
                        timestamp = row['timestamp']
                        session_id = f"dump_set_{user_id}_{migrated_count}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        cursor = conn.execute(
                            "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                            (user_id, request_text, session_id)
                        )
                        
                        if not cursor.fetchone():
                            conn.execute(
                                "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                                (user_id, request_text, timestamp, session_id)
                            )
                            migrated_count += 1
                            print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω set_request: {request_text[:50]}...")
                        else:
                            print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω set_request (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
                
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ set_request: {e}")
            
            dump_conn.close()
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ dump_production.db: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_requests = cursor.fetchone()[0]
        
        print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î: {total_requests}")
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {migrated_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        cursor = conn.execute("""
            SELECT ur.request_text, ur.timestamp, u.name, u.username 
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 5
        """)
        
        examples = cursor.fetchall()
        if examples:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
            for row in examples:
                name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                username = f"@{row['username']}" if row['username'] else ""
                print(f"  ‚Ä¢ {name} {username}: {row['request_text'][:60]}...")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î bot (20).db...")
    success = migrate_to_local_db()
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!") 