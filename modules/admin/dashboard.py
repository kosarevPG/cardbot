"""
–ú–æ–¥—É–ª—å –¥–∞—à–±–æ—Ä–¥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
"""
import logging
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from database.db import Database
from modules.logging_service import LoggingService

try:
    from config_local import NO_LOGS_USERS, TIMEZONE
except ImportError:
    from config import NO_LOGS_USERS, TIMEZONE

logger = logging.getLogger(__name__)


async def show_admin_dashboard(message: types.Message, db: Database, logger_service: LoggingService, user_id: int, days: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin dashboard")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ)
        summary = db.get_admin_dashboard_summary(days)
        
        if not summary:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_dashboard")],
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            await message.edit_text(text, reply_markup=keyboard)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        period_text = "–°–µ–≥–æ–¥–Ω—è" if days == 1 else f"{days} –¥–Ω–µ–π"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ summary (—É—Å—Ç—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
        dau_metrics = summary['dau']
        retention_metrics = summary['retention']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
        text = f"""üîç <b>–ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î</b> ({period_text})

üë• <b>DAU:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {dau_metrics['dau_today']}
‚Ä¢ –í—á–µ—Ä–∞: {dau_metrics['dau_yesterday']}
‚Ä¢ 7 –¥–Ω–µ–π: {dau_metrics['dau_7']}
‚Ä¢ 30 –¥–Ω–µ–π: {dau_metrics['dau_30']}

üìà <b>Retention:</b>
‚Ä¢ D1: {retention_metrics.get('d1_retention', 0):.1f}%
‚Ä¢ D7: {retention_metrics.get('d7_retention', 0):.1f}%

üîÑ <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è:</b>
‚Ä¢ –ó–∞–ø—É—Å–∫–æ–≤: {summary['card_stats']['total_starts']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['card_stats']['total_completions']} ({summary['card_stats']['completion_rate']:.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —à–∞–≥–æ–≤: {summary['card_stats']['avg_steps']}

üåô <b>–ò—Ç–æ–≥ –¥–Ω—è:</b>
‚Ä¢ –ó–∞–ø—É—Å–∫–æ–≤: {summary['evening_stats']['total_starts']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['evening_stats']['total_completions']} ({summary['evening_stats']['completion_rate']:.1f}%)

üíé <b>–¶–µ–Ω–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–∞: {summary['value']['resource_lift']['positive_pct']}%
‚Ä¢ Feedback Score: {summary['value']['feedback_score']}%

üÉè <b>–ö–æ–ª–æ–¥—ã:</b>
‚Ä¢ üåø –ü—Ä–∏—Ä–æ–¥–∞: {summary['deck_popularity']['decks'].get('nature', {}).get('percentage', 0)}%
‚Ä¢ üíå –í–µ—Å—Ç–æ—á–∫–∞: {summary['deck_popularity']['decks'].get('message', {}).get('percentage', 0)}%"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="admin_dashboard_1"),
                types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="admin_dashboard_7"),
                types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="admin_dashboard_30")
            ],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_dashboard_{days}")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_dashboard_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin dashboard: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_retention(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin retention")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        summary = db.get_admin_dashboard_summary(7)
        retention = summary['retention']
        dau = summary['dau']
        
        text = f"""üìà <b>–ú–ï–¢–†–ò–ö–ò –£–î–ï–†–ñ–ê–ù–ò–Ø</b> (–∑–∞ 7 –¥–Ω–µ–π)

üéØ <b>D1 Retention:</b>
‚Ä¢ {retention['d1_retention']}% ({retention['d1_returned_users']}/{retention['d1_total_users']})
‚Ä¢ –¶–µ–ª—å: >30%

üìÖ <b>D7 Retention:</b>
‚Ä¢ {retention['d7_retention']}% ({retention['d7_returned_users']}/{retention['d7_total_users']})
‚Ä¢ –¶–µ–ª—å: >25%

üë• <b>DAU:</b>
‚Ä¢ –í—á–µ—Ä–∞: {dau['dau_yesterday']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: {dau['dau_7']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π: {dau['dau_30']}"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_retention")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_retention_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin retention: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_funnel(message: types.Message, db: Database, logger_service: LoggingService, user_id: int, days: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ—Ä–æ–Ω–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è '–ö–∞—Ä—Ç–∞ –¥–Ω—è'."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin funnel")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        summary = db.get_admin_dashboard_summary(days)
        funnel = summary['funnel']
        
        period_text = {
            1: "—Å–µ–≥–æ–¥–Ω—è",
            7: "7 –¥–Ω–µ–π", 
            30: "30 –¥–Ω–µ–π"
        }.get(days, f"{days} –¥–Ω–µ–π")
        
        text = f"""üîÑ <b>–í–û–†–û–ù–ö–ê '–ö–ê–†–¢–ê –î–ù–Ø'</b> (–∑–∞ {period_text})

üìä <b>Completion Rate: {funnel['completion_rate']}%</b>
–¶–µ–ª—å: >60%

üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞:</b>
1Ô∏è‚É£ –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é: {funnel['step1']['count']} ({funnel['step1']['pct']}%)
2Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å: {funnel['step2']['count']} ({funnel['step2']['pct']}%)
3Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {funnel['step3']['count']} ({funnel['step3']['pct']}%)
4Ô∏è‚É£ –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É: {funnel['step4']['count']} ({funnel['step4']['pct']}%)
5Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–ª–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é: {funnel['step5']['count']} ({funnel['step5']['pct']}%)
6Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —É–≥–ª—É–±–ª—è—é—â–∏–π –¥–∏–∞–ª–æ–≥: {funnel['step6']['count']} ({funnel['step6']['pct']}%)
7Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: {funnel['step7']['count']} ({funnel['step7']['pct']}%)"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="admin_funnel_1")],
            [types.InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="admin_funnel_7")],
            [types.InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="admin_funnel_30")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_funnel_{days}")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_funnel_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin funnel: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ—Ä–æ–Ω–∫–∏"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_value(message: types.Message, db: Database, logger_service: LoggingService, user_id: int, days: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin value metrics")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        summary = db.get_admin_dashboard_summary(days)
        value = summary['value']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        period_text = "–°–µ–≥–æ–¥–Ω—è" if days == 1 else f"{days} –¥–Ω–µ–π"
        
        text = f"""üíé <b>–ú–ï–¢–†–ò–ö–ò –¶–ï–ù–ù–û–°–¢–ò</b> ({period_text})

üìà <b>Resource Lift:</b>
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {value['resource_lift']['positive_pct']}%
‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {value['resource_lift']['negative_pct']}%
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {value['resource_lift']['total_sessions']}

üëç <b>Feedback Score:</b>
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {value['feedback_score']}%
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {value['total_feedback']}
‚Ä¢ –¶–µ–ª—å: ‚â•50%"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="admin_value_1"),
                types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="admin_value_7"),
                types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="admin_value_30")
            ],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_value_{days}")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_value_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin value: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫ —Ü–µ–Ω–Ω–æ—Å—Ç–∏"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_decks(message: types.Message, db: Database, logger_service: LoggingService, user_id: int, days: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–æ–¥–∞–º –∫–∞—Ä—Ç."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin decks")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–æ–ª–æ–¥
        deck_metrics = db.get_deck_popularity_metrics(days)
        
        if not deck_metrics or not deck_metrics.get('decks'):
            text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–æ–¥–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            await message.edit_text(text, reply_markup=keyboard)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        period_text = "–°–µ–≥–æ–¥–Ω—è" if days == 1 else f"{days} –¥–Ω–µ–π"
        
        decks_data = deck_metrics['decks']
        total_draws = deck_metrics['total_draws']
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–¥
        deck_names = {
            'nature': 'üåø –†–µ—Å—É—Ä—Å—ã –ø—Ä–∏—Ä–æ–¥—ã',
            'message': 'üíå –†–µ—Å—É—Ä—Å–Ω–∞—è –≤–µ—Å—Ç–æ—á–∫–∞'
        }
        
        text = f"""üÉè <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–õ–û–î</b> ({period_text})

üìä <b>–í—Å–µ–≥–æ –≤—ã—Ç—è–Ω—É—Ç–æ –∫–∞—Ä—Ç:</b> {total_draws}

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥–µ
        for deck_key in ['nature', 'message']:
            deck_info = decks_data.get(deck_key, {'total_draws': 0, 'unique_users': 0, 'percentage': 0})
            deck_name = deck_names.get(deck_key, deck_key)
            
            text += f"""<b>{deck_name}:</b>
‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {deck_info['total_draws']} —Ä–∞–∑ ({deck_info['percentage']}%)
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {deck_info['unique_users']}

"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="admin_decks_1"),
                types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="admin_decks_7"),
                types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="admin_decks_30")
            ],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_decks_{days}")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_decks_viewed", {"days": days})
        
    except Exception as e:
        logger.error(f"Error showing admin decks: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–¥"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_reflections(message: types.Message, db: Database, logger_service: LoggingService, user_id: int, days: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin reflections")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        metrics = db.get_evening_reflection_metrics(days)
        
        if not metrics:
            text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            await message.edit_text(text, reply_markup=keyboard)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        period_text = "–°–µ–≥–æ–¥–Ω—è" if days == 1 else f"{days} –¥–Ω–µ–π"
        
        text = f"""üåô <b>–í–ï–ß–ï–†–ù–Ø–Ø –†–ï–§–õ–ï–ö–°–ò–Ø</b> ({period_text})

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π: {metrics['total_reflections']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics['unique_users']}
‚Ä¢ AI-—Ä–µ–∑—é–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {metrics['ai_summaries_count']} ({metrics['ai_summary_rate']}%)

üìù <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤:</b>
‚Ä¢ –•–æ—Ä–æ—à–∏–µ –º–æ–º–µ–Ω—Ç—ã: {metrics['avg_good_length']} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: {metrics['avg_gratitude_length']} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏: {metrics['avg_hard_length']} —Å–∏–º–≤–æ–ª–æ–≤

üë• <b>–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, user in enumerate(metrics['top_users'][:5], 1):
            text += f"{i}. {user['name']} ‚Äî {user['reflection_count']} —Ä–µ—Ñ–ª–µ–∫—Å–∏–π\n"
        
        if not metrics['top_users']:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="admin_reflections_1"),
                types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="admin_reflections_7"),
                types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="admin_reflections_30")
            ],
            [types.InlineKeyboardButton(text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", callback_data=f"admin_recent_reflections_{days}")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_reflections_{days}")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_reflections_viewed", {"days": days})
        
    except Exception as e:
        logger.error(f"Error showing admin reflections: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_logs(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode="HTML")
            return
    except ImportError as e:
        logger.error(f"Failed to import ADMIN_IDS: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        excluded_users = set(NO_LOGS_USERS) if NO_LOGS_USERS else set()
        excluded_condition = f"AND user_id NOT IN ({','.join(['?'] * len(excluded_users))})" if excluded_users else ""
        
        cursor = db.conn.execute(f"""
            SELECT scenario, step, COUNT(*) as count
            FROM scenario_logs 
            WHERE timestamp >= datetime('now', '-7 days')
            {excluded_condition}
            GROUP BY scenario, step
            ORDER BY count DESC
            LIMIT 10
        """, list(excluded_users) if excluded_users else [])
        
        logs = cursor.fetchall()
        
        text = """üìã <b>–î–ï–¢–ê–õ–¨–ù–´–ï –õ–û–ì–ò</b> (–∑–∞ 7 –¥–Ω–µ–π)

üîç <b>–¢–æ–ø-10 —à–∞–≥–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ:</b>"""
        
        for i, log in enumerate(logs, 1):
            text += f"\n{i}. {log['scenario']} ‚Üí {log['step']}: {log['count']}"
        
        text += "\n\nüîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n‚Ä¢ /scenario_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n‚Ä¢ /logs - –≤—Å–µ –ª–æ–≥–∏"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_scenario_stats")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_logs")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await logger_service.log_action(user_id, "admin_logs_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin logs: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        await message.edit_text(text, reply_markup=keyboard)

