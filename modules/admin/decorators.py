"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
"""
import logging
from functools import wraps
from aiogram import types
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)


async def check_admin_rights(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, False –∏–Ω–∞—á–µ
    """
    try:
        from config import ADMIN_IDS
        return str(user_id) in ADMIN_IDS
    except ImportError:
        logger.error("Failed to import ADMIN_IDS")
        return False


async def safe_message_edit(message: types.Message, text: str, reply_markup=None, parse_mode="HTML"):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ "message is not modified".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é HTML)
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        logger.debug("Message not modified, ignoring error")


def admin_required_message(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π).
    """
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        
        try:
            from config import ADMIN_IDS
            if str(user_id) not in ADMIN_IDS:
                logger.warning(f"BLOCKED: User {user_id} attempted to access admin function: {func.__name__}")
                await message.answer("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
        except ImportError as e:
            logger.error(f"CRITICAL: Failed to import ADMIN_IDS in {func.__name__}: {e}")
            await message.answer("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
            return
        
        return await func(message, *args, **kwargs)
    
    return wrapper


def admin_required_callback(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è callback'–æ–≤).
    """
    @wraps(func)
    async def wrapper(callback: types.CallbackQuery, *args, **kwargs):
        user_id = callback.from_user.id
        
        try:
            from config import ADMIN_IDS
            if str(user_id) not in ADMIN_IDS:
                logger.warning(f"BLOCKED: User {user_id} attempted to access admin callback: {func.__name__}")
                await callback.answer("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
                return
        except ImportError as e:
            logger.error(f"CRITICAL: Failed to import ADMIN_IDS in {func.__name__}: {e}")
            await callback.answer("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", show_alert=True)
            return
        
        return await func(callback, *args, **kwargs)
    
    return wrapper

