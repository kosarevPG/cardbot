"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
"""
import logging
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from database.db import Database
from modules.logging_service import LoggingService

logger = logging.getLogger(__name__)


async def show_admin_posts(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode="HTML")
            return
    except ImportError as e:
        logger.error(f"Failed to import ADMIN_IDS: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º PostManager –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        post_manager = None
        scheduler = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if hasattr(message.bot, '_dispatcher') and message.bot._dispatcher:
            post_manager = message.bot._dispatcher.get("post_manager")
            scheduler = message.bot._dispatcher.get("scheduler")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        if not post_manager:
            from modules.post_management import PostManager
            post_manager = PostManager(db, message.bot, logger_service)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        posts = post_manager.get_all_posts(limit=5)
        mailings = post_manager.get_all_mailings(limit=5)
        
        text = "üìù <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–ê–ú–ò</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –ü–æ—Å—Ç–æ–≤: {len(posts)}\n"
        text += f"‚Ä¢ –†–∞—Å—Å—ã–ª–æ–∫: {len(mailings)}\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
        if posts:
            text += "üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:</b>\n"
            for post in posts[:3]:
                preview = post_manager.format_post_preview(post, max_length=50)
                text += f"‚Ä¢ {preview}\n\n"
        else:
            text += "üìù <b>–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if mailings:
            text += "üì§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
            for mailing in mailings[:3]:
                preview = post_manager.format_mailing_preview(mailing)
                text += f"‚Ä¢ {preview}\n\n"
        else:
            text += "üì§ <b>–†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="admin_create_post")],
            [types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="admin_list_posts")],
            [types.InlineKeyboardButton(text="üì§ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_list_mailings")],
            [types.InlineKeyboardButton(text="üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_process_mailings")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing admin posts: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞—Ö"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_posts")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        await message.edit_text(text, reply_markup=keyboard)


async def start_post_creation(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞."""
    try:
        text = """üìù <b>–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–°–¢–ê</b>

–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_posts")]
        ])
        
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await logger_service.log_action(user_id, "admin_post_creation_started", {})
        
    except Exception as e:
        logger.error(f"Error starting post creation: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")


async def show_posts_list(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º PostManager
        post_manager = None
        if hasattr(message.bot, '_dispatcher') and message.bot._dispatcher:
            post_manager = message.bot._dispatcher.get("post_manager")
        
        if not post_manager:
            from modules.post_management import PostManager
            post_manager = PostManager(db, message.bot, logger_service)
        
        posts = post_manager.get_all_posts(limit=20)
        
        if not posts:
            text = "üìù <b>–°–ü–ò–°–û–ö –ü–û–°–¢–û–í</b>\n\n–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üìù <b>–°–ü–ò–°–û–ö –ü–û–°–¢–û–í</b>\n\n"
            for i, post in enumerate(posts, 1):
                preview = post_manager.format_post_preview(post, max_length=80)
                text += f"{i}. {preview}\n\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_posts")]
        ])
        
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing posts list: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤")


async def show_mailings_list(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º PostManager
        post_manager = None
        if hasattr(message.bot, '_dispatcher') and message.bot._dispatcher:
            post_manager = message.bot._dispatcher.get("post_manager")
        
        if not post_manager:
            from modules.post_management import PostManager
            post_manager = PostManager(db, message.bot, logger_service)
        
        mailings = post_manager.get_all_mailings(limit=20)
        
        if not mailings:
            text = "üì§ <b>–°–ü–ò–°–û–ö –†–ê–°–°–´–õ–û–ö</b>\n\n–†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üì§ <b>–°–ü–ò–°–û–ö –†–ê–°–°–´–õ–û–ö</b>\n\n"
            for i, mailing in enumerate(mailings, 1):
                preview = post_manager.format_mailing_preview(mailing)
                stats = post_manager.get_mailing_stats(mailing['id'])
                text += f"{i}. {preview}\n"
                text += f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent_count']}, –û—à–∏–±–æ–∫: {stats['failed_count']}\n\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_posts")]
        ])
        
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing mailings list: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫")


async def process_mailings_now(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º Scheduler –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        scheduler = None
        try:
            # –í aiogram 3.x –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ message.bot._dispatcher
            if hasattr(message.bot, '_dispatcher'):
                scheduler = message.bot._dispatcher.get("scheduler")
        except:
            pass
        
        if not scheduler:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            try:
                from modules.post_management import PostManager
                from modules.scheduler import MailingScheduler
                post_manager = PostManager(db, message.bot, logger_service)
                scheduler = MailingScheduler(post_manager, check_interval=60)
                await scheduler.start()
            except Exception as e:
                logger.error(f"Failed to create scheduler: {e}")
                await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await message.edit_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞—Å—Å—ã–ª–∫–∏...", parse_mode="HTML")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
        result = await scheduler.process_mailings_now()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = f"""‚úÖ <b>–û–ë–†–ê–ë–û–¢–ö–ê –†–ê–°–°–´–õ–û–ö –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {result['processed']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {result['failed']}"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì§ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_list_mailings")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_posts")]
        ])
        
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error processing mailings: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_posts")]
        ])
        await message.edit_text(text, reply_markup=keyboard)

