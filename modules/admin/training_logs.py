"""
–ê–¥–º–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""
import logging
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from database.db import Database
from modules.logging_service import LoggingService
from modules.training_logger import TrainingLogger
from modules.texts import get_personalized_text, ERROR_TEXTS

logger = logging.getLogger(__name__)

async def show_admin_training_logs(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è."""
    try:
        training_logger = TrainingLogger(db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        stats = training_logger.get_training_stats(days=7)
        
        if not stats.get("success"):
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è.", parse_mode="HTML")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = "üìö <b>–õ–û–ì–ò –û–ë–£–ß–ï–ù–ò–Ø</b>\n\n"
        
        if stats.get("overall_stats"):
            text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
            
            current_training = None
            for stat in stats["overall_stats"]:
                training_type = stat["training_type"]
                step = stat["step"]
                count = stat["count"]
                unique_users = stat["unique_users"]
                
                if training_type != current_training:
                    text += f"\nüîπ <b>{training_type.replace('_', ' ').title()}:</b>\n"
                    current_training = training_type
                
                step_emoji = {
                    "started": "‚ñ∂Ô∏è",
                    "completed": "‚úÖ", 
                    "abandoned": "‚ùå"
                }.get(step, "üìù")
                
                step_name = {
                    "started": "–ù–∞—á–∞–ª–∏",
                    "completed": "–ó–∞–≤–µ—Ä—à–∏–ª–∏",
                    "abandoned": "–ë—Ä–æ—Å–∏–ª–∏"
                }.get(step, step)
                
                text += f"{step_emoji} {step_name}: {count} —Ä–∞–∑ ({unique_users} —á–µ–ª.)\n"
        else:
            text += "üìù –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –æ–±—É—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –Ω–∏–∫—Ç–æ.\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        recent_users = training_logger.get_training_users(limit=10)
        
        if recent_users:
            text += "\nüë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
            for user in recent_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                # sqlite3.Row –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—é
                username = user["username"] if user["username"] else ""
                first_name = user["first_name"] if user["first_name"] else ""
                last_name = user["last_name"] if user["last_name"] else ""
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                display_name = f"{first_name} {last_name}".strip()
                if username:
                    display_name += f" (@{username})"
                if not display_name:
                    display_name = f"ID: {user['user_id']}"
                
                step_emoji = {
                    "started": "‚ñ∂Ô∏è",
                    "completed": "‚úÖ",
                    "abandoned": "‚ùå"
                }.get(user["step"], "üìù")
                
                training_name = user["training_type"].replace("_", " ").title()
                text += f"{step_emoji} {display_name} - {training_name}\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_training_stats")],
            [types.InlineKeyboardButton(text="üë• –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="admin_training_users")],
            [types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_training_search")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_training_settings")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_training_logs")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await logger_service.log_action(user_id, "admin_training_logs_viewed", {})
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message in show_admin_training_logs: {e}", exc_info=True)
                text = get_personalized_text('admin.training_logs_load_error', ERROR_TEXTS, user_id, db)
                await message.answer(text)
                
    except Exception as e:
        logger.error(f"Error showing admin training logs: {e}", exc_info=True)
        text = get_personalized_text('admin.training_logs_critical_error', ERROR_TEXTS, user_id, db)
        await message.answer(text)

async def show_admin_training_stats(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è."""
    try:
        training_logger = TrainingLogger(db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        stats_7d = training_logger.get_training_stats(days=7)
        stats_30d = training_logger.get_training_stats(days=30)
        
        text = "üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π
        text += "üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π:</b>\n"
        if stats_7d.get("overall_stats"):
            for stat in stats_7d["overall_stats"]:
                training_type = stat["training_type"].replace("_", " ").title()
                step = stat["step"]
                count = stat["count"]
                unique_users = stat["unique_users"]
                
                step_name = {
                    "started": "–ù–∞—á–∞–ª–∏",
                    "completed": "–ó–∞–≤–µ—Ä—à–∏–ª–∏", 
                    "abandoned": "–ë—Ä–æ—Å–∏–ª–∏"
                }.get(step, step)
                
                text += f"‚Ä¢ {training_type} - {step_name}: {count} ({unique_users} —á–µ–ª.)\n"
        else:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        text += "\nüìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>\n"
        if stats_30d.get("overall_stats"):
            for stat in stats_30d["overall_stats"]:
                training_type = stat["training_type"].replace("_", " ").title()
                step = stat["step"]
                count = stat["count"]
                unique_users = stat["unique_users"]
                
                step_name = {
                    "started": "–ù–∞—á–∞–ª–∏",
                    "completed": "–ó–∞–≤–µ—Ä—à–∏–ª–∏",
                    "abandoned": "–ë—Ä–æ—Å–∏–ª–∏"
                }.get(step, step)
                
                text += f"‚Ä¢ {training_type} - {step_name}: {count} ({unique_users} —á–µ–ª.)\n"
        else:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_training_stats")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º", callback_data="admin_training_logs")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await logger_service.log_action(user_id, "admin_training_stats_viewed", {})
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message in show_admin_training_stats: {e}", exc_info=True)
                
    except Exception as e:
        logger.error(f"Error showing admin training stats: {e}", exc_info=True)
        text = get_personalized_text('admin.training_stats_error', ERROR_TEXTS, user_id, db)
        await message.answer(text)

async def show_admin_training_users(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è."""
    try:
        training_logger = TrainingLogger(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = training_logger.get_training_users(limit=50)
        
        text = "üë• <b>–£–ß–ê–°–¢–ù–ò–ö–ò –û–ë–£–ß–ï–ù–ò–Ø</b>\n\n"
        
        if users:
            for i, user in enumerate(users, 1):
                # sqlite3.Row –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—é
                username = user["username"] if user["username"] else ""
                first_name = user["first_name"] if user["first_name"] else ""
                last_name = user["last_name"] if user["last_name"] else ""
                user_id_display = user["user_id"]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                display_name = f"{first_name} {last_name}".strip()
                if username:
                    display_name += f" (@{username})"
                if not display_name:
                    display_name = f"ID: {user_id_display}"
                
                step_emoji = {
                    "started": "‚ñ∂Ô∏è",
                    "completed": "‚úÖ",
                    "abandoned": "‚ùå"
                }.get(user["step"], "üìù")
                
                training_name = user["training_type"].replace("_", " ").title()
                timestamp = user["timestamp"]
                
                text += f"{i}. {step_emoji} <b>{display_name}</b>\n"
                text += f"   üìö {training_name}\n"
                text += f"   üïí {timestamp}\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(text) > 3500:
                    text += f"... –∏ –µ—â–µ {len(users) - i} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    break
        else:
            text += "üìù –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–±—É—á–µ–Ω–∏–µ."
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_training_users")],
            [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º", callback_data="admin_training_logs")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await logger_service.log_action(user_id, "admin_training_users_viewed", {})
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message in show_admin_training_users: {e}", exc_info=True)
                
    except Exception as e:
        logger.error(f"Error showing admin training users: {e}", exc_info=True)
        text = get_personalized_text('admin.training_users_error', ERROR_TEXTS, user_id, db)
        await message.answer(text)
