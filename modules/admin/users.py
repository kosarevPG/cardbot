"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
"""
import logging
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
from database.db import Database
from modules.logging_service import LoggingService
from modules.ai_service import build_user_profile

try:
    from config_local import NO_LOGS_USERS, TIMEZONE, ADMIN_ID
except ImportError:
    from config import NO_LOGS_USERS, TIMEZONE, ADMIN_ID

logger = logging.getLogger(__name__)


def make_admin_user_profile_handler(db, logger_service):
    async def wrapped_handler(message: types.Message):
        user_id = message.from_user.id
        if user_id != ADMIN_ID: 
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_user_profile <user_id>")
            return
        
        try:
            target_user_id = int(args[1])
        except ValueError:
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        user_info = db.get_user(target_user_id)
        if not user_info:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users.")
            return
        
        profile = await build_user_profile(target_user_id, db)
        name = user_info.get("name", "N/A")
        username = user_info.get("username", "N/A")
        mood = profile.get("mood", "N/A")
        mood_trend_list = [m for m in profile.get("mood_trend", []) if m != "unknown"]
        mood_trend = " ‚Üí ".join(mood_trend_list) if mood_trend_list else "N/A"
        themes_list = profile.get("themes", [])
        themes = ", ".join(themes_list) if themes_list and themes_list != ["–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"] else "N/A"
        initial_resource = profile.get("initial_resource") or "N/A"
        final_resource = profile.get("final_resource") or "N/A"
        recharge_method = profile.get("recharge_method") or "N/A"
        last_reflection_date = profile.get("last_reflection_date") or "N/A"
        reflection_count = profile.get("reflection_count", 0)
        response_count = profile.get("response_count", 0)
        days_active = profile.get("days_active", 0)
        total_cards_drawn = profile.get("total_cards_drawn", 0)
        last_updated_dt = profile.get("last_updated")
        last_updated = last_updated_dt.astimezone(TIMEZONE).strftime("%Y-%m-%d %H:%M") if isinstance(last_updated_dt, datetime) and TIMEZONE else "N/A"
        
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{target_user_id}</code> | @{username} | {name}\n\n"
            f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ & –¢–µ–º—ã:</b>\n  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n  –¢—Ä–µ–Ω–¥: {mood_trend}\n  –¢–µ–º—ã: {themes}\n\n"
            f"<b>–†–µ—Å—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π '–ö–∞—Ä—Ç–∞ –¥–Ω—è'):</b>\n  –ù–∞—á–∞–ª–æ: {initial_resource}\n  –ö–æ–Ω–µ—Ü: {final_resource}\n  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recharge_method}\n\n"
             f"<b>–ò—Ç–æ–≥ –¥–Ω—è:</b>\n  –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Ç–æ–≥: {last_reflection_date}\n  –í—Å–µ–≥–æ –∏—Ç–æ–≥–æ–≤: {reflection_count}\n\n"
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n  –û—Ç–≤–µ—Ç–æ–≤ (–∫–∞—Ä—Ç–∞): {response_count}\n  –ö–∞—Ä—Ç –≤—ã—Ç—è–Ω—É—Ç–æ: {total_cards_drawn}\n  –î–Ω–µ–π –∞–∫—Ç–∏–≤.: {days_active}\n\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {last_updated} –ú–°–ö"
        )
        await message.answer(text)
        await logger_service.log_action(user_id, "admin_user_profile_viewed", {"target_user_id": target_user_id})
    
    return wrapped_handler


async def show_admin_users(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin users")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = db.get_all_users()
        excluded_users = set(NO_LOGS_USERS) if NO_LOGS_USERS else set()
        filtered_users = [uid for uid in all_users if uid not in excluded_users]
        total_users = len(filtered_users)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–∏–∑ scenario_logs)
        excluded_users = set(NO_LOGS_USERS) if NO_LOGS_USERS else set()
        excluded_condition = f"AND user_id NOT IN ({','.join(['?'] * len(excluded_users))})" if excluded_users else ""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VIEW v_events –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        excluded_condition_view = ""
        params_view = []
        if excluded_users:
            excluded_condition_view = "AND user_id NOT IN ({})".format(','.join('?' * len(excluded_users)))
            params_view = list(excluded_users)
        
        cursor = db.conn.execute(f"""
            SELECT COUNT(DISTINCT user_id) as active_users
            FROM v_events 
            WHERE d_local >= date('now', '+3 hours', '-7 days')
            {excluded_condition_view}
        """, params_view)
        active_users = cursor.fetchone()['active_users']
        
        activity_pct = (active_users/total_users*100) if total_users > 0 else 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        new_users_stats = db.get_new_users_stats(7)
        
        text = f"""üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {active_users}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_pct:.1f}%

üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7 –¥–Ω–µ–π):</b>
‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö: {new_users_stats['total_new_users']}
‚Ä¢ –° –º–µ—Ç–∫–æ–π first_seen: {new_users_stats['users_with_first_seen']}
‚Ä¢ –ë–µ–∑ –º–µ—Ç–∫–∏: {new_users_stats['users_without_first_seen']}

üîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ /users - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /user_profile [ID] - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
            [types.InlineKeyboardButton(text="üí¨ –ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_requests")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_users_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin users: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_users_list(message: types.Message, db: Database, logger_service: LoggingService, user_id: int, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
            logger.warning(f"BLOCKED: User {user_id} attempted to access admin users list")
            return
    except ImportError as e:
        logger.error(f"CRITICAL: Failed to import ADMIN_IDS: {e}")
        await message.edit_text("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = db.get_all_users()
        excluded_users = set(NO_LOGS_USERS) if NO_LOGS_USERS else set()
        filtered_users = [uid for uid in all_users if uid not in excluded_users]
        
        if not filtered_users:
            text = "üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users_list")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b> ({len(filtered_users)})\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list = []
        for uid in filtered_users:
            user_data = db.get_user(uid)
            if user_data:
                name = user_data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                username = user_data.get("username", "")
                last_action_time = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                user_actions = db.get_actions(uid)
                if user_actions:
                    last_action = user_actions[-1]
                    raw_timestamp = last_action.get("timestamp")
                    try:
                        if isinstance(raw_timestamp, datetime):
                            last_action_dt = raw_timestamp.astimezone(TIMEZONE) if raw_timestamp.tzinfo and TIMEZONE else raw_timestamp
                            last_action_time = last_action_dt.strftime("%Y-%m-%d %H:%M")
                        elif isinstance(raw_timestamp, str):
                            last_action_dt = datetime.fromisoformat(raw_timestamp.replace('Z', '+00:00')).astimezone(TIMEZONE)
                            last_action_time = last_action_dt.strftime("%Y-%m-%d %H:%M")
                    except:
                        last_action_time = "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã"
                
                username_display = f"@{username}" if username else "–±–µ–∑ username"
                user_list.append({
                    'uid': uid,
                    'name': name,
                    'username': username_display,
                    'last_action_time': last_action_time
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        try:
            user_list.sort(key=lambda x: x['last_action_time'], reverse=True)
        except Exception as sort_err:
            logger.warning(f"Error sorting user list by timestamp: {sort_err}. List may be unsorted.")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
        max_users_per_page = 15  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = page
        start_idx = current_page * max_users_per_page
        end_idx = start_idx + max_users_per_page
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è MESSAGE_TOO_LONG
        visible_users = user_list[start_idx:end_idx]
        
        for i, user in enumerate(visible_users, start_idx + 1):
            text += f"{i}. <code>{user['uid']}</code> | {user['username']} | {user['name']}\n"
            text += f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {user['last_action_time']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_pages = (len(user_list) + max_users_per_page - 1) // max_users_per_page
        current_page_display = current_page + 1
        
        if total_pages > 1:
            text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page_display} –∏–∑ {total_pages}\n"
            text += f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(visible_users)} –∏–∑ {len(user_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        else:
            text += f"\nüìÑ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_list)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if total_pages > 1:
            nav_buttons = []
            if current_page > 0:
                nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_users_page_{current_page-1}"))
            nav_buttons.append(types.InlineKeyboardButton(text=f"{current_page_display}/{total_pages}", callback_data="admin_users_list"))
            if current_page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_users_page_{current_page+1}"))
            keyboard_buttons.append(nav_buttons)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.extend([
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users_list")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_users_list_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin users list: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_requests(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∫–∞—Ä—Ç–∞–º."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode="HTML")
            return
    except ImportError as e:
        logger.error(f"Failed to import ADMIN_IDS: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        requests_stats = db.get_user_requests_stats(7, user_id)
        requests_sample = db.get_user_requests_sample(5, 7, user_id)
        
        text = f"""üí¨ <b>–ó–ê–ü–†–û–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b> (–∑–∞ 7 –¥–Ω–µ–π)

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_stats.get('total_requests', 0)}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {requests_stats.get('unique_users', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {requests_stats.get('avg_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {requests_stats.get('min_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {requests_stats.get('max_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤

üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>"""
        
        if requests_sample:
            for i, req in enumerate(requests_sample, 1):
                req_user_id = req.get('user_id', 'N/A')
                user_name = req.get('user_name', '–ê–Ω–æ–Ω–∏–º')
                username = req.get('user_username', '')
                timestamp = req.get('timestamp', '')
                request_text = req['request_text']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_date = timestamp
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username
                username_display = f"@{username}" if username else "–±–µ–∑ username"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
                display_text = request_text
                
                text += f"\n{i}. <b>{formatted_date}</b>"
                text += f"\n   <i>¬´{display_text}¬ª</i>"
                text += f"\n   üë§ <code>{req_user_id}</code> | {username_display} | {user_name}"
                text += f"\n"
        else:
            text += "\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="admin_requests_full")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_requests")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_requests_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin requests: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


async def show_admin_requests_full(message: types.Message, db: Database, logger_service: LoggingService, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from config import ADMIN_IDS
        if str(user_id) not in ADMIN_IDS:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode="HTML")
            return
    except ImportError as e:
        logger.error(f"Failed to import ADMIN_IDS: {e}")
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", parse_mode="HTML")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        requests_sample = db.get_user_requests_sample(20, 7, user_id)
        
        text = f"""üìã <b>–ü–û–õ–ù–´–ï –ó–ê–ü–†–û–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b> (–∑–∞ 7 –¥–Ω–µ–π)

üìä <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {len(requests_sample)}

üìù <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>"""
        
        if requests_sample:
            for i, req in enumerate(requests_sample, 1):
                req_user_id = req.get('user_id', 'N/A')
                user_name = req.get('user_name', '–ê–Ω–æ–Ω–∏–º')
                username = req.get('user_username', '')
                timestamp = req.get('timestamp', '')
                request_text = req['request_text']
                card_number = req.get('card_number', 'N/A')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_date = timestamp
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username
                username_display = f"@{username}" if username else "–±–µ–∑ username"
                
                text += f"\n\n<b>{i}. {formatted_date}</b>"
                text += f"\nüé¥ –ö–∞—Ä—Ç–∞: {card_number}"
                text += f"\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{req_user_id}</code> | {username_display} | {user_name}"
                text += f"\nüí¨ <b>–ó–∞–ø—Ä–æ—Å:</b>"
                text += f"\n   ¬´{request_text}¬ª"
                text += f"\n{'‚îÄ' * 40}"
        else:
            text += "\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_requests")],
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_requests_full")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        
        try:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await logger_service.log_action(user_id, "admin_requests_full_viewed", {})
        
    except Exception as e:
        logger.error(f"Error showing admin requests full: {e}", exc_info=True)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise

