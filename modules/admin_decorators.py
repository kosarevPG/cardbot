"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
"""
import logging
from functools import wraps
from aiogram import types

logger = logging.getLogger(__name__)


def admin_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ async —Ñ—É–Ω–∫—Ü–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç message/callback –∏ user_id.
    """
    @wraps(func)
    async def wrapper(message_or_callback, db, logger_service, user_id, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            from config import ADMIN_IDS
            if str(user_id) not in ADMIN_IDS:
                error_text = "üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                logger.warning(f"BLOCKED: User {user_id} attempted to access admin function: {func.__name__}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if isinstance(message_or_callback, types.CallbackQuery):
                    await message_or_callback.message.edit_text(error_text, parse_mode="HTML")
                else:
                    await message_or_callback.answer(error_text)
                return
        except ImportError as e:
            error_text = "üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
            logger.error(f"CRITICAL: Failed to import ADMIN_IDS in {func.__name__}: {e}")
            
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(error_text, parse_mode="HTML")
            else:
                await message_or_callback.answer(error_text)
            return
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return await func(message_or_callback, db, logger_service, user_id, *args, **kwargs)
    
    return wrapper


def safe_edit_message(parse_mode="HTML"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É "message is not modified".
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            from aiogram.exceptions import TelegramBadRequest
            try:
                return await func(*args, **kwargs)
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                logger.debug(f"Message not modified in {func.__name__}, ignoring error")
        return wrapper
    return decorator


async def check_admin_rights(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, False –∏–Ω–∞—á–µ
    """
    try:
        from config import ADMIN_IDS
        return str(user_id) in ADMIN_IDS
    except ImportError:
        logger.error("Failed to import ADMIN_IDS")
        return False

