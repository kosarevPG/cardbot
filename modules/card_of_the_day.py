import random
import os
from aiogram import types
from aiogram.fsm.context import FSMContext
from config import TIMEZONE, NO_CARD_LIMIT_USERS
from .ai_service import get_grok_question, get_grok_summary, build_user_profile, get_supportive_message
from datetime import datetime
from modules.user_management import UserState
import logging

logger = logging.getLogger(__name__)

async def get_main_menu(user_id, db):
    keyboard = [[types.KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")]]
    user_data = db.get_user(user_id)
    if user_data and user_data.get("bonus_available"):
        keyboard.append([types.KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

async def handle_card_request(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    now = datetime.now(TIMEZONE)
    today = now.date()

    last_request_str = db.get_user(user_id).get("last_request")
    last_request_date = None
    if last_request_str:
        try:
            if isinstance(last_request_str, str):
                last_request_dt = datetime.fromisoformat(last_request_str.replace('Z', '+00:00')).astimezone(TIMEZONE)
            elif isinstance(last_request_str, datetime):
                last_request_dt = last_request_str.astimezone(TIMEZONE)
            else:
                last_request_dt = None
            if last_request_dt:
                last_request_date = last_request_dt.date()
        except Exception as e:
            logger.error(f"Error parsing last_request timestamp '{last_request_str}' for user {user_id}: {e}")
            last_request_date = None

    if user_id not in NO_CARD_LIMIT_USERS and last_request_date == today:
        text = f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ." if name else "–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ."
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id (–∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp)
    session_id = int(now.timestamp())

    # –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–µ—Å—É—Ä—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    text = f"{name}, –∫–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–µ–π—á–∞—Å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å:" if name else "–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–µ–π—á–∞—Å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å:"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üòä –•–æ—Ä–æ—à–æ", callback_data=f"resource_initial_good_{session_id}"),
            types.InlineKeyboardButton(text="üòê –°—Ä–µ–¥–Ω–µ", callback_data=f"resource_initial_medium_{session_id}"),
            types.InlineKeyboardButton(text="üòî –ù–∏–∑–∫–æ", callback_data=f"resource_initial_low_{session_id}")
        ]
    ])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_initial_resource)
    await state.update_data(session_id=session_id)
    await logger_service.log_action(user_id, "card_request_initiated", {"session_id": session_id})

async def process_initial_resource(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    callback_data = callback.data
    data = await state.get_data()
    session_id = data.get("session_id")

    try:
        parts = callback_data.split("_")
        if len(parts) != 4 or parts[0] != "resource" or parts[1] != "initial":
            raise ValueError("Invalid callback data format")
        resource_state = parts[2]  # good, medium, low
        callback_session_id = int(parts[3])
        if callback_session_id != session_id:
            raise ValueError("Session ID mismatch")
        
        state_map = {
            "good": "üòä",
            "medium": "üòê",
            "low": "üòî"
        }
        resource_emoji = state_map.get(resource_state)
        if not resource_emoji:
            raise ValueError("Invalid resource state")

        db.save_resource_state(user_id, session_id, resource_emoji)
        await logger_service.log_action(user_id, "initial_resource", {"session_id": session_id, "state": resource_emoji})

        # –®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
        text = (
            f"{name}, –∫–∞–∫ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—Å–∞–≤ –∑–∞–ø—Ä–æ—Å, —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º ‚Äî —è —Å–º–æ–≥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–µ–≥–æ."
            if name else
            "–ö–∞–∫ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—Å–∞–≤ –∑–∞–ø—Ä–æ—Å, —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º ‚Äî —è —Å–º–æ–≥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–µ–≥–æ."
        )
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ–≤–µ", callback_data=f"scenario_mental_{session_id}")],
            [types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"scenario_written_{session_id}")]
        ])
        await callback.message.answer(text, reply_markup=keyboard)
        await state.set_state(UserState.waiting_for_scenario_choice)
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error processing initial resource for user {user_id}: {e}")
        await callback.message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

async def process_scenario_choice(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    callback_data = callback.data
    data = await state.get_data()
    session_id = data.get("session_id")

    try:
        parts = callback_data.split("_")
        if len(parts) != 3 or parts[0] != "scenario":
            raise ValueError("Invalid callback data format")
        scenario = parts[1]  # mental, written
        callback_session_id = int(parts[2])
        if callback_session_id != session_id:
            raise ValueError("Session ID mismatch")

        await logger_service.log_action(user_id, "scenario_choice", {"session_id": session_id, "scenario": scenario})

        if scenario == "mental":
            text = f"{name}, —Ö–æ—Ä–æ—à–æ, –¥–µ—Ä–∂–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –≥–æ–ª–æ–≤–µ. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É!" if name else "–•–æ—Ä–æ—à–æ, –¥–µ—Ä–∂–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –≥–æ–ª–æ–≤–µ. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É!"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"draw_card_{session_id}")]
            ])
            await callback.message.answer(text, reply_markup=keyboard)
            await state.set_state(UserState.waiting_for_card_draw)
        elif scenario == "written":
            text = f"{name}, –Ω–∞–ø–∏—à–∏, –æ —á—ë–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å —Å –∫–∞—Ä—Ç–æ–π —Å–µ–≥–æ–¥–Ω—è." if name else "–ù–∞–ø–∏—à–∏, –æ —á—ë–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å —Å –∫–∞—Ä—Ç–æ–π —Å–µ–≥–æ–¥–Ω—è."
            await callback.message.answer(text)
            await state.set_state(UserState.waiting_for_request_text)
        else:
            raise ValueError("Invalid scenario")

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error processing scenario choice for user {user_id}: {e}")
        await callback.message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

async def draw_card(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    now_iso = datetime.now(TIMEZONE).isoformat()
    data = await state.get_data()
    session_id = data.get("session_id")

    try:
        parts = callback.data.split("_")
        if len(parts) != 3 or parts[0] != "draw":
            raise ValueError("Invalid callback data format")
        callback_session_id = int(parts[2])
        if callback_session_id != session_id:
            raise ValueError("Session ID mismatch")

        used_cards = db.get_user_cards(user_id)
        all_cards = list(range(1, 41))
        available_cards = [c for c in all_cards if c not in used_cards]

        if not available_cards:
            logger.info(f"Card deck reset for user {user_id}")
            db.reset_user_cards(user_id)
            available_cards = all_cards.copy()

        card_number = random.choice(available_cards)
        db.add_user_card(user_id, card_number)
        db.update_user(user_id, {"last_request": now_iso})

        card_path = f"cards/card_{card_number}.jpg"
        if os.path.exists(card_path):
            await callback.message.bot.send_photo(
                user_id,
                types.FSInputFile(card_path),
                protect_content=True
            )
            text = f"{name}, –≤–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É. –ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º? –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏." if name else "–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É. –ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º? –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏."
            await callback.message.answer(text)
            await state.update_data(card_number=card_number, user_request="")
            await state.set_state(UserState.waiting_for_initial_response)
            await logger_service.log_action(user_id, "card_drawn", {"session_id": session_id, "card_number": card_number})
        else:
            logger.error(f"Card image not found: {card_path}")
            await callback.message.answer("–ö–∞–∂–µ—Ç—Å—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –µ—â–µ —Ä–∞–∑.", reply_markup=await get_main_menu(user_id, db))
            await state.clear()

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error drawing card for user {user_id}: {e}")
        await callback.message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

async def process_request_text(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    request_text = message.text.strip()
    now_iso = datetime.now(TIMEZONE).isoformat()
    data = await state.get_data()
    session_id = data.get("session_id")

    try:
        if not request_text:
            raise ValueError("Empty request text")

        used_cards = db.get_user_cards(user_id)
        all_cards = list(range(1, 41))
        available_cards = [c for c in all_cards if c not in used_cards]

        if not available_cards:
            logger.info(f"Card deck reset for user {user_id}")
            db.reset_user_cards(user_id)
            available_cards = all_cards.copy()

        card_number = random.choice(available_cards)
        db.add_user_card(user_id, card_number)
        db.update_user(user_id, {"last_request": now_iso})

        card_path = f"cards/card_{card_number}.jpg"
        if os.path.exists(card_path):
            await message.bot.send_photo(
                user_id,
                types.FSInputFile(card_path),
                protect_content=True
            )
            text = f"{name}, –≤–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{request_text}'. –†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∞ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?" if name else f"–í–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{request_text}'. –†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∞ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?"
            await message.answer(text)
            await state.update_data(card_number=card_number, user_request=request_text)
            await state.set_state(UserState.waiting_for_initial_response)
            await logger_service.log_action(user_id, "card_drawn_with_request", {"session_id": session_id, "card_number": card_number, "request": request_text})
        else:
            logger.error(f"Card image not found: {card_path}")
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –µ—â–µ —Ä–∞–∑.", reply_markup=await get_main_menu(user_id, db))
            await state.clear()

    except Exception as e:
        logger.error(f"Error processing request text for user {user_id}: {e}")
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()

async def process_initial_response(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    response_text = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    session_id = data.get("session_id")

    try:
        if not response_text:
            raise ValueError("Empty initial response")

        await logger_service.log_action(user_id, "initial_response", {"session_id": session_id, "card_number": card_number, "request": user_request, "response": response_text})

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä: –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏! –•–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è –¥–∞–ª—å—à–µ?" if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏! –•–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è –¥–∞–ª—å—à–µ?"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"scenario_end_{session_id}")],
            [types.InlineKeyboardButton(text="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ", callback_data=f"scenario_continue_{session_id}")]
        ])
        await message.answer(text, reply_markup=keyboard)
        await state.update_data(initial_response=response_text)
        await state.set_state(UserState.waiting_for_continue_choice)

    except Exception as e:
        logger.error(f"Error processing initial response for user {user_id}: {e}")
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()

async def process_continue_choice(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    callback_data = callback.data
    data = await state.get_data()
    session_id = data.get("session_id")
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    initial_response = data.get("initial_response", "")

    try:
        parts = callback_data.split("_")
        if len(parts) != 3 or parts[0] != "scenario":
            raise ValueError("Invalid callback data format")
        choice = parts[1]  # end, continue
        callback_session_id = int(parts[2])
        if callback_session_id != session_id:
            raise ValueError("Session ID mismatch")

        await logger_service.log_action(user_id, "continue_choice", {"session_id": session_id, "choice": choice})

        if choice == "end":
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer("–•–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–æ–π. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è! üôè", reply_markup=await get_main_menu(user_id, db))
            await process_final_resource(callback.message, state, db, logger_service, card_number, session_id)
        elif choice == "continue":
            await callback.message.bot.send_chat_action(user_id, 'typing')
            grok_question = await get_grok_question(user_id, user_request, initial_response, "–ù–∞—á–∞–ª–æ", step=1, db=db)
            await logger_service.log_action(user_id, "grok_question", {"session_id": session_id, "step": 1, "grok_question": grok_question})
            await callback.message.answer(grok_question)
            await state.update_data(first_grok_question=grok_question)
            await state.set_state(UserState.waiting_for_first_grok_response)
            await callback.message.edit_reply_markup(reply_markup=None)
        else:
            raise ValueError("Invalid continue choice")

        await callback.answer()

    except Exception as e:
        logger.error(f"Error processing continue choice for user {user_id}: {e}")
        await callback.message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

async def process_first_grok_response(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    first_response = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    first_grok_question = data.get("first_grok_question", "")
    session_id = data.get("session_id")

    try:
        if not first_response:
            raise ValueError("Empty first response")

        await message.bot.send_chat_action(message.from_user.id, 'typing')
        await logger_service.log_action(user_id, "first_grok_response", {"session_id": session_id, "card_number": card_number, "request": user_request, "question": first_grok_question, "response": first_response})
        previous_responses_context = {
            "first_question": first_grok_question,
            "first_response": first_response
        }
        second_grok_question = await get_grok_question(user_id, user_request, first_response, "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ", step=2, previous_responses=previous_responses_context, db=db)
        await logger_service.log_action(user_id, "grok_question", {"session_id": session_id, "step": 2, "grok_question": second_grok_question})
        await message.answer(second_grok_question)
        await state.update_data(second_grok_question=second_grok_question, previous_responses=previous_responses_context)
        await state.set_state(UserState.waiting_for_second_grok_response)

    except Exception as e:
        logger.error(f"Error processing first grok response for user {user_id}: {e}")
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()

async def process_second_grok_response(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    second_response = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    second_grok_question = data.get("second_grok_question", "")
    previous_responses_context = data.get("previous_responses", {})
    session_id = data.get("session_id")

    try:
        if not second_response:
            raise ValueError("Empty second response")

        await logger_service.log_action(user_id, "second_grok_response", {"session_id": session_id, "card_number": card_number, "request": user_request, "question": second_grok_question, "response": second_response})
        previous_responses_context["second_question"] = second_grok_question
        previous_responses_context["second_response"] = second_response
        third_grok_question = await get_grok_question(user_id, user_request, second_response, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", step=3, previous_responses=previous_responses_context, db=db)
        await logger_service.log_action(user_id, "grok_question", {"session_id": session_id, "step": 3, "grok_question": third_grok_question})
        await message.answer(third_grok_question)
        await state.update_data(third_grok_question=third_grok_question, previous_responses=previous_responses_context)
        await state.set_state(UserState.waiting_for_third_grok_response)

    except Exception as e:
        logger.error(f"Error processing second grok response for user {user_id}: {e}")
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()

async def process_third_grok_response(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    third_response = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", 0)
    user_request = data.get("user_request", "")
    third_grok_question = data.get("third_grok_question", "")
    previous_responses_context = data.get("previous_responses", {})
    session_id = data.get("session_id")

    try:
        if not third_response:
            raise ValueError("Empty third response")

        await logger_service.log_action(user_id, "third_grok_response", {"session_id": session_id, "card_number": card_number, "request": user_request, "question": third_grok_question, "response": third_response})

        interaction_summary_data = {
            "user_request": user_request,
            "card_number": card_number,
            "initial_response": data.get("initial_response", "N/A"),
            "qna": [
                {"question": previous_responses_context.get("first_question", ""), "answer": previous_responses_context.get("first_response", "")},
                {"question": previous_responses_context.get("second_question", ""), "answer": previous_responses_context.get("second_response", "")},
                {"question": third_grok_question, "answer": third_response}
            ]
        }
        interaction_summary_data["qna"] = [item for item in interaction_summary_data["qna"] if item.get("question") and item.get("answer")]

        await message.bot.send_chat_action(message.from_user.id, 'typing')
        summary_text = await get_grok_summary(user_id, interaction_summary_data, db)

        if summary_text and not summary_text.startswith("–û—à–∏–±–∫–∞") and not summary_text.startswith("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é") and not summary_text.startswith("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å"):
            await message.answer(f"‚ú® –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã:\n{summary_text}")
            await logger_service.log_action(user_id, "summary_sent", {"session_id": session_id, "summary": summary_text})
        else:
            await logger_service.log_action(user_id, "summary_failed", {"session_id": session_id, "error_message": summary_text})

        await message.bot.send_chat_action(message.from_user.id, 'typing')
        try:
            await build_user_profile(user_id, db)
            logger.info(f"User profile updated after interaction for user {user_id}")
        except Exception as e:
            logger.error(f"Failed to update user profile for user {user_id} after interaction: {e}")

        await process_final_resource(message, state, db, logger_service, card_number, session_id)

    except Exception as e:
        logger.error(f"Error processing third grok response for user {user_id}: {e}")
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()

async def process_final_resource(message: types.Message, state: FSMContext, db, logger_service, card_number, session_id):
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")

    text = f"{name}, –∫–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Ç–µ–ø–µ—Ä—å? –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å?" if name else "–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Ç–µ–ø–µ—Ä—å? –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å?"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üòä –•–æ—Ä–æ—à–æ", callback_data=f"resource_final_good_{session_id}"),
            types.InlineKeyboardButton(text="üòê –°—Ä–µ–¥–Ω–µ", callback_data=f"resource_final_medium_{session_id}"),
            types.InlineKeyboardButton(text="üòî –ù–∏–∑–∫–æ", callback_data=f"resource_final_low_{session_id}")
        ]
    ])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_final_resource)
    await state.update_data(card_number=card_number)

async def process_final_resource_response(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    callback_data = callback.data
    data = await state.get_data()
    session_id = data.get("session_id")
    card_number = data.get("card_number", 0)

    try:
        parts = callback_data.split("_")
        if len(parts) != 4 or parts[0] != "resource" or parts[1] != "final":
            raise ValueError("Invalid callback data format")
        resource_state = parts[2]
        callback_session_id = int(parts[3])
        if callback_session_id != session_id:
            raise ValueError("Session ID mismatch")

        state_map = {
            "good": "üòä",
            "medium": "üòê",
            "low": "üòî"
        }
        resource_emoji = state_map.get(resource_state)
        if not resource_emoji:
            raise ValueError("Invalid resource state")

        await logger_service.log_action(user_id, "final_resource", {"session_id": session_id, "state": resource_emoji})

        if resource_state == "low":
            await callback.message.bot.send_chat_action(user_id, 'typing')
            supportive_message = await get_supportive_message(user_id, db)
            await callback.message.answer(supportive_message)
            await callback.message.answer(f"{name}, —á—Ç–æ –æ–±—ã—á–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã?" if name else "–ß—Ç–æ –æ–±—ã—á–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã?")
            db.update_resource_final_state(user_id, session_id, resource_emoji)
            await state.set_state(UserState.waiting_for_recovery_method)
        else:
            db.update_resource_final_state(user_id, session_id, resource_emoji)
            await callback.message.answer(f"{name}, –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å! üôè" if name else "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å! üôè", reply_markup=await get_main_menu(user_id, db))
            feedback_text = f"{name}, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?" if name else "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?"
            feedback_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üëç –ü–æ–º–æ–≥–ª–æ", callback_data=f"feedback_v2_helped_{card_number}")],
                [types.InlineKeyboardButton(text="ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"feedback_v2_interesting_{card_number}")],
                [types.InlineKeyboardButton(text="üòï –ù–µ —Ö–≤–∞—Ç–∏–ª–æ –≥–ª—É–±–∏–Ω—ã", callback_data=f"feedback_v2_notdeep_{card_number}")]
            ])
            await callback.message.answer(feedback_text, reply_markup=feedback_keyboard)
            await state.set_state(UserState.waiting_for_card_feedback)

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error processing final resource for user {user_id}: {e}")
        await callback.message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer()

async def process_recovery_method(message: types.Message, state: FSMContext, db, logger_service):
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    recovery_method = message.text.strip()
    data = await state.get_data()
    session_id = data.get("session_id")
    card_number = data.get("card_number", 0)

    try:
        if not recovery_method:
            raise ValueError("Empty recovery method")

        db.update_resource_final_state(user_id, session_id, "üòî", recovery_method)
        await logger_service.log_action(user_id, "recovery_method", {"session_id": session_id, "method": recovery_method})

        await message.answer(f"{name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –Ø –∑–∞–ø–æ–º–Ω—é. üôè" if name else "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –Ø –∑–∞–ø–æ–º–Ω—é. üôè", reply_markup=await get_main_menu(user_id, db))
        feedback_text = f"{name}, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?" if name else "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?"
        feedback_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üëç –ü–æ–º–æ–≥–ª–æ", callback_data=f"feedback_v2_helped_{card_number}")],
            [types.InlineKeyboardButton(text="ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"feedback_v2_interesting_{card_number}")],
            [types.InlineKeyboardButton(text="üòï –ù–µ —Ö–≤–∞—Ç–∏–ª–æ –≥–ª—É–±–∏–Ω—ã", callback_data=f"feedback_v2_notdeep_{card_number}")]
        ])
        await message.answer(feedback_text, reply_markup=feedback_keyboard)
        await state.set_state(UserState.waiting_for_card_feedback)

    except Exception as e:
        logger.error(f"Error processing recovery method for user {user_id}: {e}")
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å '‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è'.", reply_markup=await get_main_menu(user_id, db))
        await state.clear()

async def process_card_feedback(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    callback_data = callback.data
    feedback_type = "unknown"
    card_number = 0

    try:
        parts = callback_data.split('_')
        if len(parts) >= 4 and parts[0] == 'feedback' and parts[1] == 'v2':
            feedback_type = parts[2]
            try:
                card_number = int(parts[-1])
            except ValueError:
                logger.error(f"Could not parse card number from feedback callback data: {callback_data}")
                card_number = 0

            if feedback_type == "helped":
                text = "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –Ω–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω–æ–π. üòä –ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞!"
            elif feedback_type == "interesting":
                text = "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ —É–≥–ª—ã –∑—Ä–µ–Ω–∏—è - —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üëç"
            elif feedback_type == "notdeep":
                text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è." if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."
            else:
                logger.warning(f"Unknown feedback_v2 type: {feedback_type} in {callback_data}")
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
                return

            await logger_service.log_action(user_id, "interaction_feedback", {"card_session": card_number, "feedback": feedback_type})
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer(text, reply_markup=await get_main_menu(user_id, db))
            await state.clear()
            await callback.answer()

        elif callback_data.startswith("feedback_yes_") or callback_data.startswith("feedback_no_"):
            logger.warning(f"Received old format feedback callback: {callback_data}")
            await callback.answer("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
            return

        else:
            logger.warning(f"Unknown feedback callback data format: {callback_data}")
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
            return

    except Exception as e:
        logger.error(f"Error processing interaction feedback for user {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        try:
            await state.clear()
        except Exception as clear_err:
            logger.error(f"Failed to clear state after feedback error: {clear_err}")
