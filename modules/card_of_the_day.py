# –∫–æ–¥/card_of_the_day.py

import random
import os
from aiogram import types
from aiogram.fsm.context import FSMContext
from config import TIMEZONE, NO_CARD_LIMIT_USERS, DATA_DIR
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ ai_service
from .ai_service import (
    get_grok_question, get_grok_summary, build_user_profile,
    get_grok_supportive_message
)
from datetime import datetime, date # –î–æ–±–∞–≤–∏–ª–∏ date
from modules.user_management import UserState
from database.db import Database
import logging

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ callback -> emoji/text
RESOURCE_LEVELS = {
    "resource_good": "üòä –•–æ—Ä–æ—à–æ",
    "resource_medium": "üòê –°—Ä–µ–¥–Ω–µ",
    "resource_low": "üòî –ù–∏–∑–∫–æ",
}
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∞–º–∏
CARDS_DIR = os.path.join(DATA_DIR, "cards") if DATA_DIR != "/data" else "cards"
if not CARDS_DIR.startswith("/data") and not os.path.exists(CARDS_DIR):
     os.makedirs(CARDS_DIR, exist_ok=True)
     logger.warning(f"Cards directory '{CARDS_DIR}' did not exist and was created. Make sure card images are present.")


# --- –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –≠–¢–£ –í–ï–†–°–ò–Æ get_main_menu ---
async def get_main_menu(user_id, db: Database):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    keyboard = [
        [types.KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")],
        [types.KeyboardButton(text="üåô –ò—Ç–æ–≥ –¥–Ω—è")]
    ]
    try:
        user_data = db.get_user(user_id)
        if user_data and user_data.get("bonus_available"):
            keyboard.insert(1, [types.KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    except Exception as e:
        logger.error(f"Error getting user data for main menu (user {user_id}): {e}", exc_info=True)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º persistent=True –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)
# --- –ö–û–ù–ï–¶ get_main_menu ---

# ================================
# === –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –ö–ê–†–¢–´ –î–ù–Ø ===
# ================================

# --- –®–∞–≥ 0: –ù–∞—á–∞–ª–æ —Ñ–ª–æ—É ---
async def handle_card_request(message: types.Message, state: FSMContext, db: Database, logger_service):
    """
    –°–¢–ê–†–¢–û–í–ê–Ø –¢–û–ß–ö–ê —Å—Ü–µ–Ω–∞—Ä–∏—è '–ö–∞—Ä—Ç–∞ –¥–Ω—è'.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞.
    """
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    now = datetime.now(TIMEZONE)
    today = now.date()

    logger.info(f"User {user_id}: Checking card availability for {today}")
    # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º today –∫–∞–∫ –æ–±—ä–µ–∫—Ç date
    card_available = db.is_card_available(user_id, today)
    logger.info(f"User {user_id}: Card available? {card_available}")

    if user_id not in NO_CARD_LIMIT_USERS and not card_available:
        last_req_time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        # last_request –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å datetime –∏–ª–∏ None –ø–æ—Å–ª–µ get_user
        if user_data and isinstance(user_data.get('last_request'), datetime):
            try:
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                last_req_dt_local = user_data['last_request'].astimezone(TIMEZONE)
                last_req_time_str = last_req_dt_local.strftime('%H:%M %d.%m.%Y')
            except Exception as e:
                logger.error(f"Error formatting last_request time for user {user_id}: {e}")
                last_req_time_str = "–æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"

        text = (
            f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è (–≤ {last_req_time_str} –ú–°–ö)! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞. ‚ú®"
            if name else
            f"–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è (–≤ {last_req_time_str} –ú–°–ö)! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞. ‚ú®"
        )
        logger.info(f"User {user_id}: Sending 'already drawn' message.")
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        return

    logger.info(f"User {user_id}: Card available, starting initial resource check.")
    await logger_service.log_action(user_id, "card_flow_started", {"trigger": "button"})
    await ask_initial_resource(message, state, db, logger_service)

# --- –®–∞–≥ 1: –ó–∞–º–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ---
async def ask_initial_resource(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 1: –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ—Å—É—Ä—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""

    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! ‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:" if name else "–ü—Ä–∏–≤–µ—Ç! ‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:"

    buttons = [
        types.InlineKeyboardButton(text=label.split()[0], callback_data=key)
        for key, label in RESOURCE_LEVELS.items()
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_initial_resource)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–∞–≥–∞ 1 ---
async def process_initial_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 1.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id
    resource_choice_key = callback.data
    resource_choice_label = RESOURCE_LEVELS.get(resource_choice_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await state.update_data(initial_resource=resource_choice_label)
    await logger_service.log_action(user_id, "initial_resource_selected", {"resource": resource_choice_label})

    await callback.answer(f"–ü–æ–Ω—è–ª, —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {resource_choice_label.split()[0]}")
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
         logger.warning(f"Could not edit message reply markup (initial resource) for user {user_id}: {e}")

    await ask_request_type_choice(callback, state, db, logger_service)

# --- –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
async def ask_request_type_choice(event: types.Message | types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 2: –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."""
    if isinstance(event, types.CallbackQuery):
        user_id = event.from_user.id
        message = event.message
    else:
        user_id = event.from_user.id
        message = event

    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""

    text = (f"{name}, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è.\n" if name else "–¢–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è.\n") + ("–ö–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?\n\n1Ô∏è‚É£ –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å <b>–≤ —É–º–µ</b>?\n2Ô∏è‚É£ <b>–ù–∞–ø–∏—Å–∞—Ç—å</b> –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ —á–∞—Ç?\n\n<i>(–ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å, —è —Å–º–æ–≥—É –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–≤–æ–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º ‚ú®).</i>")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="1Ô∏è‚É£ –í —É–º–µ", callback_data="request_type_mental"),
        types.InlineKeyboardButton(text="2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data="request_type_typed"),
    ]])

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_request_type_choice)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–∞–≥–∞ 2 ---
async def process_request_type_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 2.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id # <<< –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–ª–±—ç–∫–∞
    request_type = callback.data
    choice_text = "–í —É–º–µ" if request_type == "request_type_mental" else "–ù–∞–ø–∏—Å–∞—Ç—å"

    await state.update_data(request_type=request_type)
    await logger_service.log_action(user_id, "request_type_chosen", {"choice": choice_text})

    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (request type) for user {user_id}: {e}")

    if request_type == "request_type_mental":
        await callback.answer("–•–æ—Ä–æ—à–æ, –¥–µ—Ä–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ –≥–æ–ª–æ–≤–µ.")
        await callback.message.answer("–ü–æ–Ω—è–ª. –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç—É...")
        # –ü–µ—Ä–µ–¥–∞–µ–º user_id —è–≤–Ω–æ
        await draw_card_direct(callback.message, state, db, logger_service, user_id=user_id)
    elif request_type == "request_type_typed":
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –∂–¥—É —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.")
        await callback.message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∫–∞—Ä—Ç–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")
        await state.set_state(UserState.waiting_for_request_text_input)

# --- –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ---
async def process_request_text(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 3–∞: –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—É."""
    user_id = message.from_user.id # <<< ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    request_text = message.text.strip()

    if not request_text: await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º..."); return
    if len(request_text) < 5: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."); return

    await state.update_data(user_request=request_text)
    await logger_service.log_action(user_id, "request_text_provided", {"request": request_text})
    await message.answer("–°–ø–∞—Å–∏–±–æ! ‚ú® –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    # –ü–µ—Ä–µ–¥–∞–µ–º user_id —è–≤–Ω–æ
    await draw_card_direct(message, state, db, logger_service, user_id=user_id)

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º user_id) ---
async def draw_card_direct(message: types.Message, state: FSMContext, db: Database, logger_service, user_id: int):
    """
    –®–∞–≥ 3b / –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –®–∞–≥–∞ 3–∞:
    –í—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–± –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_initial_response.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id
    user_data_fsm = await state.get_data()
    user_request = user_data_fsm.get("user_request", "")
    user_db_data = db.get_user(user_id) or {} # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É ID
    name = user_db_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    now_iso = datetime.now(TIMEZONE).isoformat()

    try:
         db.update_user(user_id, {"last_request": now_iso}) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID
    except Exception as e:
         logger.error(f"Failed to update last_request time for user {user_id}: {e}", exc_info=True)

    card_number = None
    try:
        used_cards = db.get_user_cards(user_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
        all_card_files = [f for f in os.listdir(CARDS_DIR) if f.startswith("card_") and f.endswith(".jpg")]
        if not all_card_files: logger.error(f"No card images..."); await message.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç..."); await state.clear(); return

        all_cards = []
        for fname in all_card_files:
             try: num = int(fname.replace("card_", "").replace(".jpg", "")); all_cards.append(num)
             except ValueError: logger.warning(f"Could not parse card number from: {fname}"); continue
        if not all_cards: logger.error(f"Could not parse any card numbers..."); await message.answer("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∫–∞—Ä—Ç..."); await state.clear(); return

        available_cards = [c for c in all_cards if c not in used_cards]
        if not available_cards:
            logger.info(f"Card deck reset for user {user_id}. Used cards were: {used_cards}")
            db.reset_user_cards(user_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
            available_cards = all_cards.copy()
        if not available_cards: logger.error(f"No available cards..."); await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É..."); await state.clear(); return

        card_number = random.choice(available_cards)
        db.add_user_card(user_id, card_number) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
        await state.update_data(card_number=card_number)

    except Exception as card_logic_err:
         logger.error(f"Error during card selection logic for user {user_id}: {card_logic_err}", exc_info=True)
         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã..."); await state.clear(); return

    card_path = os.path.join(CARDS_DIR, f"card_{card_number}.jpg")
    if not os.path.exists(card_path):
        logger.error(f"Card image file not found: {card_path} for user {user_id}")
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å..."); await state.clear(); return

    try:
        await message.bot.send_chat_action(message.chat.id, 'upload_photo')
        await message.answer_photo(types.FSInputFile(card_path), protect_content=True)
        await logger_service.log_action(user_id, "card_drawn", {"card_number": card_number, "request_provided": bool(user_request)}) # –õ–æ–≥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id

        if user_request:
            text = (f"{name}, –≤–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n<i>¬´{user_request}¬ª</i>\n\n–†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º?" if name else f"–í–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n<i>¬´{user_request}¬ª</i>\n\n–†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º?")
        else:
            text = (f"{name}, –≤–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è.\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –Ω–µ–µ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º?" if name else f"–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è.\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –Ω–µ–µ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º?")

        await message.answer(text)
        await state.set_state(UserState.waiting_for_initial_response)

    except Exception as e:
        logger.error(f"Failed to send card photo or initial question to user {user_id}: {e}", exc_info=True)
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å..."); await state.clear()

# --- –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ ---
async def process_initial_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 4.5: –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä: –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ."""
    user_id = message.from_user.id
    initial_response_text = message.text.strip()
    if not initial_response_text: await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞..."); return
    if len(initial_response_text) < 3: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."); return
    data = await state.get_data(); card_number = data.get("card_number", "N/A"); user_request = data.get("user_request", "")
    await state.update_data(initial_response=initial_response_text)
    await logger_service.log_action(user_id, "initial_response_provided", {"card_number": card_number, "request": user_request, "response": initial_response_text})
    await ask_exploration_choice(message, state, db, logger_service)

# --- –®–∞–≥ 5: –í—ã–±–æ—Ä - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ? ---
async def ask_exploration_choice(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 5: –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–∞–ª—å—à–µ —Å –ø–æ–º–æ—â—å—é Grok."""
    user_id = message.from_user.id; user_data = db.get_user(user_id) or {}; name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""
    text = (f"{name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –•–æ—á–µ—à—å –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–ª—É–±–∂–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –º–µ–Ω—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ 5-7 –º–∏–Ω—É—Ç)?" if name else "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –•–æ—á–µ—à—å –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–ª—É–±–∂–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –º–µ–Ω—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ 5-7 –º–∏–Ω—É—Ç)?")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –î–∞, –¥–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º", callback_data="explore_yes")], [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç", callback_data="explore_no")]])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_exploration_choice)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–∞–≥–∞ 5 ---
async def process_exploration_choice_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 5.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏."""
    user_id = callback.from_user.id; choice = callback.data
    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (exploration choice) for user {user_id}: {e}")
    if choice == "explore_yes":
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å..."); await logger_service.log_action(user_id, "exploration_chosen", {"choice": "yes"})
        await ask_grok_question(callback.message, state, db, logger_service, step=1, user_id=user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id
    elif choice == "explore_no":
        await callback.answer("–•–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–æ–π."); await logger_service.log_action(user_id, "exploration_chosen", {"choice": "no"})
        await generate_and_send_summary(callback.message, state, db, logger_service); await finish_interaction_flow(callback.message, state, db, logger_service)

# --- –®–∞–≥ 6: –¶–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤ Grok ---
async def ask_grok_question(message: types.Message, state: FSMContext, db: Database, logger_service, step: int, user_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –æ—Ç Grok –¥–ª—è —à–∞–≥–∞ step."""
    data = await state.get_data(); user_request = data.get("user_request", ""); initial_response = data.get("initial_response", "")
    previous_responses_context = { "initial_response": initial_response }
    if step > 1: previous_responses_context["grok_question_1"] = data.get("grok_question_1"); previous_responses_context["first_grok_response"] = data.get("first_grok_response")
    if step > 2: previous_responses_context["grok_question_2"] = data.get("grok_question_2"); previous_responses_context["second_grok_response"] = data.get("second_grok_response")
    if step == 1: current_user_response = initial_response
    elif step == 2: current_user_response = data.get("first_grok_response", "")
    elif step == 3: current_user_response = data.get("second_grok_response", "")
    else: logger.error(f"Invalid step number {step}..."); await message.answer("..."); await state.clear(); return
    if not current_user_response: logger.error(f"Missing user response for step {step}..."); await message.answer("..."); await state.clear(); return
    await message.bot.send_chat_action(user_id, 'typing')
    grok_question = await get_grok_question(user_id=user_id, user_request=user_request, user_response=current_user_response, feedback_type="exploration", step=step, previous_responses=previous_responses_context, db=db)
    await state.update_data({f"grok_question_{step}": grok_question}); await logger_service.log_action(user_id, "grok_question_asked", {"step": step, "question": grok_question})
    await message.answer(grok_question)
    next_state = None
    if step == 1: next_state = UserState.waiting_for_first_grok_response
    elif step == 2: next_state = UserState.waiting_for_second_grok_response
    elif step == 3: next_state = UserState.waiting_for_third_grok_response
    if next_state: await state.set_state(next_state)
    else: logger.error(f"Invalid step {step}..."); await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã Grok ---
async def process_first_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 6a: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ü–ï–†–í–´–ô –≤–æ–ø—Ä–æ—Å Grok –∏ –∑–∞–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–π."""
    user_id = message.from_user.id; first_response = message.text.strip(); data = await state.get_data(); first_grok_question = data.get("grok_question_1", "N/A"); card_number = data.get("card_number", "N/A"); user_request = data.get("user_request", "")
    if not first_response or len(first_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    await state.update_data(first_grok_response=first_response); await logger_service.log_action(user_id, "grok_response_provided", {"step": 1, "question": first_grok_question, "response": first_response, "card": card_number, "request": user_request})
    await ask_grok_question(message, state, db, logger_service, step=2, user_id=user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id

async def process_second_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 6b: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –í–¢–û–†–û–ô –≤–æ–ø—Ä–æ—Å Grok –∏ –∑–∞–¥–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π."""
    user_id = message.from_user.id; second_response = message.text.strip(); data = await state.get_data(); second_grok_question = data.get("grok_question_2", "N/A"); card_number = data.get("card_number", "N/A"); user_request = data.get("user_request", "")
    if not second_response or len(second_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    await state.update_data(second_grok_response=second_response); await logger_service.log_action(user_id, "grok_response_provided", {"step": 2, "question": second_grok_question, "response": second_response, "card": card_number, "request": user_request})
    await ask_grok_question(message, state, db, logger_service, step=3, user_id=user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id

async def process_third_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 6c: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –¢–†–ï–¢–ò–ô –≤–æ–ø—Ä–æ—Å Grok, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é."""
    user_id = message.from_user.id; third_response = message.text.strip(); data = await state.get_data(); third_grok_question = data.get("grok_question_3", "N/A"); card_number = data.get("card_number", "N/A"); user_request = data.get("user_request", "")
    if not third_response or len(third_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    await state.update_data(third_grok_response=third_response); await logger_service.log_action(user_id, "grok_response_provided", {"step": 3, "question": third_grok_question, "response": third_response, "card": card_number, "request": user_request})
    await generate_and_send_summary(message, state, db, logger_service)
    try: await build_user_profile(user_id, db); logger.info(f"User profile updated after full Grok interaction for user {user_id}")
    except Exception as e: logger.error(f"Failed to update user profile after interaction: {e}", exc_info=True)
    await finish_interaction_flow(message, state, db, logger_service)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏ ---
async def generate_and_send_summary(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = message.from_user.id; data = await state.get_data()
    logger.info(f"Starting summary generation for user {user_id}"); await message.bot.send_chat_action(user_id, 'typing')
    interaction_summary_data = {"user_request": data.get("user_request", ""), "card_number": data.get("card_number", "N/A"), "initial_response": data.get("initial_response"), "qna": [{"question": data.get("grok_question_1"), "answer": data.get("first_grok_response")}, {"question": data.get("grok_question_2"), "answer": data.get("second_grok_response")}, {"question": data.get("grok_question_3"), "answer": data.get("third_grok_response")}]}
    interaction_summary_data["qna"] = [item for item in interaction_summary_data["qna"] if item.get("question") and item.get("answer")]
    summary_text = await get_grok_summary(user_id, interaction_summary_data, db)
    if summary_text and not summary_text.startswith("–û—à–∏–±–∫–∞") and not summary_text.startswith("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é") and not summary_text.startswith("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å"):
        await message.answer(f"‚ú® –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã:\n\n<i>{summary_text}</i>"); await logger_service.log_action(user_id, "summary_sent", {"summary": summary_text})
    else:
        await logger_service.log_action(user_id, "summary_failed", {"error_message": summary_text}); await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è!")

# --- –®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞ ---
async def finish_interaction_flow(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 7: –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞."""
    user_id = message.from_user.id; user_data = db.get_user(user_id) or {}; name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""; data = await state.get_data(); initial_resource = data.get("initial_resource", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    text = (f"{name}, –Ω–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. üôè\n–¢—ã –Ω–∞—á–∞–ª–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '{initial_resource}'.\n\n–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è <b>—Å–µ–π—á–∞—Å</b>? –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Å—É—Ä—Å–∞?" if name else f"–ù–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. üôè\n–¢—ã –Ω–∞—á–∞–ª–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '{initial_resource}'.\n\n–ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è <b>—Å–µ–π—á–∞—Å</b>? –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Å—É—Ä—Å–∞?")
    buttons = [types.InlineKeyboardButton(text=label.split()[0], callback_data=key) for key, label in RESOURCE_LEVELS.items()]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(text, reply_markup=keyboard); await state.set_state(UserState.waiting_for_final_resource)

# --- –®–∞–≥ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ---
async def process_final_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 7.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞."""
    user_id = callback.from_user.id; resource_choice_key = callback.data; resource_choice_label = RESOURCE_LEVELS.get(resource_choice_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    await state.update_data(final_resource=resource_choice_label); await logger_service.log_action(user_id, "final_resource_selected", {"resource": resource_choice_label})
    await callback.answer(f"–ü–æ–Ω—è–ª, —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–π—á–∞—Å: {resource_choice_label.split()[0]}")
    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (final resource) for user {user_id}: {e}")
    if resource_choice_key == "resource_low":
        await callback.message.answer("–ú–Ω–µ –∂–∞–ª—å —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —Ä–µ—Å—É—Ä—Å –Ω–∞ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ..."); await callback.message.bot.send_chat_action(user_id, 'typing')
        supportive_message_with_question = await get_grok_supportive_message(user_id, db)
        await callback.message.answer(supportive_message_with_question); await logger_service.log_action(user_id, "support_message_sent")
        await state.set_state(UserState.waiting_for_recharge_method)
    else:
        await callback.message.answer(f"–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{resource_choice_label}'! ‚ú®"); await show_final_feedback_and_menu(callback.message, state, db, logger_service)

# --- –®–∞–≥ 8.5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_recharge_method(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 8.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ —Å–ø–æ—Å–æ–±–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞."""
    user_id = message.from_user.id; recharge_method_text = message.text.strip(); user_data = db.get_user(user_id) or {}; name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""
    if not recharge_method_text: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."); return
    if len(recharge_method_text) < 5: await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (—Ö–æ—Ç—è –±—ã 5 —Å–∏–º–≤–æ–ª–æ–≤)."); return
    try:
        now_iso = datetime.now(TIMEZONE).isoformat(); db.add_recharge_method(user_id, recharge_method_text, now_iso)
        await state.update_data(recharge_method=recharge_method_text); await logger_service.log_action(user_id, "recharge_method_provided", {"recharge_method": recharge_method_text})
        logger.info(f"Recharge method '{recharge_method_text}' added to separate table for user {user_id}")
    except Exception as e: logger.error(f"Failed to add recharge method to DB for user {user_id}: {e}", exc_info=True)
    final_text = (f"{name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –ó–∞–ø–æ–º–Ω—é —ç—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–ª—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è. –¢—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω(–Ω–∞). ‚ù§Ô∏è" if name else f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –ó–∞–ø–æ–º–Ω—é —ç—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–ª—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è. –¢—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω(–Ω–∞). ‚ù§Ô∏è")
    await message.answer(final_text); await show_final_feedback_and_menu(message, state, db, logger_service)

# --- –®–∞–≥ 9: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –æ—á–∏—Å—Ç–∫–∞ ---
async def show_final_feedback_and_menu(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 9: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ "–°–ø–∞—Å–∏–±–æ", –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –º–µ–Ω—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    user_id = message.from_user.id; user_data = db.get_user(user_id) or {}; name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""; data = await state.get_data(); card_number = data.get("card_number", 0)
    try:
        final_profile_data = {"initial_resource": data.get("initial_resource"), "final_resource": data.get("final_resource"), "last_updated": datetime.now(TIMEZONE)}; final_profile_data = {k: v for k, v in final_profile_data.items() if v is not None}
        if final_profile_data: db.update_user_profile(user_id, final_profile_data); logger.info(f"Final profile data (resources) saved for user {user_id} before state clear.")
    except Exception as e: logger.error(f"Error saving final profile resource data for user {user_id} before clear: {e}", exc_info=True)
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ—é –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üôè –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ - —ç—Ç–æ –ø—É—Ç—å –∫ —Å–µ–±–µ.", reply_markup=await get_main_menu(user_id, db))
    feedback_text = f"{name}, –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è –≤ —Ü–µ–ª–æ–º? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?" if name else "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è –≤ —Ü–µ–ª–æ–º? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?"
    feedback_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üëç –î–∞, –ø–æ–º–æ–≥–ª–æ!", callback_data=f"feedback_v2_helped_{card_number}")],[types.InlineKeyboardButton(text="ü§î –ë—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"feedback_v2_interesting_{card_number}")],[types.InlineKeyboardButton(text="üòï –ù–µ –æ—á–µ–Ω—å / –ù–µ —Ö–≤–∞—Ç–∏–ª–æ", callback_data=f"feedback_v2_notdeep_{card_number}")]])
    try: await message.answer(feedback_text, reply_markup=feedback_keyboard); await logger_service.log_action(user_id, "final_feedback_prompted", {"card_session": card_number})
    except Exception as e: logger.error(f"Failed to send final feedback prompt to user {user_id}: {e}", exc_info=True)
    current_state_before_clear = await state.get_state(); logger.info(f"Clearing state for user {user_id} after card session. Current state: {current_state_before_clear}. Data: {data}")
    await state.clear(); current_state_after_clear = await state.get_state(); logger.info(f"State cleared for user {user_id}. New state: {current_state_after_clear}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (üëç/ü§î/üòï) ===
async def process_card_feedback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏ (–∫–Ω–æ–ø–∫–∏ üëç/ü§î/üòï)."""
    user_id = callback.from_user.id; user_data = db.get_user(user_id) or {}; name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""; callback_data = callback.data; feedback_type = "unknown"; card_number = 0
    try:
        parts = callback_data.split('_');
        if len(parts) >= 4 and parts[0] == 'feedback' and parts[1] == 'v2':
            feedback_type = parts[2]
            try: card_number = int(parts[-1])
            except ValueError: logger.error(f"Could not parse card number from feedback callback data: {callback_data} for user {user_id}"); card_number = 0
            text_map = {"helped": "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –Ω–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω–æ–π. üòä –ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞!", "interesting": "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ —É–≥–ª—ã –∑—Ä–µ–Ω–∏—è - —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üëç", "notdeep": f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è." if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."}
            text = text_map.get(feedback_type)
            if not text: logger.warning(f"Unknown feedback_v2 type: {feedback_type}..."); await callback.answer("...", show_alert=True); return
            await logger_service.log_action(user_id, "interaction_feedback_provided", {"card_session": card_number, "feedback": feedback_type})
            try: await callback.message.edit_reply_markup(reply_markup=None)
            except Exception as e: logger.warning(f"Could not edit message reply markup (feedback buttons) for user {user_id}: {e}")
            await callback.message.answer(text, reply_markup=await get_main_menu(user_id, db)); await callback.answer()
        else:
             logger.warning(f"Unknown or old feedback callback data format received: {callback_data} from user {user_id}"); await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", show_alert=False)
             try: await callback.message.edit_reply_markup(reply_markup=None)
             except Exception: pass; return
    except Exception as e:
        logger.error(f"Error processing interaction feedback for user {user_id}: {e}", exc_info=True)
        try: await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        except Exception: pass

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---
"
