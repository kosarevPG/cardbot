# –∫–æ–¥/modules/card_of_the_day.py

import random
import os
import uuid  # <--- –î–û–ë–ê–í–õ–ï–ù–û
from aiogram import types
from aiogram.fsm.context import FSMContext
from config import TIMEZONE, NO_CARD_LIMIT_USERS, DATA_DIR, pytz
from .ai_service import (
    get_grok_question, get_grok_summary, build_user_profile,
    get_grok_supportive_message
)
from datetime import datetime, date
from modules.user_management import UserState
from database.db import Database
import logging

logger = logging.getLogger(__name__)

RESOURCE_LEVELS = {
    "resource_good": "üòä –•–æ—Ä–æ—à–æ",
    "resource_medium": "üòê –°—Ä–µ–¥–Ω–µ",
    "resource_low": "üòî –ù–∏–∑–∫–æ",
}
CARDS_DIR = os.path.join(DATA_DIR, "cards") if DATA_DIR != "/data" else "cards"
if not CARDS_DIR.startswith("/data") and not os.path.exists(CARDS_DIR):
     os.makedirs(CARDS_DIR, exist_ok=True)
     logger.warning(f"Cards directory '{CARDS_DIR}' did not exist and was created. Make sure card images are present.")

async def get_main_menu(user_id, db: Database):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    keyboard = [
        [types.KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")],
        [types.KeyboardButton(text="üåô –ò—Ç–æ–≥ –¥–Ω—è")]
    ]
    try:
        user_data = db.get_user(user_id)
        if user_data and user_data.get("bonus_available"):
            keyboard.append([types.KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    except Exception as e:
        logger.error(f"Error getting user data for main menu (user {user_id}): {e}", exc_info=True)
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

# ================================
# === –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –ö–ê–†–¢–´ –î–ù–Ø ===
# ================================

async def handle_card_request(message: types.Message, state: FSMContext, db: Database, logger_service):
    """
    –°–¢–ê–†–¢–û–í–ê–Ø –¢–û–ß–ö–ê —Å—Ü–µ–Ω–∞—Ä–∏—è '–ö–∞—Ä—Ç–∞ –¥–Ω—è'.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞.
    """
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    now = datetime.now(TIMEZONE)
    today = now.date()

    logger.info(f"User {user_id}: Checking card availability for {today}")
    card_available = db.is_card_available(user_id, today)
    logger.info(f"User {user_id}: Card available? {card_available}")

    if user_id not in NO_CARD_LIMIT_USERS and not card_available:
        last_req_time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if user_data and isinstance(user_data.get('last_request'), datetime):
            try:
                last_req_dt = user_data['last_request']
                if last_req_dt.tzinfo is None and pytz:
                    last_req_dt_local = TIMEZONE.localize(last_req_dt).astimezone(TIMEZONE)
                elif last_req_dt.tzinfo:
                    last_req_dt_local = last_req_dt.astimezone(TIMEZONE)
                else:
                    last_req_dt_local = last_req_dt
                last_req_time_str = last_req_dt_local.strftime('%H:%M %d.%m.%Y')
            except Exception as e:
                logger.error(f"Error formatting last_request time for user {user_id}: {e}")
                last_req_time_str = "–æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"
        text = (f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è (–≤ {last_req_time_str} –ú–°–ö)! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞. ‚ú®" if name else f"–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è (–≤ {last_req_time_str} –ú–°–ö)! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞. ‚ú®")
        logger.info(f"User {user_id}: Sending 'already drawn' message.")
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        await state.clear()
        return

    logger.info(f"User {user_id}: Card available, starting initial resource check.")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ ---
    session_id = str(uuid.uuid4())
    await state.update_data(session_id=session_id)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await logger_service.log_action(user_id, "card_flow_started", {
        "trigger": "button", 
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    await ask_initial_resource(message, state, db, logger_service)

async def ask_initial_resource(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 1: –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ—Å—É—Ä—Å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    text = f"{name}, –ø—Ä–∏–≤–µ—Ç! ‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:" if name else "–ü—Ä–∏–≤–µ—Ç! ‚ú® –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:"
    buttons = [ types.InlineKeyboardButton(text=label.split()[0], callback_data=key) for key, label in RESOURCE_LEVELS.items() ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_initial_resource)

async def process_initial_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 1.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id
    resource_choice_key = callback.data
    resource_choice_label = RESOURCE_LEVELS.get(resource_choice_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await state.update_data(initial_resource=resource_choice_label)
    await logger_service.log_action(user_id, "initial_resource_selected", {
        "resource": resource_choice_label,
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    await callback.answer(f"–ü–æ–Ω—è–ª, —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {resource_choice_label.split()[0]}")
    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (initial resource) for user {user_id}: {e}")
    await ask_request_type_choice(callback, state, db, logger_service)

async def ask_request_type_choice(event: types.Message | types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 2: –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."""
    if isinstance(event, types.CallbackQuery):
        user_id = event.from_user.id; message = event.message
    else:
        user_id = event.from_user.id; message = event
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""; name = name.strip() if isinstance(name, str) else ""
    text = (f"{name}, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è.\n" if name else "–¢–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è.\n") + ("–ö–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ?\n\n1Ô∏è‚É£ –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å <b>–≤ —É–º–µ</b>?\n2Ô∏è‚É£ <b>–ù–∞–ø–∏—Å–∞—Ç—å</b> –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ —á–∞—Ç?\n\n<i>(–ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å, —è —Å–º–æ–≥—É –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–≤–æ–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º ‚ú®).</i>")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[ types.InlineKeyboardButton(text="1Ô∏è‚É£ –í —É–º–µ", callback_data="request_type_mental"), types.InlineKeyboardButton(text="2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data="request_type_typed"), ]])
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserState.waiting_for_request_type_choice)

async def process_request_type_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 2.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id
    request_type = callback.data
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    choice_text = "mental" if request_type == "request_type_mental" else "typed"
    
    await state.update_data(request_type=request_type)
    
    # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ 'question_mode_chosen'
    await logger_service.log_action(user_id, "question_mode_chosen", {
        "mode": choice_text,
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e: logger.warning(f"Could not edit message reply markup (request type) for user {user_id}: {e}")

    if request_type == "request_type_mental":
        await callback.answer("–•–æ—Ä–æ—à–æ, –¥–µ—Ä–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ –≥–æ–ª–æ–≤–µ.")
        await callback.message.answer("–ü–æ–Ω—è–ª. –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç—É...")
        await draw_card_direct(callback.message, state, db, logger_service, user_id=user_id)
    elif request_type == "request_type_typed":
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –∂–¥—É —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.")
        await callback.message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∫–∞—Ä—Ç–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")
        await state.set_state(UserState.waiting_for_request_text_input)

async def process_request_text(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 3–∞: –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—É."""
    user_id = message.from_user.id
    request_text = message.text.strip()
    if not request_text: await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º..."); return
    if len(request_text) < 5: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."); return
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    
    await state.update_data(user_request=request_text)
    
    # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ 'typed_question_submitted'
    await logger_service.log_action(user_id, "typed_question_submitted", {
        "length": len(request_text),
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await message.answer("–°–ø–∞—Å–∏–±–æ! ‚ú® –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    await draw_card_direct(message, state, db, logger_service, user_id=user_id)

async def draw_card_direct(message: types.Message, state: FSMContext, db: Database, logger_service, user_id: int):
    """
    –®–∞–≥ 3b / –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –®–∞–≥–∞ 3–∞:
    –í—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–± –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è—Ö.
    """
    user_data_fsm = await state.get_data()
    user_request = user_data_fsm.get("user_request", "")
    session_id = user_data_fsm.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    user_db_data = db.get_user(user_id) or {}
    name = user_db_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    now_iso = datetime.now(TIMEZONE).isoformat()

    try:
         db.update_user(user_id, {"last_request": now_iso})
    except Exception as e:
         logger.error(f"Failed to update last_request time for user {user_id}: {e}", exc_info=True)

    card_number = None
    try:
        # ... (–ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        used_cards = db.get_user_cards(user_id)
        if not os.path.isdir(CARDS_DIR):
             logger.error(f"Cards directory not found or not a directory: {CARDS_DIR}")
             await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å –∫–∞—Ä—Ç–∞–º–∏..."); await state.clear(); return
        all_card_files = [f for f in os.listdir(CARDS_DIR) if f.startswith("card_") and f.endswith(".jpg")]
        if not all_card_files:
            logger.error(f"No card images found in {CARDS_DIR}.")
            await message.answer("–í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç..."); await state.clear(); return
        all_cards = []
        for fname in all_card_files:
             try:
                 num = int(fname.replace("card_", "").replace(".jpg", ""))
                 all_cards.append(num)
             except ValueError:
                 logger.warning(f"Could not parse card number from filename: {fname}")
                 continue
        if not all_cards:
            logger.error(f"Could not parse any valid card numbers from filenames in {CARDS_DIR}.")
            await message.answer("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –∫–∞—Ä—Ç..."); await state.clear(); return
        available_cards = [c for c in all_cards if c not in used_cards]
        if not available_cards:
            logger.info(f"Card deck reset for user {user_id} as all cards were used.")
            db.reset_user_cards(user_id)
            available_cards = all_cards.copy()
        if not available_cards:
             logger.error(f"No available cards found even after potential reset for user {user_id}.")
             await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ä—Ç—É..."); await state.clear(); return
        card_number = random.choice(available_cards)
        db.add_user_card(user_id, card_number)
        await state.update_data(card_number=card_number)
    except Exception as card_logic_err:
        logger.error(f"Error during card selection logic for user {user_id}: {card_logic_err}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã...")
        await state.clear()
        return

    card_path = os.path.join(CARDS_DIR, f"card_{card_number}.jpg")
    if not os.path.exists(card_path):
        logger.error(f"Card image file not found: {card_path} after selecting number {card_number} for user {user_id}.")
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å...")
        await state.clear()
        return

    try:
        await message.bot.send_chat_action(message.chat.id, 'upload_photo')
        await message.answer_photo(types.FSInputFile(card_path), protect_content=True)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω –ª–æ–≥ —Å–æ–±—ã—Ç–∏—è ---
        await logger_service.log_action(user_id, "card_drawn", {
            "card_number": card_number,
            "request_provided": bool(user_request),
            "session_id": session_id
        })
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        if user_request:
            text = (f"{name}, –≤–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n<i>¬´{user_request}¬ª</i>\n\n–†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º?"
                    if name
                    else f"–í–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n<i>¬´{user_request}¬ª</i>\n\n–†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º?")
        else:
            text = (f"{name}, –≤–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è.\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –Ω–µ–µ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º?"
                    if name
                    else f"–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è.\n\n–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –Ω–µ–µ. –ö–∞–∫–∏–µ <b>–ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –º—ã—Å–ª–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º?")

        await message.answer(text, parse_mode="HTML")
        await state.set_state(UserState.waiting_for_initial_response)

    except Exception as e:
        logger.error(f"Failed to send card photo or initial question to user {user_id}: {e}", exc_info=True)
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å...")
        await state.clear()

async def process_initial_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 4.5: –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä: –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ."""
    user_id = message.from_user.id
    initial_response_text = message.text.strip()
    if not initial_response_text: await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞..."); return
    if len(initial_response_text) < 3: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."); return
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ ---
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    session_id = data.get("session_id", "unknown")

    await state.update_data(initial_response=initial_response_text)

    await logger_service.log_action(user_id, "initial_response_provided", {
        "card_number": card_number,
        "request": user_request,
        "response_length": len(initial_response_text),
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    await ask_exploration_choice(message, state, db, logger_service)

async def ask_exploration_choice(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 5: –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–∞–ª—å—à–µ."""
    user_id = message.from_user.id
    user_data = db.get_user(user_id) or {}
    name = user_data.get("name") or ""
    name = name.strip() if isinstance(name, str) else ""
    text = (f"{name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –•–æ—á–µ—à—å –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–ª—É–±–∂–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –º–µ–Ω—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ 5-7 –º–∏–Ω—É—Ç)?" if name else "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! –•–æ—á–µ—à—å –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≥–ª—É–±–∂–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –º–µ–Ω—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –µ—â–µ 5-7 –º–∏–Ω—É—Ç)?")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –î–∞, –¥–∞–≤–∞–π –∏—Å—Å–ª–µ–¥—É–µ–º", callback_data="explore_yes")], [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç", callback_data="explore_no")]])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_exploration_choice)

async def process_exploration_choice_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–®–∞–≥ 5.5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏."""
    user_id = callback.from_user.id
    choice = callback.data
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ ---
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    choice_value = "yes" if choice == "explore_yes" else "no"
    
    await logger_service.log_action(user_id, "exploration_chosen", {
        "choice": choice_value,
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"Could not edit message reply markup (exploration choice) for user {user_id}: {e}")

    if choice == "explore_yes":
        await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
        await ask_grok_question(callback.message, state, db, logger_service, step=1, user_id=user_id)
    elif choice == "explore_no":
        await callback.answer("–•–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–æ–π.")
        await generate_and_send_summary(user_id=user_id, message=callback.message, state=state, db=db, logger_service=logger_service)
        await finish_interaction_flow(user_id=user_id, message=callback.message, state=state, db=db, logger_service=logger_service)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º session_id –≤ –ª–æ–≥–∏)

async def ask_grok_question(message: types.Message, state: FSMContext, db: Database, logger_service, step: int, user_id: int):
    # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    # ...
    grok_question = await get_grok_question(...) # –≤—ã–∑–æ–≤ –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await state.update_data({f"grok_question_{step}": grok_question})
    await logger_service.log_action(user_id, "grok_question_asked", {
        "step": step, 
        "question_length": len(grok_question),
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    # ...

async def process_first_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    first_response = message.text.strip()
    if not first_response or len(first_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    # ...
    await state.update_data(first_grok_response=first_response)
    await logger_service.log_action(user_id, "grok_response_provided", {
        "step": 1, 
        "response_length": len(first_response), 
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    await ask_grok_question(message, state, db, logger_service, step=2, user_id=user_id)

async def process_second_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    second_response = message.text.strip()
    if not second_response or len(second_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    # ...
    await state.update_data(second_grok_response=second_response)
    await logger_service.log_action(user_id, "grok_response_provided", {
        "step": 2, 
        "response_length": len(second_response), 
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    await ask_grok_question(message, state, db, logger_service, step=3, user_id=user_id)

async def process_third_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    third_response = message.text.strip()
    if not third_response or len(third_response) < 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."); return
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    # ...
    await state.update_data(third_grok_response=third_response)
    await logger_service.log_action(user_id, "grok_response_provided", {
        "step": 3, 
        "response_length": len(third_response), 
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    await generate_and_send_summary(user_id=user_id, message=message, state=state, db=db, logger_service=logger_service)
    # ...
    await finish_interaction_flow(user_id=user_id, message=message, state=state, db=db, logger_service=logger_service)

async def generate_and_send_summary(user_id: int, message: types.Message, state: FSMContext, db: Database, logger_service):
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    # ...
    summary_text = await get_grok_summary(user_id, ..., db)
    if summary_text and not summary_text.startswith(("–û—à–∏–±–∫–∞", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é")):
        # ...
        await logger_service.log_action(user_id, "summary_sent", {
            "summary_length": len(summary_text),
            "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
        })
    # ...

async def finish_interaction_flow(user_id: int, message: types.Message, state: FSMContext, db: Database, logger_service):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await message.answer(...)
    await state.set_state(UserState.waiting_for_final_resource)

async def process_final_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    user_id = callback.from_user.id
    resource_choice_label = ...
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    
    await state.update_data(final_resource=resource_choice_label)
    await logger_service.log_action(user_id, "final_resource_selected", {
        "resource": resource_choice_label,
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    # ...

async def process_recharge_method(message: types.Message, state: FSMContext, db: Database, logger_service):
    user_id = message.from_user.id
    recharge_method_text = message.text.strip()
    # ...
    data = await state.get_data()
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û
    
    await logger_service.log_action(user_id, "recharge_method_provided", {
        "length": len(recharge_method_text),
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    # ...
    await show_final_feedback_and_menu(message, state, db, logger_service, user_id=user_id)

async def show_final_feedback_and_menu(message: types.Message, state: FSMContext, db: Database, logger_service, user_id: int):
    # ...
    data = await state.get_data()
    card_number = data.get("card_number", 0)
    session_id = data.get("session_id", "unknown") # <--- –î–û–ë–ê–í–õ–ï–ù–û

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ---
    await logger_service.log_action(user_id, "card_flow_completed", {
        "card_session": card_number,
        "session_id": session_id
    })
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    # ... (–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞)
    
    await logger_service.log_action(user_id, "final_feedback_prompted", {
        "card_session": card_number,
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    
    # ... (–∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    await state.clear()

async def process_card_feedback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    user_id = callback.from_user.id
    fsm_data = await state.get_data()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å session_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å ---
    session_id = fsm_data.get("session_id", "unknown_post_session")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    # ...
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å session_id
    await logger_service.log_action(user_id, "interaction_feedback_provided", {
        "card_session": card_number, 
        "feedback": feedback_type,
        "session_id": session_id # <--- –î–û–ë–ê–í–õ–ï–ù–û
    })
    # ...
