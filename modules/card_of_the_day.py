# –∫–æ–¥/modules/card_of_the_day.py

import random
import os
import uuid
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
try:
    from config_local import TIMEZONE, NO_CARD_LIMIT_USERS, DATA_DIR, pytz
except ImportError:
    from config import TIMEZONE, NO_CARD_LIMIT_USERS, DATA_DIR, pytz
from .ai_service import (
    get_grok_question, get_grok_summary, build_user_profile,
    get_grok_supportive_message
)
from datetime import datetime, date
from modules.user_management import UserState
from database.db import Database
import logging

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ callback -> emoji/text
RESOURCE_LEVELS = {
    "resource_good": "üòä –•–æ—Ä–æ—à–æ",
    "resource_medium": "üòê –°—Ä–µ–¥–Ω–µ",
    "resource_low": "üòî –ù–∏–∑–∫–æ",
}

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∞–º–∏
CARDS_DIR = os.path.join(DATA_DIR, "cards") if DATA_DIR != "/data" else "cards"
if not CARDS_DIR.startswith("/data") and not os.path.exists(CARDS_DIR):
     os.makedirs(CARDS_DIR, exist_ok=True)
     logger.warning(f"Cards directory '{CARDS_DIR}' did not exist and was created. Make sure card images are present.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
async def get_main_menu(user_id, db: Database):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    keyboard = [
        [types.KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")],
        [types.KeyboardButton(text="üåô –ò—Ç–æ–≥ –¥–Ω—è")]
    ]
    try:
        user_data = db.get_user(user_id)
        if user_data and user_data.get("bonus_available"):
            keyboard.append([types.KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    except Exception as e:
        logger.error(f"Error getting user data for main menu (user {user_id}): {e}", exc_info=True)
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ main.py
async def handle_card_request(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è handle_card_request"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_initial_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_initial_resource_callback"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_request_type_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_request_type_callback"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_request_text(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_request_text"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_initial_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_initial_response"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_exploration_choice_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_exploration_choice_callback"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_first_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_first_grok_response"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_second_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_second_grok_response"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_third_grok_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_third_grok_response"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_final_resource_callback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_final_resource_callback"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_recharge_method(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_recharge_method"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_recharge_method_choice(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_recharge_method_choice"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_card_feedback(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_card_feedback"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_emotion_choice(callback: types.CallbackQuery, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_emotion_choice"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def process_custom_response(message: types.Message, state: FSMContext, db: Database, logger_service):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è process_custom_response"""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
