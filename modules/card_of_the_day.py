# –∫–æ–¥/card_of_the_day.py

import random
import os
from aiogram import types
from aiogram.fsm.context import FSMContext
from config import TIMEZONE, NO_CARD_LIMIT_USERS
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ ai_service
from .ai_service import get_grok_question, get_grok_summary, build_user_profile
from datetime import datetime
from modules.user_management import UserState
import logging # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logger = logging.getLogger(__name__)

async def get_main_menu(user_id, db):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    keyboard = [[types.KeyboardButton(text="‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è")]]
    user_data = db.get_user(user_id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ get_user —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    if user_data and user_data.get("bonus_available"):
        keyboard.append([types.KeyboardButton(text="üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π")])
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, persistent=True)

async def handle_card_request(message: types.Message, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è."""
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "") # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    now = datetime.now(TIMEZONE)
    today = now.date()

    last_request_str = db.get_user(user_id).get("last_request")
    last_request_date = None
    if last_request_str:
        try:
            if isinstance(last_request_str, str):
                 last_request_dt = datetime.fromisoformat(last_request_str.replace('Z', '+00:00')).astimezone(TIMEZONE)
            elif isinstance(last_request_str, datetime):
                 last_request_dt = last_request_str.astimezone(TIMEZONE)
            else:
                 last_request_dt = None

            if last_request_dt:
                last_request_date = last_request_dt.date()
        except Exception as e:
             logger.error(f"Error parsing last_request timestamp '{last_request_str}' for user {user_id}: {e}")
             last_request_date = None

    if user_id not in NO_CARD_LIMIT_USERS and last_request_date == today:
        text = f"{name}, —Ç—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ." if name else "–¢—ã —É–∂–µ –≤—ã—Ç—è–Ω—É–ª–∞ –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è! –ù–æ–≤–∞—è –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ."
        await message.answer(text, reply_markup=await get_main_menu(user_id, db))
        return

    text = f"{name}, –≥–æ—Ç–æ–≤–∞ –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä? üåø –ü–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –º–Ω–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∞—Ç—å –≤ –≥–æ–ª–æ–≤–µ, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É'" if name else ", –ì–æ—Ç–æ–≤–∞ –ø–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä? üåø –ü–æ–¥—É–º–∞–π –æ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–º–µ –¥–Ω—è. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –º–Ω–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∞—Ç—å –≤ –≥–æ–ª–æ–≤–µ, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É'"
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", callback_data="draw_card")]
    ]))
    await state.set_state(UserState.waiting_for_request_text)
    await logger_service.log_action(user_id, "card_request_initiated")

async def draw_card(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    """–í—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    now_iso = datetime.now(TIMEZONE).isoformat() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ

    used_cards = db.get_user_cards(user_id)
    all_cards = list(range(1, 41)) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 40 –∫–∞—Ä—Ç
    available_cards = [c for c in all_cards if c not in used_cards]

    if not available_cards:
        logger.info(f"Card deck reset for user {user_id}")
        db.reset_user_cards(user_id)
        available_cards = all_cards.copy()

    card_number = random.choice(available_cards)
    db.add_user_card(user_id, card_number)
    db.update_user(user_id, {"last_request": now_iso})

    card_path = f"cards/card_{card_number}.jpg"
    if os.path.exists(card_path):
        try:
            await callback.message.bot.send_photo(
                user_id,
                types.FSInputFile(card_path),
                protect_content=True
            )
            text = f"{name}, –≤–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É. –ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º? –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏." if name else "–í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É. –ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ —á—É–≤—Å—Ç–≤–∞, –æ–±—Ä–∞–∑—ã, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç? –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º? –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏."
            await callback.message.answer(text) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–∞—Ä—Ç—ã

            await state.update_data(card_number=card_number, user_request="") # –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π
            await state.set_state(UserState.waiting_for_initial_response)
            await logger_service.log_action(user_id, "card_drawn", {"card_number": card_number})

        except Exception as e:
            logger.error(f"Failed to send card photo to user {user_id}: {e}")
            await callback.message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")
            await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        logger.error(f"Card image not found: {card_path}")
        await callback.message.answer("–ö–∞–∂–µ—Ç—Å—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –µ—â–µ —Ä–∞–∑.")
        await state.clear()

    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query

async def process_request_text(message: types.Message, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É."""
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    request_text = message.text.strip()
    now_iso = datetime.now(TIMEZONE).isoformat()

    used_cards = db.get_user_cards(user_id)
    all_cards = list(range(1, 41))
    available_cards = [c for c in all_cards if c not in used_cards]

    if not available_cards:
        logger.info(f"Card deck reset for user {user_id}")
        db.reset_user_cards(user_id)
        available_cards = all_cards.copy()

    card_number = random.choice(available_cards)
    db.add_user_card(user_id, card_number)
    db.update_user(user_id, {"last_request": now_iso})

    card_path = f"cards/card_{card_number}.jpg"
    if os.path.exists(card_path):
        try:
            await message.bot.send_photo(
                user_id,
                types.FSInputFile(card_path),
                protect_content=True
            )
            text = f"{name}, –≤–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{request_text}'. –†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∞ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?" if name else f"–í–æ—Ç –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{request_text}'. –†–∞—Å—Å–º–æ—Ç—Ä–∏ –µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∞ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?"
            await message.answer(text) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–∞—Ä—Ç—ã

            await state.update_data(card_number=card_number, user_request=request_text)
            await state.set_state(UserState.waiting_for_initial_response)
            await logger_service.log_action(user_id, "card_drawn_with_request", {"card_number": card_number, "request": request_text})

        except Exception as e:
            logger.error(f"Failed to send card photo to user {user_id} after request: {e}")
            await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")
            await state.clear()
    else:
        logger.error(f"Card image not found: {card_path}")
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –µ—â–µ —Ä–∞–∑.")
        await state.clear()

async def process_initial_response(message: types.Message, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É –∏ –∑–∞–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å Grok."""
    user_id = message.from_user.id
    response_text = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")

    await logger_service.log_action(user_id, "initial_response", {"card_number": card_number, "request": user_request, "response": response_text})
    grok_question = await get_grok_question(user_id, user_request, response_text, "–ù–∞—á–∞–ª–æ", step=1, db=db)
    await logger_service.log_action(user_id, "grok_question", {"step": 1, "grok_question": grok_question})
    await message.answer(grok_question)
    await state.update_data(first_grok_question=grok_question, initial_response=response_text)
    await state.set_state(UserState.waiting_for_first_grok_response)

async def process_first_grok_response(message: types.Message, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å Grok –∏ –∑–∞–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–π."""
    user_id = message.from_user.id
    first_response = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    first_grok_question = data.get("first_grok_question", "")

    await logger_service.log_action(user_id, "first_grok_response", {"card_number": card_number, "request": user_request, "question": first_grok_question, "response": first_response})
    previous_responses_context = {
        "first_question": first_grok_question,
        "first_response": first_response
    }
    second_grok_question = await get_grok_question(user_id, user_request, first_response, "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ", step=2, previous_responses=previous_responses_context, db=db)
    await logger_service.log_action(user_id, "grok_question", {"step": 2, "grok_question": second_grok_question})
    await message.answer(second_grok_question)
    await state.update_data(second_grok_question=second_grok_question, previous_responses=previous_responses_context)
    await state.set_state(UserState.waiting_for_second_grok_response)

async def process_second_grok_response(message: types.Message, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å Grok –∏ –∑–∞–¥–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π."""
    user_id = message.from_user.id
    second_response = message.text.strip()
    data = await state.get_data()
    card_number = data.get("card_number", "N/A")
    user_request = data.get("user_request", "")
    second_grok_question = data.get("second_grok_question", "")
    previous_responses_context = data.get("previous_responses", {})

    await logger_service.log_action(user_id, "second_grok_response", {"card_number": card_number, "request": user_request, "question": second_grok_question, "response": second_response})
    previous_responses_context["second_question"] = second_grok_question
    previous_responses_context["second_response"] = second_response
    third_grok_question = await get_grok_question(user_id, user_request, second_response, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", step=3, previous_responses=previous_responses_context, db=db)
    await logger_service.log_action(user_id, "grok_question", {"step": 3, "grok_question": third_grok_question})
    await message.answer(third_grok_question)
    await state.update_data(third_grok_question=third_grok_question, previous_responses=previous_responses_context)
    await state.set_state(UserState.waiting_for_third_grok_response)

async def process_third_grok_response(message: types.Message, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å Grok, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–¥–±–µ–∫ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    user_id = message.from_user.id
    name = db.get_user(user_id).get("name", "")
    third_response = message.text.strip()
    data = await state.get_data()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º card_number –Ω–∞–¥–µ–∂–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ N/A
    card_number = data.get("card_number")
    if card_number is None:
        logger.warning(f"Card number not found in state for user {user_id} at third response.")
        card_number = 0 # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    user_request = data.get("user_request", "")
    third_grok_question = data.get("third_grok_question", "")
    previous_responses_context = data.get("previous_responses", {})

    await logger_service.log_action(user_id, "third_grok_response", {"card_number": card_number, "request": user_request, "question": third_grok_question, "response": third_response})

    logger.info(f"Starting summary generation for user {user_id}")
    interaction_summary_data = {
        "user_request": user_request,
        "card_number": card_number,
        "initial_response": data.get("initial_response", "N/A"),
        "qna": [
            {"question": previous_responses_context.get("first_question", ""), "answer": previous_responses_context.get("first_response", "")},
            {"question": previous_responses_context.get("second_question", ""), "answer": previous_responses_context.get("second_response", "")},
            {"question": third_grok_question, "answer": third_response}
        ]
    }
    interaction_summary_data["qna"] = [item for item in interaction_summary_data["qna"] if item.get("question") and item.get("answer")]

    summary_text = await get_grok_summary(user_id, interaction_summary_data, db)

    if summary_text and not summary_text.startswith("–û—à–∏–±–∫–∞") and not summary_text.startswith("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é") and not summary_text.startswith("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å"):
         await message.answer(f"‚ú® –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã:\n{summary_text}")
         await logger_service.log_action(user_id, "summary_sent", {"summary": summary_text})
    else:
         await logger_service.log_action(user_id, "summary_failed", {"error_message": summary_text})

    try:
         await build_user_profile(user_id, db)
         logger.info(f"User profile updated after interaction for user {user_id}")
    except Exception as e:
         logger.error(f"Failed to update user profile for user {user_id} after interaction: {e}")

    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å! üôè", reply_markup=await get_main_menu(user_id, db)) # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∑–¥–µ—Å—å

    # --- –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ ---
    feedback_text = f"{name}, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?" if name else "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–Ω–æ–π –¥–ª—è —Ç–µ–±—è –æ–∫–∞–∑–∞–ª–∞—Å—å —ç—Ç–∞ —Å–µ—Å—Å–∏—è? –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏–ª–∏ –ø–æ-–Ω–æ–≤–æ–º—É –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º card_number –≤ callback_data –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Å—Å–∏–µ–π
    feedback_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üëç –ü–æ–º–æ–≥–ª–æ", callback_data=f"feedback_v2_helped_{card_number}"),
        ],
        [
            types.InlineKeyboardButton(text="ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"feedback_v2_interesting_{card_number}"),
        ],
        [
             types.InlineKeyboardButton(text="üòï –ù–µ —Ö–≤–∞—Ç–∏–ª–æ –≥–ª—É–±–∏–Ω—ã", callback_data=f"feedback_v2_not_deep_{card_number}")
        ]
    ])
    await message.answer(feedback_text, reply_markup=feedback_keyboard)
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

async def process_card_feedback(callback: types.CallbackQuery, state: FSMContext, db, logger_service):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏."""
    user_id = callback.from_user.id
    name = db.get_user(user_id).get("name", "")
    callback_data = callback.data
    feedback_type = "unknown"
    card_number = 0 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        # –ü–∞—Ä—Å–∏–º callback_data –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: feedback_v2_<type>_<card_number>
        parts = callback_data.split('_')
        if len(parts) >= 4 and parts[0] == 'feedback' and parts[1] == 'v2':
            feedback_type = parts[2] # helped, interesting, not_deep
            try:
                 card_number = int(parts[-1]) # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            except ValueError:
                 logger.error(f"Could not parse card number from feedback callback data: {callback_data}")
                 # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–∑ state, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ—á–∏—â–µ–Ω, –Ω–æ –ª—É—á—à–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ callback
                 card_number = 0 # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            # --- –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ ---
            if feedback_type == "helped":
                text = "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –Ω–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω–æ–π. üòä –ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞!"
            elif feedback_type == "interesting":
                text = "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ —É–≥–ª—ã –∑—Ä–µ–Ω–∏—è - —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üëç"
            elif feedback_type == "not_deep":
                text = f"{name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è." if name else "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–Ω–µ –∂–∞–ª—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–ø–Ω—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–≤–æ–∏ –∏–¥–µ–∏ –≤ /feedback –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."
            else:
                logger.warning(f"Unknown feedback_v2 type: {feedback_type} in {callback_data}")
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
                return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ç–∏–ø —Ñ–∏–¥–±–µ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫
            await logger_service.log_action(user_id, "interaction_feedback", {"card_session": card_number, "feedback": feedback_type}) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø action

            await callback.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            await callback.message.answer(text, reply_markup=await get_main_menu(user_id, db))
            await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        elif callback_data.startswith("feedback_yes_") or callback_data.startswith("feedback_no_"):
             logger.warning(f"Received old format feedback callback: {callback_data}")
             # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —É—Å—Ç–∞—Ä–µ–ª
             await callback.answer("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
             # await state.clear() # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç—É—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ
             return

        else:
             logger.warning(f"Unknown feedback callback data format: {callback_data}")
             await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
             return

    except Exception as e:
        logger.error(f"Error processing interaction feedback for user {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await state.clear()
        except Exception as clear_err:
            logger.error(f"Failed to clear state after feedback error: {clear_err}")
