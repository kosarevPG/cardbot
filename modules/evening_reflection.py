# –∫–æ–¥/evening_reflection.py 0

import logging
from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F, Router # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from modules.user_management import UserState
from database.db import Database
from modules.logging_service import LoggingService
try:
    from config_local import TIMEZONE
except ImportError:
    from config import TIMEZONE
# --- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ ---
from modules.ai_service import get_reflection_summary_and_card_synergy, get_empathetic_response # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ò–ú–ü–û–†–¢–ê ---
from modules.card_of_the_day import get_main_menu

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
# (–û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, callback_query,
#  –∏–ª–∏ –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º. –ï—Å–ª–∏ –Ω–µ—Ç - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
reflection_router = Router()

# --- –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---
MSG_INTRO = "–ü—Ä–∏–≤–µ—Ç! üåô –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏ —Ç–≤–æ–µ–≥–æ –¥–Ω—è. –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞.\n\nüí° –û—Ç–≤–µ—á–∞–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ. –î–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Ü–µ–Ω–Ω—ã–º!"
ASK_GOOD_MOMENTS = "–ù–∞—á–Ω—ë–º —Å –ø—Ä–∏—è—Ç–Ω–æ–≥–æ! ‚ú® –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å–ª–æ —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –†–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: '–≤—Å—Ç—Ä–µ—á–∞ —Å –ø–æ–¥—Ä—É–≥–æ–π', '—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç', '–≤—ã–ø–∏–ª–∞ –≤–∫—É—Å–Ω—ã–π –∫–æ—Ñ–µ'"
ASK_GRATITUDE = "–û—Ç–ª–∏—á–Ω–æ! üôè –ê –∑–∞ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —á—É–≤—Å—Ç–≤—É–µ—à—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–ª–∏–∑–∫–∏—Ö, –∑–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞ —Ç–æ, —á—Ç–æ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å —á–µ–º-—Ç–æ —Å–ª–æ–∂–Ω—ã–º?\n\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞ –ø–æ–º–æ—â—å –∫–æ–ª–ª–µ–≥', '–∑–∞ —Å–æ–ª–Ω–µ—á–Ω—É—é –ø–æ–≥–æ–¥—É', '–∑–∞ —Ç–æ, —á—Ç–æ –Ω–µ —Å–¥–∞–ª–∞—Å—å'"
ASK_HARD_MOMENTS = "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! üí™ –ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç—ã–º. –ö–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤—ã–∑–≤–∞–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞?\n\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–ª–æ–∂–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º', '—É—Å—Ç–∞–ª–∞ –æ—Ç —Ä—É—Ç–∏–Ω—ã', '—á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É'"
MSG_CONCLUSION = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏! üåü –¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—à—å –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞. –ü—É—Å—Ç—å –Ω–æ—á—å –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ–π, –∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏–Ω–µ—Å—ë—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚ú®"
MSG_INPUT_ERROR = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å. –î–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–µ–±—è.\n\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: '—á—É–≤—Å—Ç–≤—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å', '–±—ã–ª–æ –º–Ω–æ–≥–æ –¥–µ–ª', '–≤—Å—Ç—Ä–µ—Ç–∏–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞'"
MSG_AI_SUMMARY_PREFIX = "‚ú® –í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª–∞ –æ —Ç–≤–æ—ë–º –¥–Ω–µ:\n\n" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è AI —Ä–µ–∑—é–º–µ
MSG_AI_SUMMARY_FAIL = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–∏—Ç–æ–≥, –Ω–æ —Ç–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –∏–º–∏."

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def start_evening_reflection(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–ù–∞—á–∞–ª–æ —Ñ–ª–æ—É '–ò—Ç–æ–≥ –¥–Ω—è'."""
    user_id = message.from_user.id
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π "–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
    session_id = db.start_user_scenario(user_id, 'evening_reflection')
    db.log_scenario_step(user_id, 'evening_reflection', 'started', {
        'session_id': session_id,
        'today': datetime.now(TIMEZONE).date().isoformat()
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(session_id=session_id)
    
    await logger_service.log_action(user_id, "evening_reflection_started")
    await message.answer(MSG_INTRO)
    await message.answer(ASK_GOOD_MOMENTS)
    await state.set_state(UserState.waiting_for_good_moments)

# –£–ë–†–ê–ù –î–ï–ö–û–†–ê–¢–û–† @reflection_router.message(...)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def process_good_moments(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–æ—Ä–æ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö."""
    user_id = message.from_user.id
    answer = message.text.strip()
    if not answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(good_moments=answer)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–æ—Ä–æ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    db.log_scenario_step(user_id, 'evening_reflection', 'good_moments_provided', {
        'session_id': session_id,
        'answer_length': len(answer)
    })
    
    await logger_service.log_action(user_id, "evening_reflection_good_provided", {"length": len(answer)})
    await message.answer(ASK_GRATITUDE)
    await state.set_state(UserState.waiting_for_gratitude)

# –£–ë–†–ê–ù –î–ï–ö–û–†–ê–¢–û–† @reflection_router.message(...)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def process_gratitude(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."""
    user_id = message.from_user.id
    answer = message.text.strip()
    if not answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(gratitude=answer)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    db.log_scenario_step(user_id, 'evening_reflection', 'gratitude_provided', {
        'session_id': session_id,
        'answer_length': len(answer)
    })
    
    await logger_service.log_action(user_id, "evening_reflection_gratitude_provided", {"length": len(answer)})
    await message.answer(ASK_HARD_MOMENTS)
    await state.set_state(UserState.waiting_for_hard_moments)

# –£–ë–†–ê–ù –î–ï–ö–û–†–ê–¢–û–† @reflection_router.message(...)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def process_hard_moments(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ä–µ–∑—é–º–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
    user_id = message.from_user.id
    hard_moments_answer = message.text.strip()
    if not hard_moments_answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(hard_moments=hard_moments_answer)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö
    fsm_data = await state.get_data()
    session_id = fsm_data.get("session_id", "unknown")
    db.log_scenario_step(user_id, 'evening_reflection', 'hard_moments_provided', {
        'session_id': session_id,
        'answer_length': len(hard_moments_answer)
    })
    
    await logger_service.log_action(user_id, "evening_reflection_hard_provided", {"length": len(hard_moments_answer)})

    # --- –ù–û–í–´–ô –ö–û–î: –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –ò–ò ---
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–∫–ª–∏–∫
        await message.bot.send_chat_action(user_id, 'typing')
        empathetic_response = await get_empathetic_response(hard_moments_answer)
        
        if empathetic_response:
            await message.answer(empathetic_response)
            await logger_service.log_action(user_id, "evening_reflection_empathetic_response_sent")
        else:
            # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ò–ò –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç
            await message.answer("–û—á–µ–Ω—å —Å–æ—á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å —ç—Ç–æ. –¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã –∏ –ø–æ–Ω—è—Ç–Ω—ã.")
            await logger_service.log_action(user_id, "evening_reflection_empathetic_response_failed", {"reason": "AI service returned None"})
            
    except Exception as empathetic_err:
        logger.error(f"Error during empathetic response generation for user {user_id}: {empathetic_err}", exc_info=True)
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fallback_messages = [
            "–û—á–µ–Ω—å —Å–æ—á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å —ç—Ç–æ. –¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã –∏ –ø–æ–Ω—è—Ç–Ω—ã.",
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å —ç—Ç–∏–º —Å–æ –º–Ω–æ–π. –Ø —Å–ª—ã—à—É —Ç–µ–±—è –∏ –ø–æ–Ω–∏–º–∞—é.",
            "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–π –º–æ–º–µ–Ω—Ç. –¢—ã –Ω–µ –æ–¥–Ω–∞, –∏ —Ç–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
        ]
        import random
        fallback_message = random.choice(fallback_messages)
        await message.answer(fallback_message)
        await logger_service.log_action(user_id, "evening_reflection_empathetic_response_failed", {"reason": str(empathetic_err)})
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

    # --- –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AI ---
    data = await state.get_data()
    ai_summary_text = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–µ–∑—é–º–µ
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∑—é–º–µ
        await message.bot.send_chat_action(user_id, 'typing') # <--- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        # –ö–∞—Ä—Ç—ã –Ω–µ –∏–º–µ—é—Ç –Ω–∞–∑–≤–∞–Ω–∏–π/–∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –∫–∞—Ä—Ç—ã
        ai_summary_text = await get_reflection_summary_and_card_synergy(user_id, data, db, None, None)

        if ai_summary_text:
            await message.answer(f"{MSG_AI_SUMMARY_PREFIX}<i>{ai_summary_text}</i>", parse_mode="HTML") # –î–æ–±–∞–≤–ª–µ–Ω parse_mode HTML
            await logger_service.log_action(user_id, "evening_reflection_summary_sent")
        else:
            # –ï—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ ai_service)
            fallback_messages = [
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–∏—Ç–æ–≥, –Ω–æ —Ç–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –∏–º–∏.",
                "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AI-—Ä–µ–∑—é–º–µ, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —ç—Ç–æ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞. –û–Ω–∏ –±–µ—Å—Ü–µ–Ω–Ω—ã! ‚ú®",
                "AI-–∏—Ç–æ–≥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –Ω–æ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–ª—É–±–∏–Ω—É —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞. –≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! üåü"
            ]
            import random
            fallback_message = random.choice(fallback_messages)
            await message.answer(fallback_message)
            await logger_service.log_action(user_id, "evening_reflection_summary_failed", {"reason": "AI service returned None"})

    except Exception as ai_err:
        logger.error(f"Error during AI reflection summary generation for user {user_id}: {ai_err}", exc_info=True)
        fallback_messages = [
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–∏—Ç–æ–≥, –Ω–æ —Ç–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –∏–º–∏.",
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AI-—Ä–µ–∑—é–º–µ, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —ç—Ç–æ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞. –û–Ω–∏ –±–µ—Å—Ü–µ–Ω–Ω—ã! ‚ú®",
            "AI-–∏—Ç–æ–≥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –Ω–æ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–ª—É–±–∏–Ω—É —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞. –≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! üåü"
        ]
        import random
        fallback_message = random.choice(fallback_messages)
        await message.answer(fallback_message, parse_mode="HTML") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await logger_service.log_action(user_id, "evening_reflection_summary_failed", {"reason": str(ai_err)})
        ai_summary_text = None # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ –ë–î –Ω–µ –∑–∞–ø–∏—à–µ—Ç—Å—è –æ—à–∏–±–∫–∞
    # --- –ö–û–ù–ï–¶ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AI ---

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î (–≤–∫–ª—é—á–∞—è ai_summary_text, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å None)
    good_moments = data.get("good_moments")
    gratitude = data.get("gratitude")

    try:
        today_str = datetime.now(TIMEZONE).strftime('%Y-%m-%d')
        created_at_iso = datetime.now(TIMEZONE).isoformat()
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ë–ò–†–ê–ï–ú await –ü–ï–†–ï–î db.save_evening_reflection ---
        db.save_evening_reflection(
            user_id=user_id,
            date=today_str,
            good_moments=good_moments,
            gratitude=gratitude,
            hard_moments=hard_moments_answer,
            created_at=created_at_iso,
            ai_summary=ai_summary_text # <--- –ü–ï–†–ï–î–ê–ï–ú –†–ï–ó–Æ–ú–ï
        )
        # –õ–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ db.save_evening_reflection
        await logger_service.log_action(user_id, "evening_reflection_saved_to_db") # –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—â–∏–π –ª–æ–≥
    except Exception as db_err:
        logger.error(f"Failed to save evening reflection for user {user_id}: {db_err}", exc_info=True)
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–æ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è(–∞—Å—å)!")
        # –í–∞–∂–Ω–æ: –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è
        await state.clear()
        return # –í—ã—Ö–æ–¥–∏–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π "–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
    db.complete_user_scenario(user_id, 'evening_reflection', session_id)
    db.log_scenario_step(user_id, 'evening_reflection', 'completed', {
        'session_id': session_id,
        'ai_summary_generated': ai_summary_text is not None,
        'good_moments_length': len(good_moments) if good_moments else 0,
        'gratitude_length': len(gratitude) if gratitude else 0,
        'hard_moments_length': len(hard_moments_answer)
    })
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é)
    await message.answer(MSG_CONCLUSION, reply_markup=await get_main_menu(user_id, db))
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
