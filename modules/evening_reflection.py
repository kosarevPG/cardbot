import logging
from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F, Router # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç)
# –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Å—å, —á—Ç–æ UserState –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ü–ï–†–ï–î –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–¥–µ—Å—å
from modules.user_management import UserState
from database.db import Database # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –∫–ª–∞—Å—Å—É Database
from modules.logging_service import LoggingService # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
from config import TIMEZONE
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ
from modules.card_of_the_day import get_main_menu

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
reflection_router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –í–µ—á–µ—Ä–Ω–µ–π –†–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
# –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ UserState –≤ user_management.py
# –ó–¥–µ—Å—å –º—ã –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

# --- –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---
MSG_INTRO = "–î–∞–≤–∞–π –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏–º —ç—Ç–æ—Ç –¥–µ–Ω—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç üåô"
ASK_GOOD_MOMENTS = "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ? –ß—Ç–æ –ø–æ–¥–∞—Ä–∏–ª–æ —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å, —Ç–µ–ø–ª–æ –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ?"
ASK_GRATITUDE = "–ó–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å?"
ASK_HARD_MOMENTS = "–ë—ã–ª–∏ –ª–∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–º–∏? –ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å?"
MSG_CONCLUSION = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª(–∞) —Å–µ–±–µ —ç—Ç–æ –≤–Ω–∏–º–∞–Ω–∏–µ. –¢—ã –º–æ–ª–æ–¥–µ—Ü.\n–ü—É—Å—Ç—å –Ω–æ—á—å –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ–π, –∞ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–º –Ω–∞—á–∞–ª–æ–º ‚ú®"
MSG_INPUT_ERROR = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–º."

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

async def start_evening_reflection(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–ù–∞—á–∞–ª–æ —Ñ–ª–æ—É '–ò—Ç–æ–≥ –¥–Ω—è'."""
    user_id = message.from_user.id
    await logger_service.log_action(user_id, "evening_reflection_started")
    await message.answer(MSG_INTRO)
    await message.answer(ASK_GOOD_MOMENTS)
    await state.set_state(UserState.waiting_for_good_moments)

@reflection_router.message(StateFilter(UserState.waiting_for_good_moments))
async def process_good_moments(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–æ—Ä–æ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö."""
    user_id = message.from_user.id
    answer = message.text.strip()
    if not answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(good_moments=answer)
    await logger_service.log_action(user_id, "evening_reflection_good_provided", {"length": len(answer)})
    await message.answer(ASK_GRATITUDE)
    await state.set_state(UserState.waiting_for_gratitude)

@reflection_router.message(StateFilter(UserState.waiting_for_gratitude))
async def process_gratitude(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."""
    user_id = message.from_user.id
    answer = message.text.strip()
    if not answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(gratitude=answer)
    await logger_service.log_action(user_id, "evening_reflection_gratitude_provided", {"length": len(answer)})
    await message.answer(ASK_HARD_MOMENTS)
    await state.set_state(UserState.waiting_for_hard_moments)

@reflection_router.message(StateFilter(UserState.waiting_for_hard_moments))
async def process_hard_moments(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
    user_id = message.from_user.id
    hard_moments_answer = message.text.strip()
    if not hard_moments_answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(hard_moments=hard_moments_answer)
    await logger_service.log_action(user_id, "evening_reflection_hard_provided", {"length": len(hard_moments_answer)})

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    data = await state.get_data()
    good_moments = data.get("good_moments")
    gratitude = data.get("gratitude")
    # hard_moments_answer —É–∂–µ –µ—Å—Ç—å

    try:
        today_str = datetime.now(TIMEZONE).strftime('%Y-%m-%d')
        created_at_iso = datetime.now(TIMEZONE).isoformat()
        await db.save_evening_reflection(
            user_id=user_id,
            date=today_str,
            good_moments=good_moments,
            gratitude=gratitude,
            hard_moments=hard_moments_answer,
            created_at=created_at_iso
        )
        await logger_service.log_action(user_id, "evening_reflection_saved_to_db")
    except Exception as e:
        logger.error(f"Failed to save evening reflection for user {user_id}: {e}", exc_info=True)
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é. –ù–æ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è(–∞—Å—å)!")
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∑–∞—Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await message.answer(MSG_CONCLUSION, reply_markup=await get_main_menu(user_id, db))
    await state.clear()
