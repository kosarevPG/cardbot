# modules/learn_cards.py
# –ú–æ–¥—É–ª—å –æ–±—É—á–µ–Ω–∏—è "–ö–∞–∫ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π"

import logging
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import datetime

try:
    from config_local import TIMEZONE
except ImportError:
    from config import TIMEZONE

from modules.user_management import LearnCardsFSM
from modules.ai_service import analyze_request
from database.db import Database

logger = logging.getLogger(__name__)

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===

# –¢–µ–∫—Å—Ç—ã –æ–±—É—á–∞—é—â–µ–≥–æ –º–æ–¥—É–ª—è
TEXTS = {
    "intro": (
        "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∞–∫—Ç–∏–∫—É \"–ö–∞–∫ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π\".\n\n"
        "–ö–∞—Ä—Ç–∞ ‚Äî –Ω–µ –æ—Ç–≤–µ—Ç, –∞ –∑–µ—Ä–∫–∞–ª–æ. –ß—Ç–æ–±—ã –æ–Ω–∞ –∑–∞–≥–æ–≤–æ—Ä–∏–ª–∞, –≤–∞–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∂–∏–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—Ç—å?"
    ),
    "theory_1": (
        "üåÄ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ú–ê–ö-–∫–∞—Ä—Ç—ã</b>\n\n"
        "–ö–∞—Ä—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç —Ç–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã.\n\n"
        "–ó–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª–∏–∫–∏."
    ),
    "theory_2": (
        "üîÆ <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å</b>\n\n"
        "–ó–∞–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –ª—É—á –≤–Ω–∏–º–∞–Ω–∏—è –≤–Ω—É—Ç—Ä—å.\n\n"
        "–ë–µ–∑ –Ω–µ–≥–æ –∫–∞—Ä—Ç–∞ –º–æ–ª—á–∏—Ç. –° –Ω–∏–º ‚Äî –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç."
    ),
    "theory_3": (
        "‚ö†Ô∏è <b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏</b>\n\n"
        "–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:\n"
        "‚Ä¢ \"–ü–æ—á–µ–º—É –æ–Ω —Ç–∞–∫ –¥–µ–ª–∞–µ—Ç?\"\n"
        "‚Ä¢ \"–ë—É–¥–µ—Ç –ª–∏ —É –º–µ–Ω—è —É—Å–ø–µ—Ö?\"\n"
        "‚Ä¢ \"–ú–Ω–µ –ø–ª–æ—Ö–æ.\"\n\n"
        "üåø –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
        "‚Ä¢ \"–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é, –∫–æ–≥–¥–∞ –æ–Ω —Ç–∞–∫ –¥–µ–ª–∞–µ—Ç?\"\n"
        "‚Ä¢ \"–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Å–æ –º–Ω–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?\""
    ),
    "steps": (
        "‚ú® <b>–¢—Ä–∏ —à–∞–≥–∞ –∫ –∂–∏–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É</b>\n\n"
        "1Ô∏è‚É£ –û—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ ‚Äî —á—Ç–æ —Å–æ –º–Ω–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?\n\n"
        "2Ô∏è‚É£ –ö —á—É–≤—Å—Ç–≤—É ‚Äî —á—Ç–æ —è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É—é?\n\n"
        "3Ô∏è‚É£ –ö –Ω–∞–º–µ—Ä–µ–Ω–∏—é ‚Äî —á—Ç–æ —è —Ö–æ—á—É –ø–æ–Ω—è—Ç—å, –æ—Ç–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç—å?"
    ),
    "trainer_intro": (
        "–°–µ–π—á–∞—Å —Ç—ã –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä—ã, –∞ –ø–æ—Ç–æ–º ‚Äî —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å."
    ),
    "trainer_examples": (
        "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã:\n\n"
        "‚ú¶ <i>\"–ü–æ—á–µ–º—É –æ–Ω –Ω–µ –∑–≤–æ–Ω–∏—Ç?\"</i> ‚Üí üîÑ <i>\"–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é, –∫–æ–≥–¥–∞ –æ–Ω –º–æ–ª—á–∏—Ç?\"</i>\n\n"
        "‚ú¶ <i>\"–ö–æ–≥–¥–∞ —è —Å—Ç–∞–Ω—É —É—Å–ø–µ—à–Ω–æ–π?\"</i> ‚Üí üîÑ <i>\"–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —É—Å–ø–µ—Ö —É–∂–µ —Å–µ–π—á–∞—Å?\"</i>\n\n"
        "–í–∏–¥–∏—à—å —Ä–∞–∑–Ω–∏—Ü—É? –§–æ–∫—É—Å —Å–º–µ—â–∞–µ—Ç—Å—è —Å –≤–Ω–µ—à–Ω–µ–≥–æ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ, —Å \"–æ–Ω–∏\" –Ω–∞ \"—è\"."
    ),
    "trainer_input": (
        "–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! ‚úçÔ∏è\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∫–∞—Ä—Ç–µ. –ù–µ –±–æ–π—Å—è –æ—à–∏–±–æ–∫ ‚Äî —è –ø–æ–º–æ–≥—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."
    ),
    "choice_menu": (
        "–•–æ—á–µ—à—å –æ—Å–≤–µ–∂–∏—Ç—å —Ç–µ–æ—Ä–∏—é –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?"
    ),
}

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏
EXAMPLE_TEMPLATES = [
    "–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ [—Å–∏—Ç—É–∞—Ü–∏—è]?",
    "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å [—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç]?",
    "–ß—Ç–æ –º–Ω–µ –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å –ø—Ä–æ [—Ç–µ–º–∞]?"
]


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def create_inline_keyboard(buttons_data):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.
    
    Args:
        buttons_data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (text, callback_data) –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Ä—è–¥–æ–≤
    """
    if not buttons_data:
        return None
    
    keyboard = []
    for item in buttons_data:
        if isinstance(item, list):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, —Å–æ–∑–¥–∞–µ–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            row = [types.InlineKeyboardButton(text=text, callback_data=callback) for text, callback in item]
            keyboard.append(row)
        else:
            # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥—É
            text, callback = item
            keyboard.append([types.InlineKeyboardButton(text=text, callback_data=callback)])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_or_create_progress(db: Database, user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
    """
    progress = db.get_training_progress(user_id)
    if not progress:
        db.init_training_progress(user_id)
        progress = db.get_training_progress(user_id)
    return progress


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start_learning(message: types.Message, state: FSMContext, db: Database):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ /learn_cards - –Ω–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = await get_or_create_progress(db, user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–æ—Ä–∏—é
    if progress and progress.get('theory_passed'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–±—É—á–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        keyboard = create_inline_keyboard([
            ("üîÅ –¢–µ–æ—Ä–∏—è –∑–∞–Ω–æ–≤–æ", "learn_theory"),
            ("üß™ –°—Ä–∞–∑—É –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ", "learn_practice")
        ])
        await message.answer(TEXTS["choice_menu"], reply_markup=keyboard)
    else:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        keyboard = create_inline_keyboard([
            ("–î–∞, —Ö–æ—á—É üåô", "learn_intro_yes"),
            ("–ü–æ–∫–∞ –Ω–µ—Ç", "learn_intro_no")
        ])
        await message.answer(TEXTS["intro"], reply_markup=keyboard)
        await state.set_state(LearnCardsFSM.intro)


async def start_practice_command(message: types.Message, state: FSMContext, db: Database):
    """
    –ö–æ–º–∞–Ω–¥–∞ /practice - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –±–µ–∑ —Ç–µ–æ—Ä–∏–∏.
    """
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await get_or_create_progress(db, user_id)
    
    # –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
    session_id = db.start_training_session(user_id)
    await state.update_data(
        session_id=session_id,
        attempts_count=0,
        max_attempts=2,  # –î–ª—è /practice –ª–∏–º–∏—Ç 2 –ø–æ–ø—ã—Ç–∫–∏
        is_practice_mode=True
    )
    
    await message.answer(
        "üß™ <b>–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n"
        "–î–∞–≤–∞–π —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±—É–µ–º! –£ —Ç–µ–±—è –±—É–¥–µ—Ç 2 –ø–æ–ø—ã—Ç–∫–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø—Ä–∏–º–µ—Ä–∞–º
    await handle_trainer_examples(message, state, db, from_callback=False)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–û–ô –ß–ê–°–¢–ò ===

async def handle_intro_yes(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–î–∞, —Ö–æ—á—É' –≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    keyboard = create_inline_keyboard([("–î–∞–ª–µ–µ ‚û°Ô∏è", "learn_theory_1")])
    await callback.message.answer(TEXTS["theory_1"], reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LearnCardsFSM.theory_1)


async def handle_intro_no(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ü–æ–∫–∞ –Ω–µ—Ç' –≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞! üåô\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /learn_cards –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞."
    )
    await state.clear()


async def handle_theory_1(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–æ—Ä–∏–∏ 2."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    keyboard = create_inline_keyboard([("–î–∞–ª–µ–µ ‚û°Ô∏è", "learn_theory_2")])
    await callback.message.answer(TEXTS["theory_2"], reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LearnCardsFSM.theory_2)


async def handle_theory_2(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–æ—Ä–∏–∏ 3."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    keyboard = create_inline_keyboard([("–î–∞–ª–µ–µ ‚û°Ô∏è", "learn_theory_3")])
    await callback.message.answer(TEXTS["theory_3"], reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LearnCardsFSM.theory_3)


async def handle_theory_3(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —à–∞–≥–∞–º."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    keyboard = create_inline_keyboard([("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ üéì", "learn_steps")])
    await callback.message.answer(TEXTS["steps"], reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LearnCardsFSM.steps)


async def handle_steps(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ."""
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–æ—Ä–∏—é –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é
    db.update_training_progress(user_id, {"theory_passed": True})
    
    # –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
    session_id = db.start_training_session(user_id)
    await state.update_data(
        session_id=session_id,
        attempts_count=0,
        is_practice_mode=False
    )
    
    keyboard = create_inline_keyboard([("–î–∞–≤–∞–π! üí´", "learn_trainer_intro")])
    await callback.message.answer(TEXTS["trainer_intro"], reply_markup=keyboard)
    await state.set_state(LearnCardsFSM.trainer_intro)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ô –ß–ê–°–¢–ò ===

async def handle_trainer_intro(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    await handle_trainer_examples(callback.message, state, db, from_callback=True)


async def handle_trainer_examples(message: types.Message, state: FSMContext, db: Database, from_callback: bool = True):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∑–∞–ø—Ä–æ—Å–∞."""
    keyboard = create_inline_keyboard([
        ("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∞–º–æ–π ‚úçÔ∏è", "learn_trainer_input"),
        ("–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ü§î", "learn_show_templates")
    ])
    
    await message.answer(TEXTS["trainer_examples"], reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LearnCardsFSM.trainer_examples)


async def handle_show_templates(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    await callback.answer()
    
    templates_text = "üí° <b>–®–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞:</b>\n\n" + "\n".join(
        [f"{i+1}. {template}" for i, template in enumerate(EXAMPLE_TEMPLATES)]
    )
    templates_text += "\n\n<i>–ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π!</i>"
    
    await callback.message.answer(templates_text, parse_mode="HTML")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(LearnCardsFSM.trainer_user_input)


async def handle_trainer_input(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    await callback.message.answer(TEXTS["trainer_input"])
    await state.set_state(LearnCardsFSM.trainer_user_input)


async def handle_user_request_input(message: types.Message, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–ø—Ä–æ—Å–∞.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò –∏ –¥–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
    """
    user_id = message.from_user.id
    request_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not request_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    if len(request_text) < 5:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (—Ö–æ—Ç—è –±—ã 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    processing_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å... ‚è≥")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò
        analysis = await analyze_request(request_text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await processing_msg.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        data = await state.get_data()
        session_id = data.get('session_id')
        attempts_count = data.get('attempts_count', 0) + 1
        is_practice_mode = data.get('is_practice_mode', False)
        max_attempts = data.get('max_attempts', 999)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        await state.update_data(
            attempts_count=attempts_count,
            last_request=request_text,
            last_analysis=analysis
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        if session_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫
            current_session = db.get_training_session(session_id)
            ai_feedback = current_session.get('ai_feedback', {}) if current_session else {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            if isinstance(ai_feedback, dict):
                ai_feedback[f'attempt_{attempts_count}'] = analysis
            else:
                ai_feedback = {f'attempt_{attempts_count}': analysis}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º best_score –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ª—É—á—à–µ
            best_score = max(analysis['score'], current_session.get('best_score', 0)) if current_session else analysis['score']
            
            db.update_training_session(session_id, {
                'attempts': attempts_count,
                'best_score': best_score,
                'final_tone': analysis['tone'],
                'ai_feedback': ai_feedback
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞
        response_text = f"<b>–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å:</b>\n<i>\"{request_text}\"</i>\n\n"
        
        if analysis['tone'] == 'resourceful':
            response_text += f"üåø {analysis['message']}\n\n<b>–û—Ü–µ–Ω–∫–∞: {analysis['score']}/100</b>"
            buttons = [
                ("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ? ‚ú®", "learn_complete_success")
            ]
        elif analysis['tone'] == 'neutral':
            response_text += f"üí´ {analysis['message']}\n\n<b>–û—Ü–µ–Ω–∫–∞: {analysis['score']}/100</b>"
            buttons = [
                ("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ üîÑ", "learn_retry"),
                ("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫ üåø", "learn_complete_neutral")
            ]
        else:  # external
            response_text += f"üåí {analysis['message']}\n\n<b>–û—Ü–µ–Ω–∫–∞: {analysis['score']}/100</b>"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
            if is_practice_mode and attempts_count >= max_attempts:
                response_text += "\n\n<i>–≠—Ç–æ –±—ã–ª–∞ —Ç–≤–æ—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.</i>"
                buttons = [
                    ("–ó–∞–≤–µ—Ä—à–∏—Ç—å üåô", "learn_complete_external")
                ]
            else:
                buttons = [
                    ("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", "learn_retry"),
                    ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã üëÄ", "learn_show_examples_again")
                ]
        
        keyboard = create_inline_keyboard(buttons)
        await message.answer(response_text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(LearnCardsFSM.trainer_feedback)
        
    except Exception as e:
        logger.error(f"Error analyzing user request for user {user_id}: {e}", exc_info=True)
        await processing_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /learn_cards –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
        )


async def handle_show_examples_again(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    await callback.answer()
    
    await callback.message.answer(TEXTS["trainer_examples"], parse_mode="HTML")
    await callback.message.answer(
        "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä.",
    )
    await state.set_state(LearnCardsFSM.trainer_user_input)


async def handle_retry(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –æ–Ω —Å—Ç–∞–ª –±–ª–∏–∂–µ –∫ —Ç–µ–±–µ.\n\n"
        "–í—Å–ø–æ–º–Ω–∏:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π '—è', '–º–Ω–µ', '–º–æ–π'\n"
        "‚Ä¢ –°–ø—Ä–∞—à–∏–≤–∞–π –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π '–ø–æ—á–µ–º—É', '–∫–æ–≥–¥–∞', '–±—É–¥–µ—Ç –ª–∏'"
    )
    await state.set_state(LearnCardsFSM.trainer_user_retry)


async def handle_user_retry_input(message: types.Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞)."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await handle_user_request_input(message, state, db)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù–ò–Ø ===

async def handle_complete_success(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    await handle_training_done(callback, state, db, success_level='resourceful')


async def handle_complete_neutral(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    await handle_training_done(callback, state, db, success_level='neutral')


async def handle_complete_external(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    await handle_training_done(callback, state, db, success_level='external')


async def handle_training_done(callback: types.CallbackQuery, state: FSMContext, db: Database, success_level: str = 'neutral'):
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        success_level: –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—Ö–∞ ('resourceful', 'neutral', 'external')
    """
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    data = await state.get_data()
    session_id = data.get('session_id')
    last_analysis = data.get('last_analysis', {})
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    if session_id:
        now = datetime.now(TIMEZONE).isoformat()
        db.update_training_session(session_id, {
            'finished_at': now
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        current_progress = db.get_training_progress(user_id)
        if current_progress:
            sessions_completed = current_progress.get('sessions_completed', 0) + 1
            best_score = max(last_analysis.get('score', 0), current_progress.get('best_score', 0))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º consecutive_resourceful
            if success_level == 'resourceful':
                consecutive = current_progress.get('consecutive_resourceful', 0) + 1
            else:
                consecutive = 0
            
            db.update_training_progress(user_id, {
                'sessions_completed': sessions_completed,
                'best_score': best_score,
                'consecutive_resourceful': consecutive,
                'last_session_at': now
            })
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    congrats_text = ""
    if success_level == 'resourceful':
        congrats_text = (
            "üåô –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–∞—Ä—Ç–æ–π.\n\n"
            "–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä—å, –∏ –∫–∞—Ä—Ç–∞ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –≥–ª—É–±–æ–∫–æ –∏ —Ç–æ—á–Ω–æ."
        )
    elif success_level == 'neutral':
        congrats_text = (
            "üåô –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.\n\n"
            "–° –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–Ω—ã–º–∏."
        )
    else:
        congrats_text = (
            "üåô –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∞–∫—Ç–∏–∫—É!\n\n"
            "–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Äî —ç—Ç–æ –Ω–∞–≤—ã–∫. –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–µ–º –ª–µ–≥—á–µ –±—É–¥–µ—Ç."
        )
    
    congrats_text += "\n\n–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –∫–∞—Ä—Ç–∞ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å?"
    
    keyboard = create_inline_keyboard([
        ("–î–∞, –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É üîÆ", "learn_draw_card"),
        ("–ü–æ–∑–∂–µ üåô", "learn_finish")
    ])
    
    await callback.message.answer(congrats_text, reply_markup=keyboard)
    await state.set_state(LearnCardsFSM.training_done)


async def handle_draw_card(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—é –∫–∞—Ä—Ç—ã –¥–Ω—è."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    data = await state.get_data()
    last_request = data.get('last_request', '')
    
    await state.clear()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
    from modules.card_of_the_day import handle_card_request
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–∏—à–ª–∏ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
    await state.update_data(from_learning=True, learning_request=last_request)
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –≤—ã—Ç—è–Ω–µ–º –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç—É. ‚ú®"
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ–ª–æ—É –∫–∞—Ä—Ç—ã –¥–Ω—è
    await handle_card_request(callback.message, state, db, logger)


async def handle_finish(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/learn_cards ‚Äî –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        "/practice ‚Äî –±—ã—Å—Ç—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (2 –ø–æ–ø—ã—Ç–∫–∏)"
    )
    
    await state.clear()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê (–¢–ï–û–†–ò–Ø/–ü–†–ê–ö–¢–ò–ö–ê) ===

async def handle_choice_theory(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–í—ã–±–æ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏."""
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ–æ—Ä–∏—é —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
    keyboard = create_inline_keyboard([("–î–∞–ª–µ–µ ‚û°Ô∏è", "learn_theory_1")])
    await callback.message.answer(TEXTS["theory_1"], reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LearnCardsFSM.theory_1)


async def handle_choice_practice(callback: types.CallbackQuery, state: FSMContext, db: Database):
    """–í—ã–±–æ—Ä —Å—Ä–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
    session_id = db.start_training_session(user_id)
    await state.update_data(
        session_id=session_id,
        attempts_count=0,
        is_practice_mode=False
    )
    
    await handle_trainer_examples(callback.message, state, db, from_callback=True)


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===

def register_learn_cards_handlers(dp, db: Database, logger_service, user_manager):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª—è –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        dp: Dispatcher
        db: Database instance
        logger_service: Logging service
        user_manager: User manager
    """
    # –°–æ–∑–¥–∞–µ–º partial —Ñ—É–Ω–∫—Ü–∏–∏ —Å db
    from functools import partial
    
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(
        partial(start_learning, db=db),
        Command("learn_cards")
    )
    
    dp.message.register(
        partial(start_practice_command, db=db),
        Command("practice")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏
    dp.callback_query.register(
        partial(handle_intro_yes, db=db),
        F.data == "learn_intro_yes"
    )
    
    dp.callback_query.register(
        partial(handle_intro_no, db=db),
        F.data == "learn_intro_no"
    )
    
    dp.callback_query.register(
        partial(handle_theory_1, db=db),
        F.data == "learn_theory_1"
    )
    
    dp.callback_query.register(
        partial(handle_theory_2, db=db),
        F.data == "learn_theory_2"
    )
    
    dp.callback_query.register(
        partial(handle_theory_3, db=db),
        F.data == "learn_theory_3"
    )
    
    dp.callback_query.register(
        partial(handle_steps, db=db),
        F.data == "learn_steps"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏
    dp.callback_query.register(
        partial(handle_trainer_intro, db=db),
        F.data == "learn_trainer_intro"
    )
    
    dp.callback_query.register(
        partial(handle_trainer_input, db=db),
        F.data == "learn_trainer_input"
    )
    
    dp.callback_query.register(
        partial(handle_show_templates, db=db),
        F.data == "learn_show_templates"
    )
    
    dp.callback_query.register(
        partial(handle_show_examples_again, db=db),
        F.data == "learn_show_examples_again"
    )
    
    dp.callback_query.register(
        partial(handle_retry, db=db),
        F.data == "learn_retry"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    dp.callback_query.register(
        partial(handle_complete_success, db=db),
        F.data == "learn_complete_success"
    )
    
    dp.callback_query.register(
        partial(handle_complete_neutral, db=db),
        F.data == "learn_complete_neutral"
    )
    
    dp.callback_query.register(
        partial(handle_complete_external, db=db),
        F.data == "learn_complete_external"
    )
    
    dp.callback_query.register(
        partial(handle_draw_card, db=db),
        F.data == "learn_draw_card"
    )
    
    dp.callback_query.register(
        partial(handle_finish, db=db),
        F.data == "learn_finish"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–æ—Ä–∏—è/–ø—Ä–∞–∫—Ç–∏–∫–∞
    dp.callback_query.register(
        partial(handle_choice_theory, db=db),
        F.data == "learn_theory"
    )
    
    dp.callback_query.register(
        partial(handle_choice_practice, db=db),
        F.data == "learn_practice"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    dp.message.register(
        partial(handle_user_request_input, db=db),
        LearnCardsFSM.trainer_user_input
    )
    
    dp.message.register(
        partial(handle_user_retry_input, db=db),
        LearnCardsFSM.trainer_user_retry
    )
    
    logger.info("Learn cards handlers registered successfully")

