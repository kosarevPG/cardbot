# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
from aiogram import types
import logging
from .wb_api import test_wb_connection, get_wb_summary
from .ozon_api import test_ozon_connection, get_ozon_summary

logger = logging.getLogger(__name__)

async def cmd_wb_test(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API"""
    try:
        await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries API...")
        
        result = await test_wb_connection()
        await message.answer(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_test: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_wb_stats(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB"""
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Wildberries...")
        
        result = await get_wb_summary()
        await message.answer(result, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_stats: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_marketplace_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""
    help_text = """
üõçÔ∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏:**

**Wildberries:**
‚Ä¢ `/wb_test` - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API
‚Ä¢ `/wb_stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ `/wb_products` - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ `/wb_stocks` - –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤

**Ozon:**
‚Ä¢ `/ozon_test` - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon API
‚Ä¢ `/ozon_stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ `/ozon_products` - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ `/ozon_stocks` - –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤

**–û–±—â–∏–µ:**
‚Ä¢ `/marketplace_help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

---
üí° *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏ –≤ Amvera*
    """
    
    await message.answer(help_text, parse_mode="Markdown")

async def cmd_wb_products(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ WB"""
    try:
        await message.answer("üì¶ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_products: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_wb_stocks(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB"""
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        await message.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_stocks: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_test(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon API"""
    try:
        await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon API...")
        
        result = await test_ozon_connection()
        await message.answer(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_test: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_stats(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Ozon"""
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Ozon...")
        
        result = await get_ozon_summary()
        await message.answer(result, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_stats: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_products(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Ozon"""
    try:
        await message.answer("üì¶ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ Ozon...")
        
        from modules.ozon_api import get_ozon_products
        
        result = await get_ozon_products()
        if result["success"]:
            data = result["data"]
            if isinstance(data, dict) and "result" in data:
                items = data["result"].get("items", [])
                total = data["result"].get("total", 0)
                await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)} –∏–∑ {total}")
                
                if items:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    preview = "üìã **–ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
                    for i, item in enumerate(items[:3], 1):
                        offer_id = item.get("offer_id", "N/A")
                        product_id = item.get("product_id", "N/A")
                        archived = "üì¶" if not item.get("archived") else "üóÑÔ∏è"
                        preview += f"{i}. {archived} {offer_id} (ID: {product_id})\n"
                    
                    await message.answer(preview, parse_mode="Markdown")
                else:
                    await message.answer("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_products: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_stocks(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon"""
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Ozon...")
        
        from modules.ozon_api import get_ozon_stocks
        
        result = await get_ozon_stocks()
        if result["success"]:
            data = result["data"]
            if isinstance(data, dict) and "result" in data:
                items = data["result"].get("items", [])
                total = data["result"].get("total", 0)
                await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)} –∏–∑ {total}")
                
                if items:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ª–∏—á–∏–∏
                    preview = "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö:**\n\n"
                    for i, item in enumerate(items[:3], 1):
                        offer_id = item.get("offer_id", "N/A")
                        product_id = item.get("product_id", "N/A")
                        has_fbo = "‚úÖ" if item.get("has_fbo_stocks") else "‚ùå"
                        has_fbs = "‚úÖ" if item.get("has_fbs_stocks") else "‚ùå"
                        archived = "üóÑÔ∏è" if item.get("archived") else "üì¶"
                        preview += f"{i}. {archived} {offer_id} (ID: {product_id})\n"
                        preview += f"   FBO —Å–∫–ª–∞–¥—ã: {has_fbo} | FBS —Å–∫–ª–∞–¥—ã: {has_fbs}\n\n"
                    
                    await message.answer(preview, parse_mode="Markdown")
                else:
                    await message.answer("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_stocks: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def register_marketplace_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è aiogram 3.x
    from aiogram.filters import Command
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_wb_test, Command("wb_test"))
    dp.message.register(cmd_wb_stats, Command("wb_stats"))
    dp.message.register(cmd_wb_products, Command("wb_products"))
    dp.message.register(cmd_wb_stocks, Command("wb_stocks"))
    
    # –ö–æ–º–∞–Ω–¥—ã Ozon
    dp.message.register(cmd_ozon_test, Command("ozon_test"))
    dp.message.register(cmd_ozon_stats, Command("ozon_stats"))
    dp.message.register(cmd_ozon_products, Command("ozon_products"))
    dp.message.register(cmd_ozon_stocks, Command("ozon_stocks"))
    
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_marketplace_help, Command("marketplace_help"))
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
