# FORCE RESTART 2025-08-24 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï Any –ò–ú–ü–û–†–¢–ê
# FORCE RESTART 2025-08-24 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ozon_stocks_detailed - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
from aiogram import types
import logging
from .marketplace_manager import MarketplaceManager
from .google_sheets import test_google_sheets_connection, get_sheets_info, read_sheet_data

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
ADMIN_IDS = [6682555021]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def cmd_wb_test(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries API...")
        
        manager = MarketplaceManager()
        result = await manager.test_connections()
        
        if result["wildberries"] is True:
            await message.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries API: {result['wildberries']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_test: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_wb_stats(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Wildberries...")
        
        manager = MarketplaceManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WB API
        if not manager.wb_api_key:
            await message.answer("‚ùå Wildberries API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ WB_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        stocks_result = await manager.get_wb_stocks()
        if stocks_result["success"]:
            stocks = stocks_result["stocks"]
            total = len(stocks)
            
            summary = f"üìä **–°–≤–æ–¥–∫–∞ Wildberries**\n\n"
            summary += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n"
            
            if stocks:
                summary += "**–ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n"
                for i, stock_item in enumerate(stocks[:5], 1):
                    nm_id = stock_item.get("nmId", "N/A")
                    quantity = stock_item.get("quantity", 0)
                    summary += f"{i}. üì¶ {nm_id} - –û—Å—Ç–∞—Ç–æ–∫: {quantity} —à—Ç.\n"
            else:
                summary += "üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            await message.answer(summary, parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {stocks_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_stats: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_marketplace_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""
    help_text = """
üõçÔ∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏:**

**Wildberries:**
‚Ä¢ `/wb_test` - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API
‚Ä¢ `/wb_stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ `/wb_products` - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ `/wb_stocks` - –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤

**Ozon:**
‚Ä¢ `/ozon_test` - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon API
‚Ä¢ `/ozon_debug` - –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Ozon API
‚Ä¢ `/ozon_simple_test` - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ `/ozon_stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ `/ozon_products` - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 5, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
‚Ä¢ `/ozon_products_all` - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ `/ozon_products_detailed` - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö
‚Ä¢ `/ozon_stocks` - –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 5, —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
‚Ä¢ `/ozon_stocks_detailed` - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º
‚Ä¢ `/ozon_sync_all` - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å Google —Ç–∞–±–ª–∏—Ü–µ–π
‚Ä¢ `/ozon_sync_single OFFER_ID` - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

**Google Sheets:**
‚Ä¢ `/sheets_test` - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API
‚Ä¢ `/sheets_info SPREADSHEET_ID` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
‚Ä¢ `/sheets_read SPREADSHEET_ID [SHEET_NAME]` - –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

**–û–±—â–∏–µ:**
‚Ä¢ `/marketplace_help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

---
üîí *–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º*
üí° *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏ –≤ Amvera*
üìä *–î–ª—è Google Sheets –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç*
    """
    
    await message.answer(help_text, parse_mode="Markdown")

async def cmd_wb_products(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ WB"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üì¶ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_products: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_wb_stocks(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ WB"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        await message.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wb_stocks: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_test(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon API"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon API...")
        
        manager = MarketplaceManager()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        status = manager.get_status()
        ozon_status = status["ozon"]
        
        config_info = f"üìã **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Ozon API:**\n\n"
        config_info += f"üîë API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ozon_status['api_key'] else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        config_info += f"üÜî Client ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ozon_status['client_id'] else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        config_info += f"‚öôÔ∏è –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ozon_status['configured'] else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
        
        if ozon_status['configured']:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            result = await manager.test_connections()
            
            if result["ozon"] is True:
                config_info += "üîÑ **–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n"
                config_info += "üí° API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É `/v3/product/list`"
            else:
                config_info += f"üîÑ **–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ‚ùå –û—à–∏–±–∫–∞: {result['ozon']}\n\n"
                config_info += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Amvera"
        else:
            config_info += "‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞:** API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è\n\n"
            config_info += "üí° –î–æ–±–∞–≤—å—Ç–µ –≤ Amvera:\n"
            config_info += "‚Ä¢ `OZON_API_KEY`\n"
            config_info += "‚Ä¢ `OZON_CLIENT_ID`"
        
        await message.answer(config_info, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_test: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_debug(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Ozon API"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Ozon API...")
        
        manager = MarketplaceManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        ozon_api_key = os.getenv("OZON_API_KEY", "")
        ozon_client_id = os.getenv("OZON_CLIENT_ID", "")
        
        debug_info = f"üîç **–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Ozon API**\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        debug_info += f"üìã **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**\n"
        debug_info += f"üîë OZON_API_KEY: {'***' + ozon_api_key[-8:] if ozon_api_key else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}\n"
        debug_info += f"üÜî OZON_CLIENT_ID: {'***' + ozon_client_id[-8:] if ozon_client_id else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        status = manager.get_status()
        ozon_status = status["ozon"]
        
        debug_info += f"‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:**\n"
        debug_info += f"üîë API –∫–ª—é—á: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if ozon_status['api_key'] else '‚ùå –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω'}\n"
        debug_info += f"üÜî Client ID: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if ozon_status['client_id'] else '‚ùå –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω'}\n"
        debug_info += f"üåê Base URL: {manager.ozon_base_url}\n"
        debug_info += f"üîó –≠–Ω–¥–ø–æ–∏–Ω—Ç product_list: {manager.ozon_endpoints['product_list']}\n\n"
        
        if ozon_status['configured']:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            debug_info += f"üîÑ **–¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å...**\n"
            
            try:
                result = await manager.get_ozon_product_mapping(page_size=1)
                
                if result["success"]:
                    mapping = result["mapping"]
                    total = result["total_count"]
                    debug_info += f"‚úÖ **API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!**\n"
                    debug_info += f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(mapping)} –∏–∑ {total}\n"
                    
                    if mapping:
                        debug_info += f"üîç **–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:**\n"
                        for offer_id, product_id in list(mapping.items())[:1]:
                            debug_info += f"   ‚Ä¢ offer_id: {offer_id} - product_id: {product_id}\n"
                    else:
                        debug_info += f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞:** API –≤–µ—Ä–Ω—É–ª 0 —Ç–æ–≤–∞—Ä–æ–≤\n"
                        debug_info += f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        debug_info += f"   ‚Ä¢ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n"
                        debug_info += f"   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É\n"
                        debug_info += f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å–∫—Ä—ã—Ç—ã/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
                else:
                    debug_info += f"‚ùå **API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:**\n"
                    debug_info += f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                    if 'details' in result:
                        debug_info += f"   –î–µ—Ç–∞–ª–∏: {result['details']}\n"
                    
            except Exception as e:
                debug_info += f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:**\n"
                debug_info += f"   {str(e)}\n"
        else:
            debug_info += f"‚ö†Ô∏è **API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω** - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        
        await message.answer(debug_info, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_debug: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_simple_test(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        manager = MarketplaceManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ /v3/product/list
        try:
            result = await manager.get_ozon_products_simple(page_size=1)
            
            test_info = f"üîç **–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç /v3/product/list**\n\n"
            
            if result["success"]:
                products = result["products"]
                total = result["total_count"]
                test_info += f"‚úÖ **API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!**\n"
                test_info += f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
                test_info += f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}\n\n"
                
                if products:
                    test_info += f"üîç **–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:**\n"
                    first_product = products[0]
                    test_info += f"   ‚Ä¢ offer_id: {first_product.get('offer_id', '–ù–ï–¢')}\n"
                    test_info += f"   ‚Ä¢ product_id: {first_product.get('product_id', '–ù–ï–¢')}\n"
                    test_info += f"   ‚Ä¢ archived: {first_product.get('archived', '–ù–ï–¢')}\n"
                    test_info += f"   ‚Ä¢ has_fbo_stocks: {first_product.get('has_fbo_stocks', '–ù–ï–¢')}\n"
                    test_info += f"   ‚Ä¢ has_fbs_stocks: {first_product.get('has_fbs_stocks', '–ù–ï–¢')}\n"
                    test_info += f"   ‚Ä¢ is_discounted: {first_product.get('is_discounted', '–ù–ï–¢')}\n"
                else:
                    test_info += f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞:** API –≤–µ—Ä–Ω—É–ª 0 —Ç–æ–≤–∞—Ä–æ–≤\n"
                    test_info += f"üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                    test_info += f"   ‚Ä¢ –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Ozon\n"
                    test_info += f"   ‚Ä¢ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
                    test_info += f"   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ API\n"
            else:
                test_info += f"‚ùå **API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:**\n"
                test_info += f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                if 'details' in result:
                    test_info += f"   –î–µ—Ç–∞–ª–∏: {result['details']}\n"
                    
        except Exception as e:
            test_info = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:**\n"
            test_info += f"   {str(e)}\n"
        
        await message.answer(test_info, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_simple_test: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_stats(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Ozon...")
        
        manager = MarketplaceManager()
        
        # –ü–æ–ª—É—á–∞–µ–º mapping —Ç–æ–≤–∞—Ä–æ–≤
        mapping_result = await manager.get_ozon_product_mapping()
        if not mapping_result["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {mapping_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        mapping = mapping_result["mapping"]
        total = mapping_result["total_count"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary = f"üìä **–°–≤–æ–¥–∫–∞ Ozon**\n\n"
        summary += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n"
        
        if mapping:
            summary += "**–ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n"
            for i, (offer_id, product_id) in enumerate(list(mapping.items())[:5], 1):
                summary += f"{i}. {offer_id} - ID: {product_id}\n"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        try:
            from datetime import datetime, timedelta
            date_to = datetime.now().strftime("%Y-%m-%d")
            date_from = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
            analytics_result = await manager.get_ozon_analytics(date_from, date_to)
            
            if analytics_result["success"]:
                summary += f"\nüìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:**\n"
                summary += f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            else:
                summary += f"\nüìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
        except Exception as e:
            summary += f"\nüìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** ‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        
        await message.answer(summary, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_stats: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_products(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üì¶ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ Ozon...")
        
        manager = MarketplaceManager()
        
        result = await manager.get_ozon_product_mapping()
        if result["success"]:
            mapping = result["mapping"]
            total = result["total_count"]
            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(mapping)} –∏–∑ {total}")
            
            if mapping:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                preview = "üìã **–ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è):**\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
                product_ids = list(mapping.values())
                detailed_result = await manager.get_ozon_products_detailed(product_ids)
                
                if detailed_result["success"]:
                    products = detailed_result["products"]
                    
                    for i, (offer_id, product_id) in enumerate(list(mapping.items())[:5], 1):
                        product_info = products.get(str(product_id), {})
                        
                        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
                        archived = "üóÑÔ∏è" if product_info.get("archived") else "üì¶"
                        fbo_status = "‚úÖ" if product_info.get("has_fbo_stocks") else "‚ùå"
                        fbs_status = "‚úÖ" if product_info.get("has_fbs_stocks") else "‚ùå"
                        discount = "üè∑Ô∏è" if product_info.get("is_discounted") else ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                        product_name = product_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        
                        preview += f"{i}. {archived} **{offer_id}** (ID: {product_id})\n"
                        preview += f"   üìù **{product_name}**\n"
                        preview += f"   üìä FBO: {fbo_status} | FBS: {fbs_status} {discount}\n"
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
                        quants = product_info.get("quants", [])
                        if quants:
                            preview += f"   üìè –†–∞–∑–º–µ—Ä—ã: {len(quants)} —à—Ç.\n"
                        
                        preview += "\n"
                else:
                    # Fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    for i, (offer_id, product_id) in enumerate(list(mapping.items())[:5], 1):
                        preview += f"{i}. üì¶ {offer_id} (ID: {product_id})\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                if len(mapping) > 5:
                    preview += f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: 5 –∏–∑ {len(mapping)} —Ç–æ–≤–∞—Ä–æ–≤"
                    preview += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ozon_products_all` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
                    preview += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ozon_products_detailed` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                
                await message.answer(preview, parse_mode="Markdown")
            else:
                await message.answer("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_products: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_products_all(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üì¶ –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ Ozon...")
        
        manager = MarketplaceManager()
        
        result = await manager.get_ozon_product_mapping()
        if result["success"]:
            mapping = result["mapping"]
            total = result["total_count"]
            
            if mapping:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                full_list = f"üìã **–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ Ozon**\n\n"
                full_list += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                product_ids = list(mapping.values())
                detailed_result = await manager.get_ozon_products_detailed(product_ids)
                
                if detailed_result["success"]:
                    products = detailed_result["products"]
                    
                    for i, (offer_id, product_id) in enumerate(mapping.items(), 1):
                        product_info = products.get(str(product_id), {})
                        product_name = product_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        full_list += f"{i:2d}. üì¶ {offer_id} (ID: {product_id})\n"
                        full_list += f"      ÔøΩÔøΩ {product_name}\n"
                else:
                    # Fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    for i, (offer_id, product_id) in enumerate(mapping.items(), 1):
                        full_list += f"{i:2d}. üì¶ {offer_id} (ID: {product_id})\n"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(full_list) > 4000:  # Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤
                    parts = []
                    current_part = ""
                    current_count = 0
                    
                    for i, (offer_id, product_id) in enumerate(mapping.items(), 1):
                        line = f"{i:2d}. üì¶ {offer_id} (ID: {product_id})\n"
                        
                        if len(current_part) + len(line) > 3500:
                            parts.append(f"üìã **–¢–æ–≤–∞—Ä—ã Ozon (—á–∞—Å—Ç—å {len(parts) + 1})**\n\n{current_part}")
                            current_part = line
                            current_count = 1
                        else:
                            current_part += line
                            current_count += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
                    if current_part:
                        parts.append(f"üìã **–¢–æ–≤–∞—Ä—ã Ozon (—á–∞—Å—Ç—å {len(parts) + 1})**\n\n{current_part}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
                    for i, part in enumerate(parts):
                        if i == 0:
                            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n{part}", parse_mode="Markdown")
                        else:
                            await message.answer(part, parse_mode="Markdown")
                else:
                    await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n{full_list}", parse_mode="Markdown")
            else:
                await message.answer("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_products_all: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_products_detailed(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üì¶ –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö Ozon...")
        
        manager = MarketplaceManager()
        
        result = await manager.get_ozon_product_mapping()
        if result["success"]:
            mapping = result["mapping"]
            total = result["total_count"]
            
            if mapping:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                product_ids = list(mapping.values())
                detailed_result = await manager.get_ozon_products_detailed(product_ids)
                
                if detailed_result["success"]:
                    products = detailed_result["products"]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                    detailed_report = f"üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö Ozon**\n\n"
                    detailed_report += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    archived_count = sum(1 for p in products.values() if p.get("archived"))
                    fbo_count = sum(1 for p in products.values() if p.get("has_fbo_stocks"))
                    fbs_count = sum(1 for p in products.values() if p.get("has_fbs_stocks"))
                    discounted_count = sum(1 for p in products.values() if p.get("is_discounted"))
                    
                    detailed_report += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    detailed_report += f"‚Ä¢ –ê—Ä—Ö–∏–≤–Ω—ã—Ö: {archived_count}\n"
                    detailed_report += f"‚Ä¢ –° FBO –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {fbo_count}\n"
                    detailed_report += f"‚Ä¢ –° FBS –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {fbs_count}\n"
                    detailed_report += f"‚Ä¢ –°–æ —Å–∫–∏–¥–∫–∞–º–∏: {discounted_count}\n\n"
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
                    for i, (offer_id, product_id) in enumerate(mapping.items(), 1):
                        product_info = products.get(str(product_id), {})
                        
                        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
                        archived = "üóÑÔ∏è –ê–†–•–ò–í" if product_info.get("archived") else "üì¶ –ê–ö–¢–ò–í–ï–ù"
                        fbo_status = "‚úÖ –ï–°–¢–¨" if product_info.get("has_fbo_stocks") else "‚ùå –ù–ï–¢"
                        fbs_status = "‚úÖ –ï–°–¢–¨" if product_info.get("has_fbs_stocks") else "‚ùå –ù–ï–¢"
                        discount = "üè∑Ô∏è –°–ö–ò–î–ö–ê" if product_info.get("is_discounted") else ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                        product_name = product_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        
                        detailed_report += f"**{i:2d}. {offer_id}** (ID: {product_id})\n"
                        detailed_report += f"   üìù **{product_name}**\n"
                        detailed_report += f"   üìä –°—Ç–∞—Ç—É—Å: {archived}\n"
                        detailed_report += f"   üè™ FBO —Å–∫–ª–∞–¥—ã: {fbo_status}\n"
                        detailed_report += f"   üè™ FBS —Å–∫–ª–∞–¥—ã: {fbs_status}\n"
                        
                        if discount:
                            detailed_report += f"   {discount}\n"
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
                        quants = product_info.get("quants", [])
                        if quants:
                            detailed_report += f"   üìè –†–∞–∑–º–µ—Ä—ã ({len(quants)} —à—Ç.):\n"
                            for quant in quants[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–º–µ—Ä–∞
                                quant_code = quant.get("quant_code", "N/A")
                                quant_size = quant.get("quant_size", 0)
                                detailed_report += f"      ‚Ä¢ {quant_code}: {quant_size}\n"
                            
                            if len(quants) > 3:
                                detailed_report += f"      ... –∏ –µ—â–µ {len(quants) - 3} —Ä–∞–∑–º–µ—Ä–æ–≤\n"
                        
                        detailed_report += "\n"
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(detailed_report) > 4000:
                        parts = []
                        current_part = ""
                        
                        lines = detailed_report.split('\n')
                        for line in lines:
                            if len(current_part) + len(line) + 1 > 3500:
                                parts.append(current_part.strip())
                                current_part = line + '\n'
                            else:
                                current_part += line + '\n'
                        
                        if current_part:
                            parts.append(current_part.strip())
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
                        for i, part in enumerate(parts):
                            if i == 0:
                                await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n{part}", parse_mode="Markdown")
                            else:
                                await message.answer(f"üìã **–¢–æ–≤–∞—Ä—ã Ozon (—á–∞—Å—Ç—å {i + 1})**\n\n{part}", parse_mode="Markdown")
                    else:
                        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n{detailed_report}", parse_mode="Markdown")
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {detailed_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                await message.answer("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_products_detailed: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_stocks(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Ozon...")
        
        manager = MarketplaceManager()
        
        # –ü–æ–ª—É—á–∞–µ–º mapping —Ç–æ–≤–∞—Ä–æ–≤
        mapping_result = await manager.get_ozon_product_mapping()
        if not mapping_result["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {mapping_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        mapping = mapping_result["mapping"]
        product_ids = list(mapping.values())
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        stocks_result = await manager.get_ozon_stocks(product_ids)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_result}")
        
        if stocks_result["success"]:
            stocks = stocks_result["stocks"]
            total = len(mapping)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è {len(stocks)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {total}")
            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(stocks)} –∏–∑ {total}")
            
            if stocks:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ª–∏—á–∏–∏
                preview = "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö:**\n\n"
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                product_ids = list(mapping.values())
                detailed_result = await manager.get_ozon_products_detailed(product_ids)
                
                if detailed_result["success"]:
                    products = detailed_result["products"]
                    
                    for i, (offer_id, product_id) in enumerate(list(mapping.items())[:5], 1):
                        stock_info = stocks.get(str(product_id), {})
                        product_info = products.get(str(product_id), {})
                        product_name = product_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        if isinstance(stock_info, dict):
                            total_stock = stock_info.get("total", 0)
                            warehouses = stock_info.get("warehouses", [])
                            
                            preview += f"{i}. üì¶ {offer_id} (ID: {product_id})\n"
                            preview += f"   üìù {product_name}\n"
                            preview += f"   üìä **–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total_stock} —à—Ç.**\n"
                            
                            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º
                            if warehouses:
                                preview += f"   üè™ **–ü–æ —Å–∫–ª–∞–¥–∞–º:**\n"
                                for warehouse in warehouses[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞
                                    preview += f"      ‚Ä¢ {warehouse['name']}: {warehouse['stock']} —à—Ç. (—Ä–µ–∑–µ—Ä–≤: {warehouse['reserved']})\n"
                                
                                if len(warehouses) > 3:
                                    preview += f"      ... –∏ –µ—â–µ {len(warehouses) - 3} —Å–∫–ª–∞–¥–æ–≤\n"
                            else:
                                preview += f"   üè™ **–°–∫–ª–∞–¥—ã:** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                        else:
                            # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                            stock_count = stock_info if isinstance(stock_info, (int, str)) else 0
                            preview += f"{i}. üì¶ {offer_id} (ID: {product_id})\n"
                            preview += f"   üìù {product_name}\n"
                            preview += f"   üìä –û—Å—Ç–∞—Ç–æ–∫: {stock_count} —à—Ç.\n"
                        
                        preview += "\n"
                else:
                    # Fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    for i, (offer_id, product_id) in enumerate(list(mapping.items())[:5], 1):
                        stock_info = stocks.get(str(product_id), {})
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        if isinstance(stock_info, dict):
                            total_stock = stock_info.get("total", 0)
                            preview += f"{i}. üì¶ {offer_id} (ID: {product_id})\n"
                            preview += f"   üìä –û—Å—Ç–∞—Ç–æ–∫: {total_stock} —à—Ç.\n\n"
                        else:
                            # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                            stock_count = stock_info if isinstance(stock_info, (int, str)) else 0
                            preview += f"{i}. üì¶ {offer_id} (ID: {product_id})\n"
                            preview += f"   üìä –û—Å—Ç–∞—Ç–æ–∫: {stock_count} —à—Ç.\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                if len(mapping) > 5:
                    preview += f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: 5 –∏–∑ {len(mapping)} —Ç–æ–≤–∞—Ä–æ–≤"
                    preview += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ozon_stocks_all` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
                
                await message.answer(preview, parse_mode="Markdown")
            else:
                await message.answer("üì≠ –û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_stocks: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_google_sheets_test(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API...")
        
        result = await test_google_sheets_connection()
        await message.answer(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ google_sheets_test: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_google_sheets_info(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Google —Ç–∞–±–ª–∏—Ü–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /sheets_info SPREADSHEET_ID
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã: `/sheets_info SPREADSHEET_ID`")
            return
        
        spreadsheet_id = command_parts[1]
        await message.answer(f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}...")
        
        result = await get_sheets_info(spreadsheet_id)
        if result["success"]:
            info = result
            response = f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ:**\n\n"
            response += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {info['spreadsheet_title']}\n"
            response += f"**ID:** `{info['spreadsheet_id']}`\n"
            response += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤:** {info['sheets_count']}\n\n"
            
            if info['sheets']:
                response += "**–õ–∏—Å—Ç—ã:**\n"
                for i, sheet in enumerate(info['sheets'][:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    response += f"{i}. {sheet['title']} ({sheet['row_count']}√ó{sheet['col_count']})\n"
                
                if len(info['sheets']) > 5:
                    response += f"\n... –∏ –µ—â–µ {len(info['sheets']) - 5} –ª–∏—Å—Ç–æ–≤"
            
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ google_sheets_info: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_google_sheets_read(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /sheets_read SPREADSHEET_ID [SHEET_NAME]
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã: `/sheets_read SPREADSHEET_ID [SHEET_NAME]`")
            return
        
        spreadsheet_id = command_parts[1]
        sheet_name = command_parts[2] if len(command_parts) > 2 else None
        
        await message.answer(f"üìñ –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {spreadsheet_id}...")
        
        result = await read_sheet_data(spreadsheet_id, sheet_name)
        if result["success"]:
            data = result["data"]
            response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:**\n\n"
            response += f"**–¢–∞–±–ª–∏—Ü–∞:** {result['spreadsheet_title']}\n"
            response += f"**–õ–∏—Å—Ç:** {result['sheet_name']}\n"
            response += f"**–†–∞–∑–º–µ—Ä:** {result['rows']}√ó{result['columns']}\n\n"
            
            if data and len(data) > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                response += "**–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:**\n"
                for i, row in enumerate(data[:5], 1):
                    row_text = " | ".join(str(cell) for cell in row[:5])  # –ü–µ—Ä–≤—ã–µ 5 —è—á–µ–µ–∫
                    if len(row) > 5:
                        row_text += " ..."
                    response += f"{i}. {row_text}\n"
                
                if len(data) > 5:
                    response += f"\n... –∏ –µ—â–µ {len(data) - 5} —Å—Ç—Ä–æ–∫"
            else:
                response += "üì≠ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ google_sheets_read: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_sync_all(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Ozon —Å Google —Ç–∞–±–ª–∏—Ü–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Ozon —Å Google —Ç–∞–±–ª–∏—Ü–µ–π...\n\n‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        
        manager = MarketplaceManager()
        result = await manager.sync_ozon_data()
        
        if result["success"]:
            message_text = f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            message_text += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            message_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result['data'])}\n"
            message_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {len(result['data'])}\n"
            message_text += f"‚Ä¢ –û—à–∏–±–æ–∫: 0\n\n"
            message_text += f"üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü–µ"
            
            await message.answer(message_text, parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_sync_all: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_sync_single(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ offer_id Ozon —Å Google —Ç–∞–±–ª–∏—Ü–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /ozon_sync_single OFFER_ID
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ offer_id: `/ozon_sync_single OFFER_ID`")
            return
        
        offer_id = command_parts[1]
        await message.answer(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {offer_id}...")
        
        result = await sync_single_ozon_offer(offer_id)
        await message.answer(result, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_sync_single: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_stocks_detailed(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö Ozon –ø–æ —Å–∫–ª–∞–¥–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ozon...")
        
        manager = MarketplaceManager()
        
        # –ü–æ–ª—É—á–∞–µ–º mapping —Ç–æ–≤–∞—Ä–æ–≤
        mapping_result = await manager.get_ozon_product_mapping()
        if not mapping_result["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {mapping_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        mapping = mapping_result["mapping"]
        product_ids = list(mapping.values())
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ offer_id (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        offer_ids = list(mapping.keys())
        stocks_result = await manager.get_ozon_stocks_by_offer(offer_ids)
        
        if stocks_result["success"]:
            stocks = stocks_result["stocks"]
            total = len(mapping)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_result}")
            logger.info(f"stocks={stocks}")
            
            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(stocks)} –∏–∑ {total}")
            
            if stocks and isinstance(stocks, dict):
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                detailed_result = await manager.get_ozon_products_detailed(product_ids)
                
                if detailed_result["success"]:
                    products = detailed_result["products"]
                    
                    # --- –ß–∏—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–∫–æ–ª–æ–Ω–∫–∞ B) –æ–¥–∏–Ω —Ä–∞–∑ ---
                    try:
                        sheet_rows = await manager.sheets_api.read_data(
                            manager.spreadsheet_id,
                            f"{manager.sheet_name}!B:D"  # B=–ù–∞–∑–≤–∞–Ω–∏–µ, D=offer_id
                        )
                        sheet_name_by_offer = {
                            row[2]: row[0] for row in sheet_rows if len(row) >= 3 and row[2]
                        }
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                        sheet_name_by_offer = {}
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
                    detailed_report = f"üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö Ozon**\n\n"
                    detailed_report += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
                    total_stock_sum = 0
                    products_with_stock = 0
                    products_without_stock = 0
                    
                    for offer_id in mapping.keys():
                        stock_info = stocks.get(offer_id, {})
                        if isinstance(stock_info, dict):
                            total_stock = stock_info.get("total", 0)
                            total_stock_sum += total_stock
                            if total_stock > 0:
                                products_with_stock += 1
                            else:
                                products_without_stock += 1
                    
                    detailed_report += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤:**\n"
                    detailed_report += f"‚Ä¢ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total_stock_sum} —à—Ç.\n"
                    detailed_report += f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {products_with_stock}\n"
                    detailed_report += f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: {products_without_stock}\n\n"
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
                    for i, (offer_id, product_id) in enumerate(mapping.items(), 1):
                        stock_info = stocks.get(offer_id, {})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º offer_id
                        product_info = products.get(str(product_id), {})
                        product_name = product_info.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        if product_name == "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è":
                            product_name = sheet_name_by_offer.get(offer_id, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        
                        detailed_report += f"**{i:2d}. {offer_id}** (ID: {product_id})\n"
                        detailed_report += f"   üìù {product_name}\n"
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        if isinstance(stock_info, dict):
                            total_stock = stock_info.get("total", 0)
                            warehouses = stock_info.get("warehouses", [])
                            
                            detailed_report += f"   üìä **–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total_stock} —à—Ç.**\n"
                            
                            if warehouses:
                                detailed_report += f"   üè™ **–ü–æ —Å–∫–ª–∞–¥–∞–º:**\n"
                                for warehouse in warehouses:
                                    detailed_report += f"      ‚Ä¢ {warehouse['name']}: {warehouse['stock']} —à—Ç. (—Ä–µ–∑–µ—Ä–≤: {warehouse['reserved']})\n"
                            else:
                                detailed_report += f"   üè™ **–°–∫–ª–∞–¥—ã:** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                        else:
                            # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                            stock_count = stock_info if isinstance(stock_info, (int, str)) else 0
                            detailed_report += f"   üìä **–û—Å—Ç–∞—Ç–æ–∫: {stock_count} —à—Ç.**\n"
                        
                        detailed_report += "\n"
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(detailed_report) > 4000:
                        parts = []
                        current_part = ""
                        
                        lines = detailed_report.split('\n')
                        for line in lines:
                            if len(current_part) + len(line) + 1 > 3500:
                                parts.append(current_part.strip())
                                current_part = line + '\n'
                            else:
                                current_part += line + '\n'
                        
                        if current_part:
                            parts.append(current_part.strip())
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
                        for i, part in enumerate(parts):
                            if i == 0:
                                await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n{part}", parse_mode="Markdown")
                            else:
                                await message.answer(f"üìã **–û—Å—Ç–∞—Ç–∫–∏ Ozon (—á–∞—Å—Ç—å {i + 1})**\n\n{part}", parse_mode="Markdown")
                    else:
                        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n{detailed_report}", parse_mode="Markdown")
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {detailed_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                logger.warning(f"stocks –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π: {type(stocks)} = {stocks}")
                await message.answer("üì≠ –û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_stocks_detailed: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_ozon_debug_stocks(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ Ozon"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon...")
        
        manager = MarketplaceManager()
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        result = await manager.get_ozon_product_mapping()
        if not result["success"]:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {result.get('error')}")
            return
        
        mapping = result["mapping"]
        total = result["total_count"]
        
        if not mapping:
            await message.answer("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
        debug_info = f"üîç **–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon**\n\n"
        debug_info += f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n\n"
        
        for i, (offer_id, product_id) in enumerate(list(mapping.items())[:3], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
            debug_info += f"**{i}. –¢–æ–≤–∞—Ä {offer_id} (ID: {product_id})**\n"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
                test_payloads = [
                    {
                        "cursor": "",
                        "filter": {
                            "product_id": [product_id],
                            "visibility": "ALL"
                        },
                        "limit": 100
                    },
                    {
                        "cursor": "",
                        "filter": {
                            "product_id": [product_id]
                        },
                        "limit": 100
                    },
                    {
                        "cursor": "",
                        "filter": {
                            "offer_id": [offer_id],
                            "visibility": "ALL"
                        },
                        "limit": 100
                    }
                ]
                
                for j, payload in enumerate(test_payloads, 1):
                    debug_info += f"   üî¨ –¢–µ—Å—Ç {j}: {payload}\n"
                    
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º payload
                
                debug_info += "\n"
                
            except Exception as e:
                debug_info += f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}\n\n"
        
        debug_info += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        debug_info += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API –æ—Å—Ç–∞—Ç–∫–æ–≤\n"
        debug_info += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö\n"
        debug_info += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å offer_id –≤–º–µ—Å—Ç–æ product_id\n"
        
        await message.answer(debug_info, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ozon_debug_stocks: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def register_marketplace_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è aiogram 3.x
    from aiogram.filters import Command
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_wb_test, Command("wb_test"))
    dp.message.register(cmd_wb_stats, Command("wb_stats"))
    dp.message.register(cmd_wb_products, Command("wb_products"))
    dp.message.register(cmd_wb_stocks, Command("wb_stocks"))
    
    # –ö–æ–º–∞–Ω–¥—ã Ozon
    dp.message.register(cmd_ozon_test, Command("ozon_test"))
    dp.message.register(cmd_ozon_debug, Command("ozon_debug"))
    dp.message.register(cmd_ozon_simple_test, Command("ozon_simple_test"))
    dp.message.register(cmd_ozon_stats, Command("ozon_stats"))
    dp.message.register(cmd_ozon_products, Command("ozon_products"))
    dp.message.register(cmd_ozon_products_all, Command("ozon_products_all"))
    dp.message.register(cmd_ozon_products_detailed, Command("ozon_products_detailed"))
    dp.message.register(cmd_ozon_stocks, Command("ozon_stocks"))
    dp.message.register(cmd_ozon_stocks_detailed, Command("ozon_stocks_detailed"))
    dp.message.register(cmd_ozon_sync_all, Command("ozon_sync_all"))
    dp.message.register(cmd_ozon_sync_single, Command("ozon_sync_single"))
    dp.message.register(cmd_ozon_debug_stocks, Command("ozon_debug_stocks"))
    
    # –ö–æ–º–∞–Ω–¥—ã Google Sheets
    dp.message.register(cmd_google_sheets_test, Command("sheets_test"))
    dp.message.register(cmd_google_sheets_info, Command("sheets_info"))
    dp.message.register(cmd_google_sheets_read, Command("sheets_read"))
    
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_marketplace_help, Command("marketplace_help"))
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
