# –∫–æ–¥/modules/post_management.py

import asyncio
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
import pytz
from aiogram import Bot, types
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.enums import ParseMode
import logging

logger = logging.getLogger(__name__)

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class PostManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏."""
    
    def __init__(self, db, bot: Bot, logger_service):
        self.db = db
        self.bot = bot
        self.logger_service = logger_service
    
    def create_post(self, title: str, content: str, created_by: int, media_file_id: str = None) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç."""
        return self.db.create_post(title, content, created_by, media_file_id)
    
    def get_post(self, post_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç –ø–æ ID."""
        return self.db.get_post(post_id)
    
    def get_all_posts(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã."""
        return self.db.get_all_posts(limit)
    
    def update_post(self, post_id: int, title: str = None, content: str = None, media_file_id: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç."""
        return self.db.update_post(post_id, title, content, media_file_id)
    
    def delete_post(self, post_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç."""
        return self.db.delete_post(post_id)
    
    def create_mailing(self, post_id: int, title: str, send_to_all: bool, created_by: int,
                      target_user_ids: List[int] = None, scheduled_at: str = None) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
        if scheduled_at:
            scheduled_at = self._convert_moscow_to_utc(scheduled_at)
        
        return self.db.create_mailing(post_id, title, send_to_all, created_by, target_user_ids, scheduled_at)
    
    def get_mailing(self, mailing_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ ID."""
        return self.db.get_mailing(mailing_id)
    
    def get_all_mailings(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        return self.db.get_all_mailings(limit)
    
    def get_mailing_stats(self, mailing_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
        return self.db.get_mailing_stats(mailing_id)
    
    def _convert_moscow_to_utc(self, moscow_datetime: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC."""
        try:
            # –ü–∞—Ä—Å–∏–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            dt = datetime.strptime(moscow_datetime, "%Y-%m-%d %H:%M")
            moscow_dt = MOSCOW_TZ.localize(dt)
            utc_dt = moscow_dt.astimezone(pytz.UTC)
            return utc_dt.strftime("%Y-%m-%d %H:%M:%S")
        except Exception as e:
            logger.error(f"Error converting Moscow time to UTC: {e}")
            return moscow_datetime
    
    def _convert_utc_to_moscow(self, utc_datetime: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ."""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M"]:
                try:
                    dt = datetime.strptime(utc_datetime, fmt)
                    utc_dt = pytz.UTC.localize(dt)
                    moscow_dt = utc_dt.astimezone(MOSCOW_TZ)
                    return moscow_dt.strftime("%Y-%m-%d %H:%M")
                except ValueError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª
            logger.error(f"Could not parse datetime format: {utc_datetime}")
            return utc_datetime
        except Exception as e:
            logger.error(f"Error converting UTC time to Moscow: {e}")
            return utc_datetime
    
    async def send_post_to_user(self, user_id: int, post: Dict[str, Any], mailing_id: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            content = post['content']
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞
            if post.get('media_file_id'):
                await self.bot.send_photo(
                    chat_id=user_id,
                    photo=post['media_file_id'],
                    caption=content,
                    parse_mode=ParseMode.HTML
                )
            else:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=content,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            if mailing_id:
                self.db.log_mailing_result(mailing_id, user_id, 'sent')
            
            return True
            
        except TelegramAPIError as e:
            error_msg = str(e)
            if "bot was blocked" in error_msg.lower() or "user is deactivated" in error_msg.lower():
                status = 'blocked'
            else:
                status = 'failed'
            
            if mailing_id:
                self.db.log_mailing_result(mailing_id, user_id, status, error_msg)
            
            logger.error(f"Failed to send post to user {user_id}: {e}")
            return False
            
        except Exception as e:
            if mailing_id:
                self.db.log_mailing_result(mailing_id, user_id, 'failed', str(e))
            logger.error(f"Unexpected error sending post to user {user_id}: {e}")
            return False
    
    async def process_mailing(self, mailing: Dict[str, Any]) -> Dict[str, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º."""
        mailing_id = mailing['id']
        post = {
            'content': mailing['post_content'],
            'media_file_id': mailing.get('media_file_id')
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        self.db.update_mailing_status(mailing_id, 'in_progress')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if mailing['send_to_all']:
            users = self.db.get_all_users()
            target_user_ids = users  # get_all_users() —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id
        else:
            target_user_ids = mailing.get('target_user_ids', [])
        
        if not target_user_ids:
            self.db.update_mailing_status(mailing_id, 'failed')
            return {'sent': 0, 'failed': 0, 'total': 0}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_count = 0
        failed_count = 0
        
        for user_id in target_user_ids:
            success = await self.send_post_to_user(user_id, post, mailing_id)
            if success:
                sent_count += 1
            else:
                failed_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.05)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—á–µ—Ç—á–∏–∫–∏
        status = 'completed' if failed_count == 0 else 'completed'
        self.db.update_mailing_status(mailing_id, status, sent_count, failed_count)
        
        return {
            'sent': sent_count,
            'failed': failed_count,
            'total': len(target_user_ids)
        }
    
    async def process_pending_mailings(self) -> Dict[str, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        pending_mailings = self.db.get_pending_mailings()
        
        if not pending_mailings:
            return {'processed': 0, 'total_sent': 0, 'total_failed': 0}
        
        total_sent = 0
        total_failed = 0
        
        for mailing in pending_mailings:
            result = await self.process_mailing(mailing)
            total_sent += result['sent']
            total_failed += result['failed']
        
        return {
            'processed': len(pending_mailings),
            'total_sent': total_sent,
            'total_failed': total_failed
        }
    
    def format_post_preview(self, post: Dict[str, Any], max_length: int = 100) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ."""
        content = post['content']
        if len(content) > max_length:
            content = content[:max_length] + "..."
        
        return f"üìù {post['title']}\n{content}"
    
    def format_mailing_preview(self, mailing: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ."""
        status_emoji = {
            'pending': '‚è≥',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'failed': '‚ùå'
        }
        
        emoji = status_emoji.get(mailing['status'], '‚ùì')
        target = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if mailing['send_to_all'] else f"{len(mailing.get('target_user_ids', []))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        
        scheduled_text = ""
        if mailing.get('scheduled_at'):
            moscow_time = self._convert_utc_to_moscow(mailing['scheduled_at'])
            scheduled_text = f"\nüìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {moscow_time}"
        
        return f"{emoji} {mailing['title']}\nüë• {target}{scheduled_text}"
    
    def validate_post_data(self, title: str, content: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞."""
        errors = []
        
        if not title or not title.strip():
            errors.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not content or not content.strip():
            errors.append("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if len(title) > 100:
            errors.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if len(content) > 4096:
            errors.append("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return {
            'valid': len(errors) == 0,
            'errors': errors
        }
    
    def validate_mailing_data(self, send_to_all: bool, target_user_ids: List[int] = None, 
                            scheduled_at: str = None) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        errors = []
        
        if not send_to_all and (not target_user_ids or len(target_user_ids) == 0):
            errors.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        
        if scheduled_at:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
                scheduled_dt = datetime.strptime(scheduled_at, "%Y-%m-%d %H:%M")
                now = datetime.now()
                if scheduled_dt <= now:
                    errors.append("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            except ValueError:
                errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM)")
        
        return {
            'valid': len(errors) == 0,
            'errors': errors
        } 