"""
–ú–æ–¥—É–ª—å –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
"""
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from database.db import Database

logger = logging.getLogger(__name__)


async def show_settings_menu(message: types.Message, db: Database, user_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
    - üë§ –ü—Ä–æ—Ñ–∏–ª—å
    - üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    - üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º
    - üí¨ –û—Ç–∑—ã–≤ –∏ –∏–¥–µ–∏
    - üõçÔ∏è –ö—É–ø–∏—Ç—å –ú–ê–ö-–∫–æ–ª–æ–¥—É
    - ‚ÑπÔ∏è –û –±–æ—Ç–µ
    - ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
    """
    try:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="settings_profile")],
            [types.InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="settings_reminders")],
            [types.InlineKeyboardButton(text="üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", callback_data="settings_invite")],
            [types.InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤ –∏ –∏–¥–µ–∏", callback_data="settings_feedback")],
            [types.InlineKeyboardButton(text="üõçÔ∏è –ö—É–ø–∏—Ç—å –ú–ê–ö-–∫–æ–ª–æ–¥—É", callback_data="settings_purchase")],
            [types.InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="settings_about")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ])
        
        text = (
            "‚öôÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
            "–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ."
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"Settings menu shown to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error showing settings menu to user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


async def handle_settings_callback(callback: types.CallbackQuery, db: Database, logger_service):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –∏–∑ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏".
    """
    try:
        user_id = callback.from_user.id
        action = callback.data
        
        if action == "settings_profile":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = db.get_user(user_id) or {}
            name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            username = user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            first_seen = user_data.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            text = (
                f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üëã –ò–º—è: {name}\n"
                f"üÜî Username: @{username}\n"
                f"üìÖ –° –Ω–∞–º–∏ —Å: {first_seen}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π /name, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è."
            )
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            
        elif action == "settings_reminders":
            # –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            text = (
                "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /remind - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                "‚Ä¢ /remind_off - –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
            )
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            
        elif action == "settings_invite":
            # –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º
            text = (
                "üéÅ <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞!</b>\n\n"
                "–ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /share, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
            )
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            
        elif action == "settings_feedback":
            # –û—Ç–∑—ã–≤ –∏ –∏–¥–µ–∏
            text = (
                "üí¨ <b>–û—Ç–∑—ã–≤ –∏ –∏–¥–µ–∏</b>\n\n"
                "–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–∏ –∏–¥–µ–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /feedback, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."
            )
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            
        elif action == "settings_purchase":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –ú–ê–ö
            from modules.purchase_menu import handle_purchase_menu
            await callback.answer()
            await handle_purchase_menu(callback.message, db, logger_service)
            
        elif action == "settings_about":
            # –û –±–æ—Ç–µ
            text = (
                "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ú–ê–ö-–∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.\n\n"
                "üåô –ü–æ–ª—É—á–∞–π –∫–∞—Ä—Ç—ã –¥–Ω—è\n"
                "üìù –ü—Ä–æ–≤–æ–¥–∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏\n"
                "üéì –£—á–∏—Å—å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π\n\n"
                "–°–æ–∑–¥–∞—Ç–µ–ª—å: @TopPsyGame"
            )
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            
        elif action == "settings_menu":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_settings_menu(callback.message, db, user_id)
            await callback.answer()
            
        elif action == "settings_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from modules.card_of_the_day import get_main_menu
            text = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            await callback.message.edit_text(text)
            await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_main_menu(user_id, db))
            await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling settings callback for user {user_id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

