#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
"""

import requests
import re
import json
from datetime import datetime
from typing import Optional, Dict, List, Any

class ProductionSQLClient:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        self.username = "admin"
        self.password = "root"
        self.session.auth = (self.username, self.password)
        
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î"""
        print("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö PRODUCTION –ë–î")
        print("=" * 50)
        
        url = f"{self.base_url}/actions/content/"
        
        try:
            response = self.session.get(url, timeout=30)
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def execute_sql_query(self, sql_query: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/actions/query/"
        
        try:
            data = {'sql': sql_query}
            response = self.session.post(url, data=data, timeout=30)
            
            if response.status_code == 200:
                return self.parse_query_results(response.text)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def parse_query_results(self, html_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ HTML"""
        try:
            result = {
                'headers': [],
                'rows': [],
                'total_rows': 0,
                'error': None
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ SQL
            if 'error' in html_content.lower() or 'exception' in html_content.lower():
                error_match = re.search(r'<div[^>]*class="[^"]*error[^"]*"[^>]*>(.*?)</div>', html_content, re.IGNORECASE | re.DOTALL)
                if error_match:
                    result['error'] = error_match.group(1).strip()
                    return result
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            table_pattern = r'<table[^>]*class="[^"]*table[^"]*"[^>]*>(.*?)</table>'
            table_match = re.search(table_pattern, html_content, re.DOTALL | re.IGNORECASE)
            
            if table_match:
                table_html = table_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                header_pattern = r'<th[^>]*>(.*?)</th>'
                for match in re.findall(header_pattern, table_html, re.DOTALL):
                    header_text = re.sub(r'<[^>]+>', '', match).strip()
                    headers.append(header_text)
                result['headers'] = headers
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                rows = []
                row_pattern = r'<tr[^>]*>(.*?)</tr>'
                for row_match in re.findall(row_pattern, table_html, re.DOTALL):
                    cell_pattern = r'<td[^>]*>(.*?)</td>'
                    cells = []
                    for cell_match in re.findall(cell_pattern, row_match, re.DOTALL):
                        cell_text = re.sub(r'<[^>]+>', '', cell_match).strip()
                        cells.append(cell_text)
                    if cells and len(cells) == len(headers):
                        rows.append(cells)
                result['rows'] = rows
                result['total_rows'] = len(rows)
            
            return result
            
        except Exception as e:
            return {'error': str(e)}
    
    def check_total_actions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π"""
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –û–ë–©–ï–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
        print("=" * 50)
        
        sql = "SELECT COUNT(*) as total_actions FROM actions"
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                total_actions = results['rows'][0][0]
                print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ actions: {total_actions}")
                return int(total_actions)
            else:
                print("‚ÑπÔ∏è –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return 0
    
    def check_admin_actions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –î–ï–ô–°–¢–í–ò–ô")
        print("=" * 50)
        
        # –¢–û–õ–¨–ö–û –û–î–ò–ù –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
        admin_ids = ['6682555021']
        
        sql = """
        SELECT user_id, username, name, action, timestamp, COUNT(*) as action_count
        FROM actions 
        WHERE action LIKE 'admin_%'
        GROUP BY user_id, username, name, action, timestamp
        ORDER BY timestamp DESC
        LIMIT 20
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(results['rows'])}")
                print()
                
                for row in results['rows']:
                    if len(row) >= 6:
                        user_id, username, name, action, timestamp, action_count = row
                        
                        if user_id in admin_ids:
                            status = "‚úÖ –õ–ï–ì–ò–¢–ò–ú–ù–´–ô –ê–î–ú–ò–ù"
                        else:
                            status = "üö® –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ô –î–û–°–¢–£–ü"
                        
                        print(f"User: {user_id} ({name}) | Action: {action} | Status: {status}")
                        print(f"Time: {timestamp} | Count: {action_count}")
                        print("-" * 50)
            else:
                print("‚ÑπÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def check_specific_user(self, user_id: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüë§ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
        print("=" * 50)
        
        sql = f"""
        SELECT action, timestamp, details
        FROM actions 
        WHERE user_id = {user_id}
        ORDER BY timestamp DESC
        LIMIT 10
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(results['rows'])}")
                print()
                
                for row in results['rows']:
                    if len(row) >= 3:
                        action, timestamp, details = row
                        print(f"Action: {action}")
                        print(f"Time: {timestamp}")
                        if details and details != 'None':
                            print(f"Details: {details[:100]}...")
                        print("-" * 30)
            else:
                print("‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üîç –ê–ù–ê–õ–ò–ó PRODUCTION –ë–î")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.test_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_actions = self.check_total_actions()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.check_admin_actions()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)
        
        suspicious_users = ['865377684', '1159751971', '1853568101']
        
        for user_id in suspicious_users:
            self.check_specific_user(user_id)
        
        print("\n" + "="*60)
        print("üìã –í–´–í–û–î–´:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ë–î: {total_actions}")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç—å")
        print("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = ProductionSQLClient()
    client.run_full_analysis()

if __name__ == "__main__":
    main() 