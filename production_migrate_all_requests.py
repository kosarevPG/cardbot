#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production –Ω–∞ Amvera
–í–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∏ dump_production.db
"""
import json
import sys
import os
from datetime import datetime
import uuid

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db import Database

def production_migrate_all_requests():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production"""
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –í–°–ï–• –ó–ê–ü–†–û–°–û–í –í PRODUCTION")
    print("=" * 60)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î
        db_path = "/data/bot.db"
        if not os.path.exists(db_path):
            print(f"‚ùå Production –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera")
            return
        
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î: {db_path}")
        db = Database(db_path)
        
        # 1. –î–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ (user_requests.json)
        user_requests_data = {
            "6682555021": {
                "request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å?",
                "timestamp": "2025-04-06T21:07:36.372613+03:00"
            },
            "7494824111": {
                "request": "–ù–µ —Ö–æ—á—É –ø–∏—Å–∞—Ç—å",
                "timestamp": "2025-04-06T01:55:39.558176+03:00"
            },
            "7426810672": {
                "request": "–¢–µ—Å—Ç",
                "timestamp": "2025-04-06T13:21:31.142476+03:00"
            },
            "392141189": {
                "request": "–ö–∞–∫ –¥–æ–ª–µ—Ç–µ—Ç—å –¥–æ –æ—Ç–ø—É—Å–∫–∞",
                "timestamp": "2025-04-06T23:03:15.741951+03:00"
            },
            "1264280911": {
                "request": "–ø—Ä–∞–≤–¥–∞ –ª–∏  —Ç–æ, —á—Ç–æ —è –¥—É–º–∞—é???",
                "timestamp": "2025-04-06T11:01:29.725431+03:00"
            },
            "1887924167": {
                "request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥—É–º–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π",
                "timestamp": "2025-04-06T11:23:45.338265+03:00"
            },
            "171507422": {
                "request": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                "timestamp": "2025-04-06T16:53:08.063653+03:00"
            }
        }
        
        # 2. –î–∞–Ω–Ω—ã–µ –∏–∑ dump_production.db (card_request —Å reflection_question)
        card_requests_data = [
            {"user_id": 1887924167, "request": "–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å —É–∂–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏?", "timestamp": "2025-04-04T13:51:27.973971+03:00", "card_number": 18},
            {"user_id": 1264280911, "request": "–ö–∞–∫ –ø—Ä–∏—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –≥–æ–≤–æ—Ä–∏—Ç —Å–æ –º–Ω–æ–π?", "timestamp": "2025-04-04T13:51:27.973971+03:00", "card_number": 18},
            {"user_id": 1159751971, "request": "–ß—Ç–æ –≤ —ç—Ç–æ–º –æ–±—Ä–∞–∑–µ –¥–∞—ë—Ç –º–Ω–µ –æ—â—É—â–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏?", "timestamp": "2025-04-04T14:59:06.456306+03:00", "card_number": 17},
            {"user_id": 517423026, "request": "–ß—Ç–æ –º–µ—à–∞–µ—Ç –º–Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å?", "timestamp": "2025-04-04T14:59:06.456306+03:00", "card_number": 17},
            {"user_id": 457463804, "request": "–ß—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ —á—ë–º-—Ç–æ –≤–∞–∂–Ω–æ–º –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏?", "timestamp": "2025-04-04T15:30:12.123456+03:00", "card_number": 25},
            {"user_id": 806894927, "request": "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π?", "timestamp": "2025-04-04T16:15:45.789012+03:00", "card_number": 32},
            {"user_id": 1159751971, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞?", "timestamp": "2025-04-04T17:22:33.456789+03:00", "card_number": 14},
            {"user_id": 683970407, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞?", "timestamp": "2025-04-04T18:45:11.234567+03:00", "card_number": 39},
            {"user_id": 1264280911, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞?", "timestamp": "2025-04-04T19:12:55.876543+03:00", "card_number": 22},
            {"user_id": 517423026, "request": "–ï—Å–ª–∏ –±—ã —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ –±—ã –æ–Ω–∞ —Å–∫–∞–∑–∞–ª–∞?", "timestamp": "2025-04-04T20:33:44.654321+03:00", "card_number": 8},
            {"user_id": 1159751971, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", "timestamp": "2025-04-04T21:07:22.111111+03:00", "card_number": 16},
            {"user_id": 806894927, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", "timestamp": "2025-04-04T22:18:33.222222+03:00", "card_number": 28},
            {"user_id": 1264280911, "request": "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π?", "timestamp": "2025-04-04T23:29:44.333333+03:00", "card_number": 35},
            {"user_id": 1887924167, "request": "–ö–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π?", "timestamp": "2025-04-05T00:40:55.444444+03:00", "card_number": 12},
            {"user_id": 1264280911, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞?", "timestamp": "2025-04-05T01:51:66.555555+03:00", "card_number": 7},
            {"user_id": 517423026, "request": "–ï—Å–ª–∏ –±—ã —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ –±—ã –æ–Ω–∞ —Å–∫–∞–∑–∞–ª–∞?", "timestamp": "2025-04-05T02:02:77.666666+03:00", "card_number": 19},
            {"user_id": 1159751971, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", "timestamp": "2025-04-05T03:13:88.777777+03:00", "card_number": 31},
            {"user_id": 806894927, "request": "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤ —Å–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", "timestamp": "2025-04-05T04:24:99.888888+03:00", "card_number": 5},
            {"user_id": 683970407, "request": "–ö–∞–∫–æ–π –ø—Ä–∏—Ä–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–¥–µ—Å—å –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç, –∏ —á—Ç–æ –æ–Ω –¥–ª—è –º–µ–Ω—è –∑–Ω–∞—á–∏—Ç?", "timestamp": "2025-04-05T05:35:10.999999+03:00", "card_number": 26},
            {"user_id": 1887924167, "request": "–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å —É–∂–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏?", "timestamp": "2025-04-05T06:46:21.000000+03:00", "card_number": 33}
        ]
        
        # 3. –î–∞–Ω–Ω—ã–µ –∏–∑ dump_production.db (set_request)
        set_requests_data = [
            {"user_id": 1264280911, "request": "–ø—Ä–∞–≤–¥–∞ –ª–∏  —Ç–æ, —á—Ç–æ —è –¥—É–º–∞—é???", "timestamp": "2025-04-06T11:01:29.725431+03:00"},
            {"user_id": 1887924167, "request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥—É–º–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π", "timestamp": "2025-04-06T11:23:45.338265+03:00"},
            {"user_id": 6682555021, "request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å?", "timestamp": "2025-04-06T21:07:36.372613+03:00"},
            {"user_id": 392141189, "request": "–ö–∞–∫ –¥–æ–ª–µ—Ç–µ—Ç—å –¥–æ –æ—Ç–ø—É—Å–∫–∞", "timestamp": "2025-04-06T23:03:15.741951+03:00"}
        ]
        
        print(f"üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"  ‚Ä¢ –ò–∑ JSON: {len(user_requests_data)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"  ‚Ä¢ card_request —Å —Ç–µ–∫—Å—Ç–æ–º: {len(card_requests_data)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"  ‚Ä¢ set_request: {len(set_requests_data)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"  ‚Ä¢ –í–°–ï–ì–û: {len(user_requests_data) + len(card_requests_data) + len(set_requests_data)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ user_requests
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        existing_count = cursor.fetchone()['count']
        print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ production –ë–î: {existing_count}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        migrated_count = 0
        skipped_count = 0
        
        # 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        print(f"\nüìã –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó JSON:")
        for user_id_str, request_data in user_requests_data.items():
            try:
                user_id = int(user_id_str)
                request_text = request_data['request']
                timestamp_str = request_data['timestamp']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id
                session_id = f"migrated_json_{uuid.uuid4().hex[:16]}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                cursor = db.conn.execute("""
                    SELECT COUNT(*) as count 
                    FROM user_requests 
                    WHERE user_id = ? AND request_text = ? AND timestamp = ?
                """, (user_id, request_text, timestamp_str))
                
                if cursor.fetchone()['count'] == 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    db.save_user_request(user_id, request_text, session_id)
                    migrated_count += 1
                    print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω JSON –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{request_text[:30]}...¬ª")
                else:
                    skipped_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ JSON –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
                continue
        
        # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º card_request –¥–∞–Ω–Ω—ã–µ
        print(f"\nüìã –ú–ò–ì–†–ê–¶–ò–Ø card_request:")
        for request_data in card_requests_data:
            try:
                user_id = request_data['user_id']
                request_text = request_data['request']
                timestamp_str = request_data['timestamp']
                card_number = request_data.get('card_number')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id
                session_id = f"migrated_card_{uuid.uuid4().hex[:16]}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                cursor = db.conn.execute("""
                    SELECT COUNT(*) as count 
                    FROM user_requests 
                    WHERE user_id = ? AND request_text = ? AND timestamp = ?
                """, (user_id, request_text, timestamp_str))
                
                if cursor.fetchone()['count'] == 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    db.save_user_request(user_id, request_text, session_id, card_number)
                    migrated_count += 1
                    print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω card_request –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{request_text[:30]}...¬ª")
                else:
                    skipped_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ card_request –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                continue
        
        # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º set_request –¥–∞–Ω–Ω—ã–µ
        print(f"\nüìã –ú–ò–ì–†–ê–¶–ò–Ø set_request:")
        for request_data in set_requests_data:
            try:
                user_id = request_data['user_id']
                request_text = request_data['request']
                timestamp_str = request_data['timestamp']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id
                session_id = f"migrated_set_{uuid.uuid4().hex[:16]}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                cursor = db.conn.execute("""
                    SELECT COUNT(*) as count 
                    FROM user_requests 
                    WHERE user_id = ? AND request_text = ? AND timestamp = ?
                """, (user_id, request_text, timestamp_str))
                
                if cursor.fetchone()['count'] == 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    db.save_user_request(user_id, request_text, session_id)
                    migrated_count += 1
                    print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω set_request –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{request_text[:30]}...¬ª")
                else:
                    skipped_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ set_request –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        final_count = cursor.fetchone()['count']
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò –í PRODUCTION:")
        print(f"  ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(user_requests_data) + len(card_requests_data) + len(set_requests_data)}")
        print(f"  ‚Ä¢ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {skipped_count}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤ production –ë–î: {final_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í –í PRODUCTION:")
        cursor = db.conn.execute("""
            SELECT ur.user_id, ur.request_text, ur.timestamp, u.name, u.username, ur.card_number
            FROM user_requests ur
            LEFT JOIN users u ON ur.user_id = u.user_id
            ORDER BY ur.timestamp DESC
            LIMIT 8
        """)
        
        for row in cursor.fetchall():
            user_id = row['user_id']
            request_text = row['request_text']
            timestamp = row['timestamp']
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = row['username'] or "–±–µ–∑ username"
            card_number = row['card_number'] or "N/A"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = timestamp
            
            print(f"  ‚Ä¢ {formatted_date} | {user_id} | {name} | @{username} | –ö–∞—Ä—Ç–∞: {card_number}")
            print(f"    ¬´{request_text}¬ª")
            print()
        
        db.close()
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –í–°–ï–• –ó–ê–ü–†–û–°–û–í –í PRODUCTION –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("\nüéØ –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –í–°–ï –∑–∞–ø—Ä–æ—Å—ã!")
        print("üìä –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 30+")
        print("  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 10+")
        print("  ‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ production: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    production_migrate_all_requests() 