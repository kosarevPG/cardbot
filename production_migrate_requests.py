#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production –Ω–∞ Amvera
"""
import json
import sys
import os
from datetime import datetime
import uuid

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db import Database

def production_migrate_requests():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production"""
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–ü–†–û–°–û–í –í PRODUCTION")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î
        db_path = "/data/bot.db"
        if not os.path.exists(db_path):
            print(f"‚ùå Production –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera")
            return
        
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º production –ë–î: {db_path}")
        db = Database(db_path)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–∏–∑ JSON —Ñ–∞–π–ª–∞)
        user_requests_data = {
            "6682555021": {
                "request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å?",
                "timestamp": "2025-04-06T21:07:36.372613+03:00"
            },
            "7494824111": {
                "request": "–ù–µ —Ö–æ—á—É –ø–∏—Å–∞—Ç—å",
                "timestamp": "2025-04-06T01:55:39.558176+03:00"
            },
            "7426810672": {
                "request": "–¢–µ—Å—Ç",
                "timestamp": "2025-04-06T13:21:31.142476+03:00"
            },
            "392141189": {
                "request": "–ö–∞–∫ –¥–æ–ª–µ—Ç–µ—Ç—å –¥–æ –æ—Ç–ø—É—Å–∫–∞",
                "timestamp": "2025-04-06T23:03:15.741951+03:00"
            },
            "1264280911": {
                "request": "–ø—Ä–∞–≤–¥–∞ –ª–∏  —Ç–æ, —á—Ç–æ —è –¥—É–º–∞—é???",
                "timestamp": "2025-04-06T11:01:29.725431+03:00"
            },
            "1887924167": {
                "request": "–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥—É–º–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π",
                "timestamp": "2025-04-06T11:23:45.338265+03:00"
            },
            "171507422": {
                "request": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                "timestamp": "2025-04-06T16:53:08.063653+03:00"
            }
        }
        
        print(f"üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(user_requests_data)} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ user_requests
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        existing_count = cursor.fetchone()['count']
        print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ production –ë–î: {existing_count}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        migrated_count = 0
        skipped_count = 0
        
        for user_id_str, request_data in user_requests_data.items():
            try:
                user_id = int(user_id_str)
                request_text = request_data['request']
                timestamp_str = request_data['timestamp']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                session_id = f"migrated_{uuid.uuid4().hex[:16]}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                cursor = db.conn.execute("""
                    SELECT COUNT(*) as count 
                    FROM user_requests 
                    WHERE user_id = ? AND request_text = ? AND timestamp = ?
                """, (user_id, request_text, timestamp_str))
                
                if cursor.fetchone()['count'] == 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    db.save_user_request(user_id, request_text, session_id)
                    migrated_count += 1
                    print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{request_text[:30]}...¬ª")
                else:
                    skipped_count += 1
                    print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        final_count = cursor.fetchone()['count']
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò –í PRODUCTION:")
        print(f"  ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(user_requests_data)}")
        print(f"  ‚Ä¢ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {skipped_count}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤ production –ë–î: {final_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í –í PRODUCTION:")
        cursor = db.conn.execute("""
            SELECT ur.user_id, ur.request_text, ur.timestamp, u.name, u.username
            FROM user_requests ur
            LEFT JOIN users u ON ur.user_id = u.user_id
            ORDER BY ur.timestamp DESC
            LIMIT 5
        """)
        
        for row in cursor.fetchall():
            user_id = row['user_id']
            request_text = row['request_text']
            timestamp = row['timestamp']
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = row['username'] or "–±–µ–∑ username"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = timestamp
            
            print(f"  ‚Ä¢ {formatted_date} | {user_id} | {name} | @{username}")
            print(f"    ¬´{request_text}¬ª")
            print()
        
        db.close()
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –í PRODUCTION –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("\nüéØ –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ production: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    production_migrate_requests() 