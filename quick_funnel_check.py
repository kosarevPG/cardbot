#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è
"""

import sqlite3
import os

DB_PATH = "database/dev.db"

def quick_check():
    if not os.path.exists(DB_PATH):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    
    try:
        # –í—Å–µ —à–∞–≥–∏
        cursor = conn.execute("""
            SELECT step, COUNT(*) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND timestamp >= datetime('now', '-7 days')
            GROUP BY step
            ORDER BY count DESC
        """)
        
        steps = cursor.fetchall()
        
        print("üìä –í–°–ï –®–ê–ì–ò –í–û–†–û–ù–ö–ò (–∑–∞ 7 –¥–Ω–µ–π):")
        for step in steps:
            print(f"  ‚Ä¢ {step['step']}: {step['count']}")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞
        print("\nüìà –û–°–ù–û–í–ù–ê–Ø –í–û–†–û–ù–ö–ê:")
        
        steps_data = {}
        for step_name in ['started', 'initial_resource_selected', 'request_type_selected', 'card_drawn', 'initial_response_provided', 'ai_reflection_choice', 'completed']:
            cursor = conn.execute(f"""
                SELECT COUNT(DISTINCT user_id) as count
                FROM scenario_logs 
                WHERE scenario = 'card_of_day' 
                AND step = ?
                AND timestamp >= datetime('now', '-7 days')
            """, (step_name,))
            count = cursor.fetchone()['count']
            steps_data[step_name] = count
        
        step_names = {
            'started': '1Ô∏è‚É£ –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é',
            'initial_resource_selected': '2Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å', 
            'request_type_selected': '3Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞',
            'card_drawn': '4Ô∏è‚É£ –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É',
            'initial_response_provided': '5Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–ª–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é',
            'ai_reflection_choice': '6Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ª–æ–≥',
            'completed': '7Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏–ª–∏'
        }
        
        for step, count in steps_data.items():
            print(f"  {step_names[step]}: {count}")
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        if steps_data['started'] > 0:
            conversion = (steps_data['completed'] / steps_data['started']) * 100
            print(f"\n‚úÖ –ö–û–ù–í–ï–†–°–ò–Ø: {steps_data['completed']}/{steps_data['started']} = {conversion:.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    quick_check() 