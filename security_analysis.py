#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
"""

import requests
import re
import json
from datetime import datetime
from typing import Optional, Dict, List, Any

class SecurityAnalyzer:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.session = requests.Session()
        
        # –¢–û–õ–¨–ö–û –û–î–ò–ù –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
        self.admin_ids = ['6682555021']
        
    def execute_sql_query(self, sql_query: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/actions/query/"
        
        try:
            data = {'sql': sql_query}
            response = self.session.post(url, data=data, timeout=30)
            
            if response.status_code == 200:
                return self.parse_query_results(response.text)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def parse_query_results(self, html_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ HTML"""
        try:
            result = {
                'headers': [],
                'rows': [],
                'total_rows': 0,
                'error': None
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ SQL
            if 'error' in html_content.lower() or 'exception' in html_content.lower():
                error_match = re.search(r'<div[^>]*class="[^"]*error[^"]*"[^>]*>(.*?)</div>', html_content, re.IGNORECASE | re.DOTALL)
                if error_match:
                    result['error'] = error_match.group(1).strip()
                    return result
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            table_pattern = r'<table[^>]*class="[^"]*table[^"]*"[^>]*>(.*?)</table>'
            table_match = re.search(table_pattern, html_content, re.DOTALL | re.IGNORECASE)
            
            if table_match:
                table_html = table_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                header_pattern = r'<th[^>]*>(.*?)</th>'
                for match in re.findall(header_pattern, table_html, re.DOTALL):
                    header_text = re.sub(r'<[^>]+>', '', match).strip()
                    headers.append(header_text)
                result['headers'] = headers
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                rows = []
                row_pattern = r'<tr[^>]*>(.*?)</tr>'
                for row_match in re.findall(row_pattern, table_html, re.DOTALL):
                    cell_pattern = r'<td[^>]*>(.*?)</td>'
                    cells = []
                    for cell_match in re.findall(cell_pattern, row_match, re.DOTALL):
                        cell_text = re.sub(r'<[^>]+>', '', cell_match).strip()
                        cells.append(cell_text)
                    if cells and len(cells) == len(headers):
                        rows.append(cells)
                result['rows'] = rows
                result['total_rows'] = len(rows)
            
            return result
            
        except Exception as e:
            return {'error': str(e)}
    
    def analyze_admin_actions(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        print("üîç –ê–ù–ê–õ–ò–ó –ê–î–ú–ò–ù–°–ö–ò–• –î–ï–ô–°–¢–í–ò–ô")
        print("=" * 50)
        
        sql = """
        SELECT id, user_id, username, name, action, timestamp, details
        FROM actions 
        WHERE action LIKE 'admin_%'
        ORDER BY id DESC
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(results['rows'])}")
                print()
                
                unauthorized_count = 0
                authorized_count = 0
                
                for row in results['rows']:
                    if len(row) >= 7:
                        id_val, user_id, username, name, action, timestamp, details = row
                        
                        if user_id in self.admin_ids:
                            status = "‚úÖ –õ–ï–ì–ò–¢–ò–ú–ù–´–ô –ê–î–ú–ò–ù"
                            authorized_count += 1
                        else:
                            status = "üö® –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ô –î–û–°–¢–£–ü"
                            unauthorized_count += 1
                        
                        print(f"ID: {id_val} | User: {user_id} | Action: {action} | Status: {status}")
                
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"‚úÖ –õ–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {authorized_count}")
                print(f"üö® –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {unauthorized_count}")
                print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {(unauthorized_count/(authorized_count+unauthorized_count)*100):.1f}%")
            else:
                print("‚ÑπÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def analyze_suspicious_users(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)
        
        sql = """
        SELECT user_id, username, name, COUNT(*) as admin_action_count
        FROM actions 
        WHERE action LIKE 'admin_%' AND user_id NOT IN (6682555021)
        GROUP BY user_id, username, name
        ORDER BY admin_action_count DESC
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results['rows'])}")
                print()
                
                for row in results['rows']:
                    if len(row) >= 4:
                        user_id, username, name, action_count = row
                        print(f"üö® User ID: {user_id}")
                        print(f"   Username: {username}")
                        print(f"   Name: {name}")
                        print(f"   Admin actions: {action_count}")
                        print("-" * 30)
            else:
                print("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def analyze_user_requests_table(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É user_requests"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ user_requests")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        sql = """
        SELECT COUNT(*) as total_requests
        FROM user_requests
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                total_requests = results['rows'][0][0]
                print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_requests}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                sql_recent = """
                SELECT user_id, request_text, created_at
                FROM user_requests
                ORDER BY created_at DESC
                LIMIT 10
                """
                
                recent_results = self.execute_sql_query(sql_recent)
                
                if recent_results and not recent_results.get('error'):
                    if recent_results['rows']:
                        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
                        for row in recent_results['rows']:
                            if len(row) >= 3:
                                user_id, request_text, created_at = row
                                print(f"User: {user_id} | Time: {created_at}")
                                print(f"Request: {request_text[:100]}...")
                                print("-" * 30)
            else:
                print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ user_requests –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def analyze_table_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶")
        print("=" * 50)
        
        tables = ['actions', 'users', 'user_requests', 'user_cards', 'feedback', 'user_profiles']
        
        for table in tables:
            sql = f"""
            SELECT COUNT(*) as total_rows
            FROM {table}
            """
            
            results = self.execute_sql_query(sql)
            
            if results and not results.get('error'):
                if results['rows']:
                    total_rows = results['rows'][0][0]
                    print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table}: {total_rows} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table}: 0 –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
    
    def generate_security_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüîç –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.analyze_admin_actions()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.analyze_suspicious_users()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_requests
        self.analyze_user_requests_table()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
        self.analyze_table_structure()
        
        print("\n" + "="*60)
        print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        print("3. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        print("4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("5. –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–î")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò PRODUCTION –ë–î")
    print("=" * 60)
    
    analyzer = SecurityAnalyzer()
    analyzer.generate_security_report()

if __name__ == "__main__":
    main() 