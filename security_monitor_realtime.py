#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import sqlite3
import time
import logging
from datetime import datetime, timedelta
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('security_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = ['6682555021', '392141189', '239719200', '7494824111', '171507422', '138192985']

class SecurityMonitor:
    def __init__(self, db_path='database/bot.db'):
        self.db_path = db_path
        self.last_check_time = datetime.now()
        self.alert_threshold = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏
        
    def check_recent_admin_actions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            check_time = datetime.now() - timedelta(minutes=5)
            
            cursor.execute("""
                SELECT 
                    user_id,
                    username,
                    name,
                    action,
                    timestamp,
                    CASE 
                        WHEN user_id IN (6682555021, 392141189, 239719200, 7494824111, 171507422, 138192985) 
                        THEN 'LEGITIMATE_ADMIN' 
                        ELSE 'UNAUTHORIZED_ACCESS' 
                    END as access_type
                FROM actions 
                WHERE action LIKE 'admin_%'
                    AND timestamp >= ?
                ORDER BY timestamp DESC
            """, (check_time.strftime('%Y-%m-%d %H:%M:%S'),))
            
            recent_actions = cursor.fetchall()
            unauthorized_actions = []
            
            for action in recent_actions:
                user_id, username, name, action_type, timestamp, access_type = action
                if access_type == 'UNAUTHORIZED_ACCESS':
                    unauthorized_actions.append({
                        'user_id': user_id,
                        'username': username,
                        'name': name,
                        'action': action_type,
                        'timestamp': timestamp
                    })
            
            conn.close()
            return unauthorized_actions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")
            return []
    
    def check_suspicious_patterns(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            check_time = datetime.now() - timedelta(minutes=10)
            
            cursor.execute("""
                SELECT 
                    user_id,
                    username,
                    name,
                    COUNT(*) as action_count,
                    GROUP_CONCAT(DISTINCT action) as actions
                FROM actions 
                WHERE timestamp >= ?
                    AND user_id NOT IN (6682555021, 392141189, 239719200, 7494824111, 171507422, 138192985)
                GROUP BY user_id, username, name
                HAVING action_count >= 5
                ORDER BY action_count DESC
            """, (check_time.strftime('%Y-%m-%d %H:%M:%S'),))
            
            suspicious_users = cursor.fetchall()
            conn.close()
            
            return suspicious_users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return []
    
    def log_security_alert(self, alert_type, details):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        alert_message = f"üö® –°–ò–ì–ù–ê–õ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: {alert_type}\n{details}"
        logger.warning(alert_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Ç—Ä–µ–≤–æ–≥
        with open('security_alerts.log', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {alert_message}\n")
    
    def run_monitoring_cycle(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        unauthorized_actions = self.check_recent_admin_actions()
        
        if unauthorized_actions:
            details = "\n".join([
                f"User {action['user_id']} ({action['username']}): {action['action']} at {action['timestamp']}"
                for action in unauthorized_actions
            ])
            self.log_security_alert("–ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ô –î–û–°–¢–£–ü –ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò", details)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        suspicious_users = self.check_suspicious_patterns()
        
        if suspicious_users:
            details = "\n".join([
                f"User {user[0]} ({user[1]}): {user[3]} –¥–µ–π—Å—Ç–≤–∏–π - {user[4]}"
                for user in suspicious_users
            ])
            self.log_security_alert("–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨", details)
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.last_check_time = datetime.now()
        
        if not unauthorized_actions and not suspicious_users:
            logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
    
    def start_monitoring(self, interval_seconds=60):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫)")
        
        try:
            while True:
                self.run_monitoring_cycle()
                time.sleep(interval_seconds)
                
        except KeyboardInterrupt:
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîí –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists('database/bot.db'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: database/bot.db")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = SecurityMonitor()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.start_monitoring(interval_seconds=30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    main() 