#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import requests
import re
import json
from datetime import datetime
from typing import Optional, Dict, List, Any

class SecurityMonitor:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.session = requests.Session()
        
        # –¢–û–õ–¨–ö–û –û–î–ò–ù –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
        self.admin_ids = ['6682555021']
        
    def execute_sql_query(self, sql_query: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/actions/query/"
        
        try:
            data = {'sql': sql_query}
            response = self.session.post(url, data=data, timeout=30)
            
            if response.status_code == 200:
                return self.parse_query_results(response.text)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def parse_query_results(self, html_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ HTML"""
        try:
            result = {
                'headers': [],
                'rows': [],
                'total_rows': 0,
                'error': None
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ SQL
            if 'error' in html_content.lower() or 'exception' in html_content.lower():
                error_match = re.search(r'<div[^>]*class="[^"]*error[^"]*"[^>]*>(.*?)</div>', html_content, re.IGNORECASE | re.DOTALL)
                if error_match:
                    result['error'] = error_match.group(1).strip()
                    return result
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            table_pattern = r'<table[^>]*class="[^"]*table[^"]*"[^>]*>(.*?)</table>'
            table_match = re.search(table_pattern, html_content, re.DOTALL | re.IGNORECASE)
            
            if table_match:
                table_html = table_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                header_pattern = r'<th[^>]*>(.*?)</th>'
                for match in re.findall(header_pattern, table_html, re.DOTALL):
                    header_text = re.sub(r'<[^>]+>', '', match).strip()
                    headers.append(header_text)
                result['headers'] = headers
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                rows = []
                row_pattern = r'<tr[^>]*>(.*?)</tr>'
                for row_match in re.findall(row_pattern, table_html, re.DOTALL):
                    cell_pattern = r'<td[^>]*>(.*?)</td>'
                    cells = []
                    for cell_match in re.findall(cell_pattern, row_match, re.DOTALL):
                        cell_text = re.sub(r'<[^>]+>', '', cell_match).strip()
                        cells.append(cell_text)
                    if cells and len(cells) == len(headers):
                        rows.append(cells)
                result['rows'] = rows
                result['total_rows'] = len(rows)
            
            return result
            
        except Exception as e:
            return {'error': str(e)}
    
    def check_admin_actions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –î–ï–ô–°–¢–í–ò–ô")
        print("=" * 50)
        
        sql = """
        SELECT 
            COUNT(CASE WHEN user_id IN (6682555021) THEN 1 END) as legitimate_actions,
            COUNT(CASE WHEN user_id NOT IN (6682555021) THEN 1 END) as unauthorized_actions
        FROM actions 
        WHERE action LIKE 'admin_%'
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                row = results['rows'][0]
                if len(row) >= 2:
                    legitimate = int(row[0])
                    unauthorized = int(row[1])
                    
                    print(f"‚úÖ –õ–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {legitimate}")
                    print(f"üö® –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {unauthorized}")
                    
                    if unauthorized > 0:
                        print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        sql_details = """
                        SELECT user_id, username, name, action, timestamp
                        FROM actions 
                        WHERE action LIKE 'admin_%' AND user_id NOT IN (6682555021)
                        ORDER BY timestamp DESC
                        LIMIT 10
                        """
                        
                        details_results = self.execute_sql_query(sql_details)
                        
                        if details_results and not details_results.get('error'):
                            if details_results['rows']:
                                print("\nüö® –ü–û–°–õ–ï–î–ù–ò–ï –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
                                for detail_row in details_results['rows']:
                                    if len(detail_row) >= 5:
                                        user_id, username, name, action, timestamp = detail_row
                                        print(f"   User: {user_id} ({name}) | Action: {action} | Time: {timestamp}")
                    else:
                        print("‚úÖ –í—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–µ–≥–∏—Ç–∏–º–Ω—ã")
            else:
                print("‚ÑπÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def check_suspicious_users(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)
        
        sql = """
        SELECT user_id, username, name, COUNT(*) as admin_action_count
        FROM actions 
        WHERE action LIKE 'admin_%' AND user_id NOT IN (6682555021)
        GROUP BY user_id, username, name
        ORDER BY admin_action_count DESC
        """
        
        results = self.execute_sql_query(sql)
        
        if results and not results.get('error'):
            if results['rows']:
                print(f"üö® –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results['rows'])}")
                print()
                
                for row in results['rows']:
                    if len(row) >= 4:
                        user_id, username, name, action_count = row
                        print(f"üö® User ID: {user_id}")
                        print(f"   Username: {username}")
                        print(f"   Name: {name}")
                        print(f"   Admin actions: {action_count}")
                        print("-" * 30)
            else:
                print("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    def run_security_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîç –ú–û–ù–ò–¢–û–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.check_admin_actions()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.check_suspicious_users()
        
        print("\n" + "="*60)
        print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("3. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = SecurityMonitor()
    monitor.run_security_check()

if __name__ == "__main__":
    main() 