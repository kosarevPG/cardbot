#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ —Å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import sqlite3
import os
from datetime import datetime

def test_admin_panel():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ë–î
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ —Å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print(f"üìÅ –ë–î: {db_path}")
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–∞–∫ –≤ show_admin_requests)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):")
        
        cursor = conn.execute("""
            SELECT 
                COUNT(*) as total_requests,
                COUNT(DISTINCT user_id) as unique_users,
                AVG(LENGTH(request_text)) as avg_length,
                MIN(LENGTH(request_text)) as min_length,
                MAX(LENGTH(request_text)) as max_length
            FROM user_requests 
            WHERE timestamp >= datetime('now', '-7 days')
        """)
        
        stats = cursor.fetchone()
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {stats['avg_length']:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {stats['min_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {stats['max_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–∞–∫ –≤ show_admin_requests)
        print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏):")
        
        cursor = conn.execute("""
            SELECT 
                ur.request_text,
                ur.timestamp,
                u.name,
                u.username,
                ur.user_id
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 10
        """)
        
        requests = cursor.fetchall()
        for i, row in enumerate(requests, 1):
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            user_id = row['user_id']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
            try:
                dt = datetime.fromisoformat(row['timestamp'].replace('Z', '+00:00'))
                formatted_date = dt.strftime("%d.%m.%Y %H:%M")
            except:
                formatted_date = row['timestamp'][:16]
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            request_text = row['request_text']
            if len(request_text) > 50:
                request_text = request_text[:50] + "..."
            
            print(f"  {i}. {formatted_date} | {name} {username} (ID: {user_id})")
            print(f"     üí¨ {request_text}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –≤—ã–±–æ—Ä–∫—É (–∫–∞–∫ –≤ show_admin_requests_full)
        print(f"\nüìã –ü–æ–ª–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (20 –∑–∞–ø–∏—Å–µ–π):")
        
        cursor = conn.execute("""
            SELECT 
                ur.request_text,
                ur.timestamp,
                u.name,
                u.username,
                ur.user_id,
                ur.card_number
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 20
        """)
        
        full_requests = cursor.fetchall()
        for i, row in enumerate(full_requests, 1):
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            user_id = row['user_id']
            card_number = row['card_number'] or "N/A"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(row['timestamp'].replace('Z', '+00:00'))
                formatted_date = dt.strftime("%d.%m.%Y %H:%M")
            except:
                formatted_date = row['timestamp'][:16]
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            request_text = row['request_text']
            if len(request_text) > 60:
                request_text = request_text[:60] + "..."
            
            print(f"  {i}. {formatted_date} | {name} {username} (ID: {user_id}) | –ö–∞—Ä—Ç–∞: {card_number}")
            print(f"     üí¨ {request_text}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        print(f"\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        
        cursor = conn.execute("""
            SELECT 
                u.name,
                u.username,
                ur.user_id,
                COUNT(*) as request_count
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            GROUP BY ur.user_id 
            ORDER BY request_count DESC 
            LIMIT 10
        """)
        
        user_stats = cursor.fetchall()
        for row in user_stats:
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            user_id = row['user_id']
            count = row['request_count']
            
            print(f"  ‚Ä¢ {name} {username} (ID: {user_id}): {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        conn.close()
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

if __name__ == "__main__":
    test_admin_panel() 