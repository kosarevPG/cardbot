#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def test_funnel_query():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —Ñ—É–Ω–∫—Ü–∏–∏ get_card_funnel_metrics."""
    db_path = "bot (10).db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    print('\n=== –¢–ï–°–¢ –ó–ê–ü–†–û–°–ê –§–£–ù–ö–¶–ò–ò ===')
    
    # –¢–µ—Å—Ç —Å v_events (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print('\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å v_events (include_excluded_users=False):')
    try:
        cursor = conn.execute("""
            SELECT 
                event,
                COUNT(DISTINCT session_id) as count
            FROM v_events
            WHERE scenario = 'card_of_day' AND d_local = date('now', '+3 hours')
            GROUP BY event
        """)
        
        step_counts = {}
        for row in cursor.fetchall():
            step_counts[row['event']] = row['count']
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {step_counts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏
        initial_resource = step_counts.get('initial_resource_selected', 0)
        card_drawn = step_counts.get('card_drawn', 0)
        completed = step_counts.get('completed', 0)
        
        print(f"  initial_resource_selected: {initial_resource}")
        print(f"  card_drawn: {card_drawn}")
        print(f"  completed: {completed}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ v_events: {e}")
    
    # –¢–µ—Å—Ç —Å scenario_logs (–∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å)
    print('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å scenario_logs (include_excluded_users=True):')
    try:
        cursor = conn.execute("""
            SELECT 
                step,
                COUNT(DISTINCT JSON_EXTRACT(metadata, '$.session_id')) as count
            FROM scenario_logs
            WHERE scenario = 'card_of_day' AND DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            GROUP BY step
        """)
        
        step_counts = {}
        for row in cursor.fetchall():
            step_counts[row['step']] = row['count']
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {step_counts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏
        initial_resource = step_counts.get('initial_resource_selected', 0)
        card_drawn = step_counts.get('card_drawn', 0)
        completed = step_counts.get('completed', 0)
        
        print(f"  initial_resource_selected: {initial_resource}")
        print(f"  card_drawn: {card_drawn}")
        print(f"  completed: {completed}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ scenario_logs: {e}")
    
    # –¢–µ—Å—Ç —Å scenario_logs –ë–ï–ó –∞–¥–º–∏–Ω–æ–≤ (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
    print('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å scenario_logs –ë–ï–ó –∞–¥–º–∏–Ω–æ–≤:')
    try:
        cursor = conn.execute("""
            SELECT 
                step,
                COUNT(DISTINCT JSON_EXTRACT(metadata, '$.session_id')) as count
            FROM scenario_logs
            WHERE scenario = 'card_of_day' 
            AND DATE(timestamp, '+3 hours') = DATE('now', '+3 hours')
            AND user_id NOT IN (SELECT user_id FROM ignored_users)
            GROUP BY step
        """)
        
        step_counts = {}
        for row in cursor.fetchall():
            step_counts[row['step']] = row['count']
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {step_counts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏
        initial_resource = step_counts.get('initial_resource_selected', 0)
        card_drawn = step_counts.get('card_drawn', 0)
        completed = step_counts.get('completed', 0)
        
        print(f"  initial_resource_selected: {initial_resource}")
        print(f"  card_drawn: {card_drawn}")
        print(f"  completed: {completed}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ scenario_logs –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    conn.close()

if __name__ == "__main__":
    test_funnel_query()

