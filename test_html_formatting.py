#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –æ–±—É—á–µ–Ω–∏—è
from modules.texts.learning import LEARNING_TEXTS

def test_html_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã —Å HTML-—Ç–µ–≥–∞–º–∏
    test_texts = [
        ("theory_1", LEARNING_TEXTS["theory_1"]),
        ("theory_2", LEARNING_TEXTS["theory_2"]),
        ("theory_3", LEARNING_TEXTS["theory_3"]),
        ("theory_4", LEARNING_TEXTS["theory_4"]),
        ("trainer.examples", LEARNING_TEXTS["trainer"]["examples"]),
        ("feedback.request_prefix", LEARNING_TEXTS["feedback"]["request_prefix"]),
        ("feedback.resourceful", LEARNING_TEXTS["feedback"]["resourceful"]),
        ("feedback.neutral", LEARNING_TEXTS["feedback"]["neutral"]),
        ("feedback.external", LEARNING_TEXTS["feedback"]["external"]),
    ]
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å HTML-—Ç–µ–≥–∞–º–∏:")
    
    for key, text in test_texts:
        print(f"\nüîç {key}:")
        print(f"   –¢–µ–∫—Å—Ç: {text[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML-—Ç–µ–≥–æ–≤
        has_html_tags = any(tag in text for tag in ['<b>', '<i>', '<code>', '<u>', '<s>'])
        
        if has_html_tags:
            print("   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ç–µ–≥–∏")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã
            open_tags = text.count('<b>') + text.count('<i>') + text.count('<code>') + text.count('<u>') + text.count('<s>')
            close_tags = text.count('</b>') + text.count('</i>') + text.count('</code>') + text.count('</u>') + text.count('</s>')
            
            if open_tags == close_tags:
                print("   ‚úÖ HTML-—Ç–µ–≥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print(f"   ‚ùå –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö {open_tags}, –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö {close_tags}")
        else:
            print("   ‚ÑπÔ∏è  –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ç–µ–≥–æ–≤")
    
    print("\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

def test_parse_mode_usage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ parse_mode –≤ –∫–æ–¥–µ"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è parse_mode –≤ –∫–æ–¥–µ...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª learn_cards.py
    try:
        with open('modules/learn_cards.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ parse_mode
        parse_mode_count = content.count('parse_mode="HTML"')
        message_answer_count = content.count('.answer(')
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {parse_mode_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π parse_mode='HTML'")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {message_answer_count} –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if parse_mode_count > 0:
            print("   ‚úÖ parse_mode='HTML' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ")
        else:
            print("   ‚ùå parse_mode='HTML' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ")
            
    except FileNotFoundError:
        print("   ‚ùå –§–∞–π–ª modules/learn_cards.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_html_formatting()
    test_parse_mode_usage()
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ç–µ–≥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å parse_mode='HTML'")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏: <b>, <i>, <code>, <u>, <s>")
    print("4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <br> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫")
