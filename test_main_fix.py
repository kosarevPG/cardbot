#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π main –≤ main.py
"""

import ast
import sys

def check_main_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π main –≤ —Ñ–∞–π–ª–µ main.py"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π main...")
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –∫–∞–∫ AST
        try:
            tree = ast.parse(content)
        except SyntaxError as e:
            print(f"   ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main.py: {e}")
            return False
        
        # –°—á–∏—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ main
        main_functions = []
        for node in ast.walk(tree):
            if isinstance(node, ast.AsyncFunctionDef) and node.name == 'main':
                main_functions.append(node.lineno)
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π main: {len(main_functions)}")
        
        if len(main_functions) == 1:
            print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –û—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è main –Ω–∞ —Å—Ç—Ä–æ–∫–µ {main_functions[0]}")
            return True
        elif len(main_functions) == 0:
            print("   ‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main!")
            return False
        else:
            print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –Ω–∞–π–¥–µ–Ω–æ {len(main_functions)} —Ñ—É–Ω–∫—Ü–∏–π main –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö {main_functions}")
            return False
            
    except FileNotFoundError:
        print("   ‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def check_parse_mode_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É parse_mode –≤ main.py"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ parse_mode...")
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ —Å parse_mode
        if 'parse_mode=ParseMode.HTML' in content:
            print("   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ parse_mode=ParseMode.HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return True
        else:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ parse_mode=ParseMode.HTML")
            return False
            
    except FileNotFoundError:
        print("   ‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def check_learn_cards_parse_mode():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ parse_mode –≤ learn_cards.py"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ parse_mode –≤ learn_cards.py...")
    
    try:
        with open('modules/learn_cards.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ parse_mode
        parse_mode_count = content.count('parse_mode="HTML"')
        message_answer_count = content.count('.answer(')
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {parse_mode_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π parse_mode='HTML'")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {message_answer_count} –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if parse_mode_count > 0:
            print("   ‚úÖ parse_mode='HTML' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ")
            return True
        else:
            print("   ‚ùå parse_mode='HTML' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ")
            return False
            
    except FileNotFoundError:
        print("   ‚ùå –§–∞–π–ª modules/learn_cards.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    main_fix_ok = check_main_functions()
    parse_mode_ok = check_parse_mode_setup()
    learn_cards_ok = check_learn_cards_parse_mode()
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"   {'‚úÖ' if main_fix_ok else '‚ùå'} –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π main –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
    print(f"   {'‚úÖ' if parse_mode_ok else '‚ùå'} parse_mode –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    print(f"   {'‚úÖ' if learn_cards_ok else '‚ùå'} parse_mode –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ learn_cards.py")
    
    if main_fix_ok and parse_mode_ok and learn_cards_ok:
        print("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("   HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.")
    
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m 'Fix HTML formatting' && git push")
    print("   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /learn_cards –∏ /practice")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ HTML-—Ç–µ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
