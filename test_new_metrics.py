#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
"""

import os
import sys
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config_local import TIMEZONE, DB_PATH
except ImportError:
    from config import TIMEZONE
    DB_PATH = None

from database.db import Database

def test_new_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î
    if DB_PATH and os.path.exists(DB_PATH):
        db_path = DB_PATH
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º dev –ë–î: {db_path}")
    else:
        db_path = "database/dev.db"
        if not os.path.exists(db_path):
            db_path = "database/bot.db"
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–î: {db_path}")
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db = Database(db_path)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 999999999
    
    print(f"\nüìä –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π '–ö–∞—Ä—Ç–∞ –¥–Ω—è' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    session_id = db.start_user_scenario(test_user_id, 'card_of_day')
    print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞—á–∞—Ç —Å session_id: {session_id}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —à–∞–≥–∏ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    db.log_scenario_step(test_user_id, 'card_of_day', 'started', {
        'session_id': session_id,
        'today': datetime.now(TIMEZONE).date().isoformat()
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'initial_resource_selected', {
        'resource': 'üòä –•–æ—Ä–æ—à–æ',
        'session_id': session_id
    })
    
    # 1. –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
    db.log_scenario_step(test_user_id, 'card_of_day', 'text_request_provided', {
        'request_length': 45,
        'session_id': session_id
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'card_drawn', {
        'card_number': 25,
        'session_id': session_id,
        'user_request': '–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏?'
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'initial_response_provided', {
        'session_id': session_id,
        'response_length': 67
    })
    
    # 2. –í—ã–±–æ—Ä —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å –ò–ò (–¥–∞)
    db.log_scenario_step(test_user_id, 'card_of_day', 'ai_reflection_choice', {
        'choice': 'yes',
        'session_id': session_id
    })
    
    # 3. –û—Ç–≤–µ—Ç—ã –Ω–∞ –ò–ò-–≤–æ–ø—Ä–æ—Å—ã
    db.log_scenario_step(test_user_id, 'card_of_day', 'ai_response_1_provided', {
        'response_length': 89,
        'session_id': session_id
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'ai_response_2_provided', {
        'response_length': 123,
        'session_id': session_id
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'ai_response_3_provided', {
        'response_length': 156,
        'session_id': session_id
    })
    
    # 4. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è (—É–ª—É—á—à–∏–ª–æ—Å—å)
    db.log_scenario_step(test_user_id, 'card_of_day', 'mood_change_recorded', {
        'initial_resource': 'üòä –•–æ—Ä–æ—à–æ',
        'final_resource': 'ü§© –û—Ç–ª–∏—á–Ω–æ',
        'change_direction': 'better',
        'session_id': session_id
    })
    
    # 5. –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ (–ø–æ–º–æ–≥–ª–æ)
    db.log_scenario_step(test_user_id, 'card_of_day', 'usefulness_rating', {
        'rating': 'helped',
        'card_number': 25,
        'session_id': session_id
    })
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    db.complete_user_scenario(test_user_id, 'card_of_day', session_id)
    db.log_scenario_step(test_user_id, 'card_of_day', 'completed', {
        'card_number': 25,
        'session_id': session_id,
        'initial_resource': 'üòä –•–æ—Ä–æ—à–æ',
        'final_resource': 'ü§© –û—Ç–ª–∏—á–Ω–æ'
    })
    
    print("‚úÖ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print(f"\nüìä –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    session_id_2 = db.start_user_scenario(test_user_id, 'card_of_day')
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'started', {
        'session_id': session_id_2,
        'today': datetime.now(TIMEZONE).date().isoformat()
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'initial_resource_selected', {
        'resource': 'üòê –°—Ä–µ–¥–Ω–µ',
        'session_id': session_id_2
    })
    
    # –ú—ã—Å–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    db.log_scenario_step(test_user_id, 'card_of_day', 'request_type_selected', {
        'request_type': 'mental',
        'session_id': session_id_2
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'card_drawn', {
        'card_number': 15,
        'session_id': session_id_2
    })
    
    db.log_scenario_step(test_user_id, 'card_of_day', 'initial_response_provided', {
        'session_id': session_id_2,
        'response_length': 45
    })
    
    # –û—Ç–∫–∞–∑ –æ—Ç –ò–ò-—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    db.log_scenario_step(test_user_id, 'card_of_day', 'ai_reflection_choice', {
        'choice': 'no',
        'session_id': session_id_2
    })
    
    # –£—Ö—É–¥—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
    db.log_scenario_step(test_user_id, 'card_of_day', 'mood_change_recorded', {
        'initial_resource': 'üòê –°—Ä–µ–¥–Ω–µ',
        'final_resource': 'üòî –ù–∏–∑–∫–æ',
        'change_direction': 'worse',
        'session_id': session_id_2
    })
    
    # –û—Ü–µ–Ω–∫–∞ "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–ª—É–±–æ–∫–æ"
    db.log_scenario_step(test_user_id, 'card_of_day', 'usefulness_rating', {
        'rating': 'notdeep',
        'card_number': 15,
        'session_id': session_id_2
    })
    
    db.complete_user_scenario(test_user_id, 'card_of_day', session_id_2)
    db.log_scenario_step(test_user_id, 'card_of_day', 'completed', {
        'card_number': 15,
        'session_id': session_id_2,
        'initial_resource': 'üòê –°—Ä–µ–¥–Ω–µ',
        'final_resource': 'üòî –ù–∏–∑–∫–æ'
    })
    
    print("‚úÖ –í—Ç–æ—Ä–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    try:
        cursor = db.conn.execute("""
            SELECT step, COUNT(*) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step IN ('text_request_provided', 'request_type_selected', 'ai_reflection_choice', 
                        'ai_response_1_provided', 'ai_response_2_provided', 'ai_response_3_provided',
                        'mood_change_recorded', 'usefulness_rating')
            AND timestamp >= datetime('now', '-1 day')
            GROUP BY step
        """)
        
        new_metrics = cursor.fetchall()
        print(f"\nüé¥ –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∑–∞ 1 –¥–µ–Ω—å):")
        for metric in new_metrics:
            print(f"  ‚Ä¢ {metric['step']}: {metric['count']} —Ä–∞–∑")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
        
        # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        text_req = sum(1 for m in new_metrics if m['step'] == 'text_request_provided')
        mental_req = sum(1 for m in new_metrics if m['step'] == 'request_type_selected')
        print(f"  üìù –ó–∞–ø—Ä–æ—Å—ã: {text_req} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, {mental_req} –º—ã—Å–ª–µ–Ω–Ω—ã—Ö")
        
        # –ò–ò-—Ä–µ—Ñ–ª–µ–∫—Å–∏—è
        ai_yes = sum(1 for m in new_metrics if m['step'] == 'ai_reflection_choice')
        print(f"  ü§ñ –ò–ò-—Ä–µ—Ñ–ª–µ–∫—Å–∏—è: {ai_yes} –≤—ã–±–æ—Ä–æ–≤")
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –ò–ò-–≤–æ–ø—Ä–æ—Å—ã
        ai_1 = sum(1 for m in new_metrics if m['step'] == 'ai_response_1_provided')
        ai_2 = sum(1 for m in new_metrics if m['step'] == 'ai_response_2_provided')
        ai_3 = sum(1 for m in new_metrics if m['step'] == 'ai_response_3_provided')
        print(f"  üí¨ –ò–ò-–æ—Ç–≤–µ—Ç—ã: {ai_1}‚Üí{ai_2}‚Üí{ai_3}")
        
        # –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
        mood_changes = sum(1 for m in new_metrics if m['step'] == 'mood_change_recorded')
        print(f"  üòä –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è: {mood_changes}")
        
        # –û—Ü–µ–Ω–∫–∏
        ratings = sum(1 for m in new_metrics if m['step'] == 'usefulness_rating')
        print(f"  ‚≠ê –û—Ü–µ–Ω–∫–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏: {ratings}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    db.close()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_new_metrics() 