#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ozon API
–ó–∞–ø—É—Å–∫: python test_ozon_integration.py
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
try:
    from modules.ozon_api import OzonAPI
    from modules.ozon_sync import OzonDataSync
    print("‚úÖ –ú–æ–¥—É–ª–∏ ozon_api –∏ ozon_sync –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ["OZON_API_KEY", "OZON_CLIENT_ID"]
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["", "YOUR_OZON_API_KEY_HERE", "YOUR_OZON_CLIENT_ID_HERE"]:
            print(f"   ‚úÖ {var}: {'*' * (len(value) - 4) + value[-4:] if len(value) > 4 else '*' * len(value)}")
        else:
            print(f"   ‚ùå {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ local_config.py")
        return False
    
    print("   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

async def test_ozon_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon API"""
    print("\nÔøΩÔøΩ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon API...")
    
    try:
        ozon_api = OzonAPI()
        print("   ‚úÖ –û–±—ä–µ–∫—Ç OzonAPI —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = await ozon_api.test_connection()
        if result["success"]:
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {result['message']}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result['message']}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_product_mapping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ mapping —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è mapping —Ç–æ–≤–∞—Ä–æ–≤...")
    
    try:
        ozon_api = OzonAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º mapping —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        result = await ozon_api.get_product_mapping(page_size=10, page=1)
        
        if result["success"]:
            mapping = result["mapping"]
            total_count = result["total_count"]
            
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {total_count} —Ç–æ–≤–∞—Ä–æ–≤")
            
            if mapping:
                print("   üì¶ –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
                for i, (offer_id, product_id) in enumerate(list(mapping.items())[:3], 1):
                    print(f"      {i}. {offer_id} ‚Üí {product_id}")
                
                if total_count > 3:
                    print(f"      ... –∏ –µ—â–µ {total_count - 3} —Ç–æ–≤–∞—Ä–æ–≤")
                
                return True, mapping
            else:
                print("   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return True, {}
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è mapping: {result.get('error')}")
            return False, {}
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, {}

async def test_analytics(mapping):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("\nüìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    if not mapping:
        print("   ‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return False
    
    try:
        ozon_api = OzonAPI()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 product_id –¥–ª—è —Ç–µ—Å—Ç–∞
        test_product_ids = list(mapping.values())[:3]
        print(f"   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è {len(test_product_ids)} —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        date_from = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        date_to = datetime.now().strftime("%Y-%m-%d")
        
        result = await ozon_api.get_analytics(test_product_ids, date_from, date_to)
        
        if result["success"]:
            print(f"   ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {result['period']}")
            print(f"   ÔøΩÔøΩ –¢–æ–≤–∞—Ä–æ–≤: {result['product_count']}")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            data = result["data"]
            if "result" in data and "data" in data["result"]:
                analytics_data = data["result"]["data"]
                print(f"   ÔøΩÔøΩ –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(analytics_data)}")
                
                if analytics_data:
                    print("   üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                    for i, row in enumerate(analytics_data[:2], 1):
                        product_id = row.get("dimensions", {}).get("product_id", "N/A")
                        ordered_units = row.get("metrics", {}).get("ordered_units", 0)
                        revenue = row.get("metrics", {}).get("revenue", 0.0)
                        print(f"      {i}. Product ID: {product_id}, –ü—Ä–æ–¥–∞–∂–∏: {ordered_units}, –í—ã—Ä—É—á–∫–∞: {revenue} ‚ÇΩ")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_stocks(mapping):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    print("\nüì¶ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤...")
    
    if not mapping:
        print("   ‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤")
        return False
    
    try:
        ozon_api = OzonAPI()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 product_id –¥–ª—è —Ç–µ—Å—Ç–∞
        test_product_ids = list(mapping.values())[:3]
        print(f"   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è {len(test_product_ids)} —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ batch –∑–∞–ø—Ä–æ—Å–æ–º
        result = await ozon_api.get_stocks_batch(test_product_ids)
        
        if result["success"]:
            stocks = result["stocks"]
            successful = result["successful"]
            failed = result["failed"]
            
            print(f"   ‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
            
            if stocks:
                print("   ÔøΩÔøΩ –î–∞–Ω–Ω—ã–µ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:")
                for product_id, stock_info in list(stocks.items())[:3]:
                    total_stock = stock_info.get("total_stock", 0)
                    warehouse_count = len(stock_info.get("warehouse_stocks", []))
                    print(f"      Product ID {product_id}: {total_stock} —à—Ç. (—Å–∫–ª–∞–¥–æ–≤: {warehouse_count})")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_complete_data(mapping):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nÔøΩÔøΩ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    if not mapping:
        print("   ‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        ozon_api = OzonAPI()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 offer_id –¥–ª—è —Ç–µ—Å—Ç–∞
        test_offer_ids = list(mapping.keys())[:2]
        print(f"   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(test_offer_ids)} —Ç–æ–≤–∞—Ä–æ–≤...")
        
        result = await ozon_api.get_complete_product_data(test_offer_ids)
        
        if result["success"]:
            summary = result["summary"]
            print(f"   ‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   üì¶ –í—Å–µ–≥–æ offer_id: {summary['total_offers']}")
            print(f"   ÔøΩÔøΩ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {summary['found_products']}")
            print(f"   ÔøΩÔøΩ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {'‚úÖ' if summary['analytics_success'] else '‚ùå'}")
            print(f"   üì¶ –û—Å—Ç–∞—Ç–∫–∏: {'‚úÖ' if summary['stocks_success'] else '‚ùå'}")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_ozon_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("\nüîÑ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    try:
        sync = OzonDataSync()
        print("   ‚úÖ –û–±—ä–µ–∫—Ç OzonDataSync —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ offer_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        print("   üìñ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è offer_id –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã...")
        offer_ids = await sync.read_offer_ids_from_sheet()
        
        if offer_ids:
            print(f"   ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(offer_ids)} offer_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã: {', '.join(offer_ids[:3])}")
            
            if len(offer_ids) > 3:
                print(f"      ... –∏ –µ—â–µ {len(offer_ids) - 3}")
            
            return True
        else:
            print("   ‚ö†Ô∏è  Offer ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_google_sheets_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
    print("\nÔøΩÔøΩ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets...")
    
    try:
        from modules.google_sheets import GoogleSheetsAPI
        
        sheets_api = GoogleSheetsAPI()
        print("   ‚úÖ –û–±—ä–µ–∫—Ç GoogleSheetsAPI —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
        spreadsheet_id = "1RoWWv9BgiwlSu9H-KJNsFItQxlUVhG1WMbyB0eFxzYM"
        sheet_name = "marketplaces"
        
        print(f"   ÔøΩÔøΩ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        result = await sheets_api.get_sheet_data(spreadsheet_id, sheet_name, "A1:A5")
        
        if result["success"]:
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ")
            data = result["data"]
            print(f"   üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def run_performance_test(mapping):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    if not mapping:
        print("   ‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        return
    
    try:
        ozon_api = OzonAPI()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ batch
        test_sizes = [1, 5, 10]
        
        for size in test_sizes:
            if len(mapping) >= size:
                test_product_ids = list(mapping.values())[:size]
                
                print(f"   üîç –¢–µ—Å—Ç –¥–ª—è {size} —Ç–æ–≤–∞—Ä–æ–≤...")
                
                start_time = datetime.now()
                
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
                stocks_result = await ozon_api.get_stocks_batch(test_product_ids)
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                
                if stocks_result["success"]:
                    print(f"      ‚úÖ –û—Å—Ç–∞—Ç–∫–∏ ({size} —Ç–æ–≤–∞—Ä–æ–≤): {duration:.2f} —Å–µ–∫")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_result.get('error')}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                await asyncio.sleep(1)
        
        print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ozon API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon API", test_ozon_api_connection),
        ("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_google_sheets_connection),
        ("Mapping —Ç–æ–≤–∞—Ä–æ–≤", test_product_mapping),
        ("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", test_analytics),
        ("–û—Å—Ç–∞—Ç–∫–∏", test_stocks),
        ("–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", test_complete_data),
        ("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", test_ozon_sync),
    ]
    
    results = {}
    mapping = {}
    
    for test_name, test_func in tests:
        try:
            if test_name == "Mapping —Ç–æ–≤–∞—Ä–æ–≤":
                success, mapping_data = await test_func()
                results[test_name] = success
                if success:
                    mapping = mapping_data
            elif test_name == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
                results[test_name] = await test_func(mapping)
            elif test_name == "–û—Å—Ç–∞—Ç–∫–∏":
                results[test_name] = await test_func(mapping)
            elif test_name == "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
                results[test_name] = await test_func(mapping)
            else:
                results[test_name] = await test_func()
                
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã)
    if mapping:
        await run_performance_test(mapping)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("ÔøΩÔøΩ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<25} {status}")
        if success:
            passed += 1
    
    print("-" * 60)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    
    if passed == total:
        print("\nÔøΩÔøΩ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ozon API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è  –ü–†–û–í–ê–õ–ï–ù–û {total - passed} –¢–ï–°–¢–û–í")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())
