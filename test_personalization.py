#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
"""

import re
from typing import Dict, Any

class GenderDeclension:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –ø–æ –ø–æ–ª—É"""
    
    @classmethod
    def apply_declension(cls, text: str, gender: str = 'neutral') -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É"""
        if gender not in ['male', 'female', 'neutral']:
            gender = 'neutral'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏
        text = cls._apply_pronoun_declensions(text, gender)
        text = cls._apply_adjective_declensions(text, gender)
        
        return text
    
    @classmethod
    def _apply_pronoun_declensions(cls, text: str, gender: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π"""
        text = text.replace('{you}', '—Ç—ã')
        return text
    
    @classmethod
    def _apply_adjective_declensions(cls, text: str, gender: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –≥–ª–∞–≥–æ–ª–æ–≤"""
        endings_map = {
            'ready': {
                'male': '',      # –≥–æ—Ç–æ–≤
                'female': '–∞',   # –≥–æ—Ç–æ–≤–∞  
                'neutral': '—ã'   # –≥–æ—Ç–æ–≤—ã
            },
            'confident': {
                'male': '',      # —É–≤–µ—Ä–µ–Ω
                'female': '–∞',   # —É–≤–µ—Ä–µ–Ω–∞
                'neutral': '—ã'   # —É–≤–µ—Ä–µ–Ω—ã
            }
        }
        
        for declension_type, variants in endings_map.items():
            placeholder = f"{{{declension_type}}}"
            if placeholder in text:
                ending = variants.get(gender, variants['neutral'])
                text = text.replace(placeholder, ending)
        
        return text

def personalize_text(base_text: str, user_info: Dict[str, Any]) -> str:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏ –∏ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not base_text:
        return ""
    
    text = base_text
    gender = user_info.get('gender', 'neutral')
    name = user_info.get('name', '')
    has_name = user_info.get('has_name', False)
    
    # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è
    if has_name and name:
        text = text.replace('{name}', name)
        if '{name_part}' in text:
            name_part = f", {name}" if has_name else ""
            text = text.replace('{name_part}', name_part)
    else:
        text = text.replace('{name}', '')
        text = text.replace('{name_part}', '')
        text = re.sub(r',\s*', '', text)
        text = re.sub(r'\s+', ' ', text)
    
    # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ –ø–æ–ª—É
    text = GenderDeclension.apply_declension(text, gender)
    
    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {your} –æ—Ç–¥–µ–ª—å–Ω–æ
    if '{your}' in text:
        if gender == 'female':
            text = text.replace('{your}', '—Ç–≤–æ—è')
        else:
            text = text.replace('{your}', '—Ç–≤–æ–π')
    
    # 4. –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def test_personalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º
    text1 = "–ü—Ä–∏–≤–µ—Ç{name_part}! –¢—ã{ready} –≥–æ—Ç–æ–≤{ready} –Ω–∞—á–∞—Ç—å?"
    user1 = {'name': '–ê–Ω–Ω–∞', 'gender': 'female', 'has_name': True}
    result1 = personalize_text(text1, user1)
    print(f"–¢–µ—Å—Ç 1 (–ê–Ω–Ω–∞, female): '{result1}'")
    
    expected1 = "–ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞! –¢—ã –≥–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å?"
    if result1 == expected1:
        print("‚úÖ –¢–µ—Å—Ç 1 –ü–†–û–ô–î–ï–ù")
    else:
        print(f"‚ùå –¢–µ—Å—Ç 1 –ü–†–û–í–ê–õ–ï–ù. –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected1}'")
    
    # –¢–µ—Å—Ç 2: –ë–µ–∑ –∏–º–µ–Ω–∏
    text2 = "–ü—Ä–∏–≤–µ—Ç{name_part}! –¢—ã{ready} –≥–æ—Ç–æ–≤{ready} –Ω–∞—á–∞—Ç—å?"
    user2 = {'name': '', 'gender': 'neutral', 'has_name': False}
    result2 = personalize_text(text2, user2)
    print(f"–¢–µ—Å—Ç 2 (–±–µ–∑ –∏–º–µ–Ω–∏, neutral): '{result2}'")
    
    expected2 = "–ü—Ä–∏–≤–µ—Ç! –¢—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
    if result2 == expected2:
        print("‚úÖ –¢–µ—Å—Ç 2 –ü–†–û–ô–î–ï–ù")
    else:
        print(f"‚ùå –¢–µ—Å—Ç 2 –ü–†–û–í–ê–õ–ï–ù. –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected2}'")
    
    # –¢–µ—Å—Ç 3: –ú—É–∂—Å–∫–æ–π –ø–æ–ª
    text3 = "–û—Ç–ª–∏—á–Ω–æ, {name}! –¢—ã{ready} —Å–ø—Ä–∞–≤–∏–ª{ready}—Å—è!"
    user3 = {'name': '–ò–≤–∞–Ω', 'gender': 'male', 'has_name': True}
    result3 = personalize_text(text3, user3)
    print(f"–¢–µ—Å—Ç 3 (–ò–≤–∞–Ω, male): '{result3}'")
    
    expected3 = "–û—Ç–ª–∏—á–Ω–æ, –ò–≤–∞–Ω! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è!"
    if result3 == expected3:
        print("‚úÖ –¢–µ—Å—Ç 3 –ü–†–û–ô–î–ï–ù")
    else:
        print(f"‚ùå –¢–µ—Å—Ç 3 –ü–†–û–í–ê–õ–ï–ù. –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected3}'")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ
    text4 = "–¢–≤–æ–π{your} –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à."
    user4 = {'name': '–ú–∞—Ä–∏—è', 'gender': 'female', 'has_name': True}
    result4 = personalize_text(text4, user4)
    print(f"–¢–µ—Å—Ç 4 (–ú–∞—Ä–∏—è, female): '{result4}'")
    
    expected4 = "–¢–≤–æ—è –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à."
    if result4 == expected4:
        print("‚úÖ –¢–µ—Å—Ç 4 –ü–†–û–ô–î–ï–ù")
    else:
        print(f"‚ùå –¢–µ—Å—Ç 4 –ü–†–û–í–ê–õ–ï–ù. –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected4}'")
    
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("- –ù–µ—Ç –¥–≤–æ–π–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π ‚úÖ")
    print("- –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ '—Ç—ã' ‚úÖ") 
    print("- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ –ø–æ–ª—É ‚úÖ")
    print("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω ‚úÖ")

if __name__ == "__main__":
    test_personalization()

