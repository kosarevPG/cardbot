"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(__file__))

from database.db import Database
from modules.texts import get_personalized_text, LEARNING_TEXTS, CARDS_TEXTS, ERROR_TEXTS

def test_database_connection():
    """–¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    print("üîß –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        db = Database("data/bot.db")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return db
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def test_user_genders(db):
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüîß –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    try:
        cursor = db.conn.execute("SELECT user_id, name, username, gender FROM users LIMIT 10")
        users = cursor.fetchall()
        
        if not users:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
            return []
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user in users:
            user_id = user[0]
            name = user[1] or "–ù–µ—Ç –∏–º–µ–Ω–∏"
            username = user[2] or "–ù–µ—Ç username"
            gender = user[3] or "neutral"
            print(f"  - ID: {user_id} | @{username} | {name} | –ü–æ–ª: {gender}")
        
        return users
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def test_personalization_learning(db, user_id, gender, name):
    """–¢–µ—Å—Ç 3: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    print(f"\nüîß –¢–µ—Å—Ç 3: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({gender}, {name})...")
    
    tests = [
        ("intro.welcome", LEARNING_TEXTS),
        ("theory_1", LEARNING_TEXTS),
        ("entry_poll.q1.question", LEARNING_TEXTS),
    ]
    
    for key, texts_dict in tests:
        try:
            text = get_personalized_text(key, texts_dict, user_id, db)
            print(f"‚úÖ {key}:")
            print(f"   {text[:100]}...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {key}: {e}")

def test_personalization_cards(db, user_id, gender, name):
    """–¢–µ—Å—Ç 4: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–∞—Ä—Ç"""
    print(f"\nüîß –¢–µ—Å—Ç 4: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({gender}, {name})...")
    
    tests = [
        ("card_of_day.deck_selection", CARDS_TEXTS),
        ("card_of_day.resource_confirmation", CARDS_TEXTS),
        ("card_of_day.drawing_card", CARDS_TEXTS),
    ]
    
    for key, texts_dict in tests:
        try:
            text = get_personalized_text(key, texts_dict, user_id, db)
            if "{resource}" in text:
                text = text.format(resource="–í—ã—Å–æ–∫–∏–π")
            print(f"‚úÖ {key}:")
            print(f"   {text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {key}: {e}")

def test_personalization_errors(db, user_id, gender, name):
    """–¢–µ—Å—Ç 5: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫"""
    print(f"\nüîß –¢–µ—Å—Ç 5: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({gender}, {name})...")
    
    tests = [
        ("admin.training_logs_load_error", ERROR_TEXTS),
        ("permissions.access_denied", ERROR_TEXTS),
    ]
    
    for key, texts_dict in tests:
        try:
            text = get_personalized_text(key, texts_dict, user_id, db)
            print(f"‚úÖ {key}:")
            print(f"   {text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {key}: {e}")

def main():
    print("="*60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò –¢–ï–ö–°–¢–û–í")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db = test_database_connection()
    if not db:
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = test_user_genders(db)
    if not users:
        print("\n‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–µ–Ω–¥–µ—Ä–æ–º
    test_user = None
    for user in users:
        if user[3] and user[3] != "neutral":  # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≥–µ–Ω–¥–µ—Ä–æ–º
            test_user = user
            break
    
    if not test_user:
        test_user = users[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å –≥–µ–Ω–¥–µ—Ä–æ–º
    
    user_id = test_user[0]
    name = test_user[1] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = test_user[2] or "unknown"
    gender = test_user[3] or "neutral"
    
    print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ID={user_id}, @{username}, {name}, gender={gender}")
    
    # –¢–µ—Å—Ç 3-5: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    test_personalization_learning(db, user_id, gender, name)
    test_personalization_cards(db, user_id, gender, name)
    test_personalization_errors(db, user_id, gender, name)
    
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*60)

if __name__ == "__main__":
    main()


