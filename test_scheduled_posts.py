#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
"""
import sys
import os
import asyncio
import tempfile
import shutil
from datetime import datetime, timedelta
from unittest.mock import Mock, AsyncMock
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config_local import ADMIN_ID
from database.db import Database
from modules.logging_service import LoggingService
from modules.post_management import PostManager

def test_scheduled_post_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    print("‚è∞ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    test_db_path = tempfile.mktemp(suffix='.db')
    shutil.copy('database/dev.db', test_db_path)
    
    try:
        db = Database(test_db_path)
        logger_service = LoggingService(db)
        mock_bot = Mock()
        mock_bot.send_message = AsyncMock()
        
        post_manager = PostManager(db, mock_bot, logger_service)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        post_id = post_manager.create_post("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", int(ADMIN_ID))
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É (—á–µ—Ä–µ–∑ 1 —á–∞—Å)
        future_time = (datetime.now() + timedelta(hours=1)).strftime("%Y-%m-%d %H:%M")
        
        mailing_id = post_manager.create_mailing(
            post_id=post_id,
            title="–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
            send_to_all=True,
            created_by=int(ADMIN_ID),
            scheduled_at=future_time
        )
        
        print(f"‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {mailing_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        mailing = post_manager.get_mailing(mailing_id)
        assert mailing is not None, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert mailing['scheduled_at'] is not None, "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        assert mailing['status'] == 'pending', "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å pending"
        
        print("‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
        validation = post_manager.validate_mailing_data(True, None, future_time)
        assert validation['valid'] == True, "–í–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –ø—Ä–æ—à–ª–æ–º)
        past_time = (datetime.now() - timedelta(hours=1)).strftime("%Y-%m-%d %H:%M")
        invalid_validation = post_manager.validate_mailing_data(True, None, past_time)
        assert invalid_validation['valid'] == False, "–í—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()
        if test_db_path and os.path.exists(test_db_path):
            os.remove(test_db_path)

def test_scheduled_post_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    print("\nüé® –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    
    test_db_path = tempfile.mktemp(suffix='.db')
    shutil.copy('database/dev.db', test_db_path)
    
    try:
        db = Database(test_db_path)
        logger_service = LoggingService(db)
        mock_bot = Mock()
        
        post_manager = PostManager(db, mock_bot, logger_service)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        post_id = post_manager.create_post("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", int(ADMIN_ID))
        future_time = (datetime.now() + timedelta(hours=2)).strftime("%Y-%m-%d %H:%M")
        
        mailing_id = post_manager.create_mailing(
            post_id=post_id,
            title="–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
            send_to_all=True,
            created_by=int(ADMIN_ID),
            scheduled_at=future_time
        )
        
        mailing = post_manager.get_mailing(mailing_id)
        preview = post_manager.format_mailing_preview(mailing)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert "‚è≥" in preview, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏ –æ–∂–∏–¥–∞–Ω–∏—è"
        assert "üìÖ" in preview, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏"
        assert future_time.split()[0] in preview, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞—Ç–∞"
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()
        if test_db_path and os.path.exists(test_db_path):
            os.remove(test_db_path)

def test_command_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    commands = [
        "/send_post 1 all",
        "/send_post 1 all 2024-12-31 15:30",
        "/send_post 1 123456,789012",
        "/send_post 1 123456,789012 2024-12-31 15:30"
    ]
    
    for command in commands:
        try:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            text = command[len("/send_post"):].strip()
            parts = text.split()
            
            assert len(parts) >= 2, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ: {command}"
            
            post_id = int(parts[0])
            target = parts[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            scheduled_at = None
            if len(parts) >= 3:
                time_parts = parts[2:]
                scheduled_at = " ".join(time_parts)
            
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command}' —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞:")
            print(f"   Post ID: {post_id}")
            print(f"   Target: {target}")
            print(f"   Scheduled: {scheduled_at}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
            return False
    
    print("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", test_scheduled_post_creation),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", test_scheduled_post_formatting),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥", test_command_parsing),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –û–¢–õ–û–ñ–ï–ù–ù–´–• –ü–û–°–¢–û–í –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 