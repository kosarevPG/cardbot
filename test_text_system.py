#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.
"""

import sys
import os
import tempfile
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def create_test_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    db_path = tempfile.mktemp(suffix='.db')
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
    cursor.execute("""
        CREATE TABLE users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            username TEXT,
            first_name TEXT,
            gender TEXT DEFAULT 'neutral',
            first_seen TEXT
        )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        (123456789, '–ê–Ω–Ω–∞', 'anna_user', '–ê–Ω–Ω–∞', 'female', '2025-01-01'),
        (987654321, '–ò–≤–∞–Ω', 'ivan_user', '–ò–≤–∞–Ω', 'male', '2025-01-02'),
        (555666777, 'Alex', 'alex_user', 'Alex', 'neutral', '2025-01-03'),
        (111222333, '–ú–∞—Ä–∏—è', 'maria_user', '–ú–∞—Ä–∏—è', 'female', '2025-01-04'),
        (444555666, 'TestUser', 'test_user', None, 'neutral', '2025-01-05'),  # –ë–µ–∑ –∏–º–µ–Ω–∏
    ]
    
    cursor.executemany("""
        INSERT INTO users (user_id, name, username, first_name, gender, first_seen)
        VALUES (?, ?, ?, ?, ?, ?)
    """, test_users)
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    return db_path

def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database.db import Database
        
        db_path = create_test_database()
        db = Database(db_path)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        test_cases = [
            (123456789, '–ê–Ω–Ω–∞', 'female'),
            (987654321, '–ò–≤–∞–Ω', 'male'),
            (555666777, 'Alex', 'neutral'),
            (444555666, 'TestUser', 'neutral'),
            (999999999, None, 'neutral')  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ]
        
        for user_id, expected_name, expected_gender in test_cases:
            user_info = db.get_user_info(user_id)
            if user_info:
                actual_name = user_info.get('first_name') or user_info.get('name')
                actual_gender = user_info.get('gender', 'neutral')
                
                name_match = (actual_name == expected_name)
                gender_match = (actual_gender == expected_gender)
                
                status = "‚úÖ" if name_match and gender_match else "‚ùå"
                print(f"  {status} ID {user_id}: –∏–º—è='{actual_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}'), –ø–æ–ª='{actual_gender}' (–æ–∂–∏–¥–∞–ª—Å—è '{expected_gender}')")
            else:
                if expected_name is None:
                    print(f"  ‚úÖ ID {user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–ª–æ—Å—å)")
                else:
                    print(f"  ‚ùå ID {user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        os.unlink(db_path)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_gender_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–Ω–¥–µ—Ä–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –≥–µ–Ω–¥–µ—Ä–∞...")
    
    try:
        from modules.texts.gender_utils import (
            determine_gender_by_name, 
            personalize_text, 
            get_user_info_for_text
        )
        from database.db import Database
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ –∏–º–µ–Ω–∏
        name_tests = [
            ('–ê–Ω–Ω–∞', 'female'),
            ('–ú–∞—Ä–∏—è', 'female'),
            ('–ò–≤–∞–Ω', 'male'),
            ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', 'male'),
            ('Alex', 'neutral'),
            ('TestUser', 'neutral'),
            ('', 'neutral'),
            (None, 'neutral')
        ]
        
        print("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ –∏–º–µ–Ω–∏:")
        for name, expected in name_tests:
            result = determine_gender_by_name(name)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"    {status} '{name}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}')")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤
        print("\n  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤:")
        
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç{name_part}! –¢—ã{ready} –≥–æ—Ç–æ–≤{ready} –Ω–∞—á–∞—Ç—å?",
            "–û—Ç–ª–∏—á–Ω–æ, {name}! –¢—ã{ready} —Å–ø—Ä–∞–≤–∏–ª{ready}—Å—è!",
            "–¢–≤–æ–π{your} –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à."
        ]
        
        test_users = [
            {'name': '–ê–Ω–Ω–∞', 'gender': 'female', 'has_name': True},
            {'name': '–ò–≤–∞–Ω', 'gender': 'male', 'has_name': True},
            {'name': '', 'gender': 'neutral', 'has_name': False}
        ]
        
        for text in test_texts:
            print(f"\n    –¢–µ–∫—Å—Ç: '{text}'")
            for user_info in test_users:
                result = personalize_text(text, user_info)
                print(f"      {user_info['name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ({user_info['gender']}): '{result}'")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –≥–µ–Ω–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ç–∏–ª–∏—Ç –≥–µ–Ω–¥–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_text_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–∫—Å—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤...")
    
    try:
        from modules.texts import (
            LEARNING_TEXTS, 
            CARDS_TEXTS, 
            COMMON_TEXTS, 
            ERROR_TEXTS, 
            MARKETPLACE_TEXTS
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
        text_modules = {
            'LEARNING_TEXTS': LEARNING_TEXTS,
            'CARDS_TEXTS': CARDS_TEXTS,
            'COMMON_TEXTS': COMMON_TEXTS,
            'ERROR_TEXTS': ERROR_TEXTS,
            'MARKETPLACE_TEXTS': MARKETPLACE_TEXTS
        }
        
        for module_name, module_texts in text_modules.items():
            if isinstance(module_texts, dict) and len(module_texts) > 0:
                print(f"  ‚úÖ {module_name}: –∑–∞–≥—Ä—É–∂–µ–Ω, {len(module_texts)} —Ä–∞–∑–¥–µ–ª–æ–≤")
            else:
                print(f"  ‚ùå {module_name}: –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        key_texts = [
            ('LEARNING_TEXTS', 'intro.welcome'),
            ('LEARNING_TEXTS', 'entry_poll.q1.question'),
            ('CARDS_TEXTS', 'card_of_day.welcome'),
            ('COMMON_TEXTS', 'greetings.start')
        ]
        
        print("\n  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:")
        for module_name, text_key in key_texts:
            module_texts = text_modules[module_name]
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É
            keys = text_key.split('.')
            current = module_texts
            try:
                for key in keys:
                    current = current[key]
                
                if current and isinstance(current, str) and len(current.strip()) > 0:
                    print(f"    ‚úÖ {module_name}.{text_key}: –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"    ‚ùå {module_name}.{text_key}: –ø—É—Å—Ç–æ–π")
                    return False
            except KeyError:
                print(f"    ‚ùå {module_name}.{text_key}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_full_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from modules.texts.gender_utils import get_personalized_text
        from modules.texts import LEARNING_TEXTS
        from database.db import Database
        
        db_path = create_test_database()
        db = Database(db_path)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        test_cases = [
            (123456789, 'intro.welcome', '–ê–Ω–Ω–∞', 'female'),
            (987654321, 'intro.welcome', '–ò–≤–∞–Ω', 'male'),
            (555666777, 'intro.welcome', 'Alex', 'neutral'),
            (444555666, 'intro.welcome', 'TestUser', 'neutral')
        ]
        
        print("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:")
        for user_id, text_key, expected_name, expected_gender in test_cases:
            try:
                personalized_text = get_personalized_text(text_key, LEARNING_TEXTS, user_id, db)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                has_personalization = (
                    (expected_name and expected_name in personalized_text) or
                    ('{name}' not in personalized_text and '{name_part}' not in personalized_text)
                )
                
                status = "‚úÖ" if has_personalization else "‚ùå"
                print(f"    {status} ID {user_id} ({expected_gender}): –ø–æ–ª—É—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
                print(f"        '{personalized_text[:100]}...'")
                
            except Exception as e:
                print(f"    ‚ùå ID {user_id}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ - {e}")
                return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        os.unlink(db_path)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤")
    print("=" * 70)
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_operations),
        ("–£—Ç–∏–ª–∏—Ç—ã –≥–µ–Ω–¥–µ—Ä–∞", test_gender_utils),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤", test_text_loading),
        ("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_full_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:<15} {test_name}")
        if result:
            passed += 1
    
    print("-" * 70)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é.")
        return True
    else:
        print("üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

