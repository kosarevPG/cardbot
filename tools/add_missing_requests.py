#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ initial_response_provided
"""
import sqlite3
import json
from datetime import datetime

def add_missing_requests():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ initial_response_provided"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ initial_response_provided")
        print(f"üìÅ –ë–î: {db_path}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ initial_response_provided
        cursor = conn.execute("""
            SELECT id, user_id, username, name, action, details, timestamp
            FROM actions 
            WHERE action = 'initial_response_provided'
            ORDER BY timestamp DESC
        """)
        
        initial_responses = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(initial_responses)} –∑–∞–ø–∏—Å–µ–π initial_response_provided")
        
        added_count = 0
        skipped_count = 0
        
        for row in initial_responses:
            try:
                details = json.loads(row['details'])
                response_text = details.get('response', '')
                session_id = details.get('session_id', '')
                
                if not response_text:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID {row['id']}: –Ω–µ—Ç response")
                    skipped_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –≤ user_requests
                cursor2 = conn.execute("""
                    SELECT id FROM user_requests 
                    WHERE user_id = ? AND request_text = ?
                """, (row['user_id'], response_text))
                
                existing = cursor2.fetchone()
                if existing:
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID {row['id']}: —É–∂–µ –µ—Å—Ç—å –≤ user_requests")
                    skipped_count += 1
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ user_requests
                conn.execute("""
                    INSERT INTO user_requests (user_id, request_text, timestamp, session_id)
                    VALUES (?, ?, ?, ?)
                """, (row['user_id'], response_text, row['timestamp'], session_id))
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ID {row['id']}: User {row['user_id']} - '{response_text[:50]}...'")
                added_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID {row['id']}: {e}")
                skipped_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_after = cursor.fetchone()[0]
        
        print(f"\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {added_count}")
        print(f"üìä –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {skipped_count}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ user_requests: {total_after}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if added_count > 0:
            cursor = conn.execute("""
                SELECT ur.request_text, ur.timestamp, u.name, u.username, ur.user_id
                FROM user_requests ur 
                LEFT JOIN users u ON ur.user_id = u.user_id 
                ORDER BY ur.timestamp DESC 
                LIMIT 5
            """)
            
            examples = cursor.fetchall()
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
            for i, row in enumerate(examples, 1):
                name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                username = f"@{row['username']}" if row['username'] else ""
                user_id = row['user_id']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(row['timestamp'].replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    formatted_date = row['timestamp'][:16]
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                request_text = row['request_text']
                if len(request_text) > 60:
                    request_text = request_text[:60] + "..."
                
                print(f"  {i}. {formatted_date} | {name} {username} (ID: {user_id})")
                print(f"     üí¨ {request_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
        cursor = conn.execute("""
            SELECT * FROM user_requests 
            WHERE user_id = 1740579634
            ORDER BY timestamp DESC
        """)
        
        oleg_requests = cursor.fetchall()
        if oleg_requests:
            print(f"\n‚úÖ –ó–∞–ø—Ä–æ—Å—ã –û–ª–µ–≥–∞ (1740579634) –≤ user_requests:")
            for ur in oleg_requests:
                print(f"  ‚Ä¢ ID: {ur['id']} | Text: {ur['request_text'][:50]}... | Time: {ur['timestamp'][:16]}")
        else:
            print(f"\n‚ùå –ó–∞–ø—Ä–æ—Å—ã –û–ª–µ–≥–∞ (1740579634) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = add_missing_requests()
    if success:
        print("\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("\n‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!") 