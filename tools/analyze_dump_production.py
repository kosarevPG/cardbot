#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ dump_production.db
"""
import sqlite3
import sys
import os

def analyze_dump_production():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–∞–Ω–Ω—ã–µ –≤ dump_production.db"""
    print("üîç –ê–ù–ê–õ–ò–ó DUMP_PRODUCTION.DB")
    print("=" * 50)
    
    try:
        db_path = "database/dump_production.db"
        if not os.path.exists(db_path):
            print(f"‚ùå –§–∞–π–ª {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row['name'] for row in cursor.fetchall()]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  ‚Ä¢ {table}")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶:")
        
        for table in tables:
            print(f"\nüî∏ –¢–ê–ë–õ–ò–¶–ê: {table}")
            print("-" * 30)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = conn.execute(f"SELECT COUNT(*) as count FROM {table}")
            count = cursor.fetchone()['count']
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π: {count}")
            
            if count > 0:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
                cursor = conn.execute(f"PRAGMA table_info({table})")
                columns = cursor.fetchall()
                print(f"  üìù –°—Ç–æ–ª–±—Ü—ã:")
                for col in columns:
                    print(f"    ‚Ä¢ {col['name']} ({col['type']})")
                
                # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                cursor = conn.execute(f"SELECT * FROM {table} LIMIT 3")
                rows = cursor.fetchall()
                print(f"  üìÑ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                for i, row in enumerate(rows, 1):
                    print(f"    {i}. {dict(row)}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
                if 'request' in [col['name'] for col in columns] or 'user_id' in [col['name'] for col in columns]:
                    print(f"  üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                    
                    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    if 'user_id' in [col['name'] for col in columns]:
                        cursor = conn.execute(f"SELECT COUNT(DISTINCT user_id) as unique_users FROM {table}")
                        unique_users = cursor.fetchone()['unique_users']
                        print(f"    ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    if 'timestamp' in [col['name'] for col in columns]:
                        cursor = conn.execute(f"SELECT * FROM {table} ORDER BY timestamp DESC LIMIT 2")
                        recent = cursor.fetchall()
                        print(f"    ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                        for row in recent:
                            print(f"      - {dict(row)}")
        
        conn.close()
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_dump_production() 