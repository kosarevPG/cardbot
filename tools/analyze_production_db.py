#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–∞—á–∞–Ω–Ω–æ–π production –ë–î bot (20).db
"""
import sqlite3
import os

def analyze_production_db():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É production –ë–î"""
    try:
        db_path = "database/bot (20).db"
        if not os.path.exists(db_path):
            print(f"‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
            return
            
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î: {db_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"\nüìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î:")
        for table in tables:
            print(f"  ‚Ä¢ {table[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests:")
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_requests'")
        user_requests_exists = cursor.fetchone() is not None
        
        if user_requests_exists:
            cursor = conn.execute("PRAGMA table_info(user_requests)")
            columns = cursor.fetchall()
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_requests —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"  üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user_requests:")
            for col in columns:
                print(f"    ‚Ä¢ {col[1]} ({col[2]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
            count = cursor.fetchone()[0]
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π –≤ user_requests: {count}")
        else:
            print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ user_requests –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É actions
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É actions:")
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='actions'")
        actions_exists = cursor.fetchone() is not None
        
        if actions_exists:
            cursor = conn.execute("PRAGMA table_info(actions)")
            columns = cursor.fetchall()
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ actions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"  üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ actions:")
            for col in columns:
                print(f"    ‚Ä¢ {col[1]} ({col[2]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = conn.execute("SELECT COUNT(*) FROM actions")
            count = cursor.fetchone()[0]
            print(f"  üìä –ó–∞–ø–∏—Å–µ–π –≤ actions: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
            cursor = conn.execute("SELECT action, COUNT(*) as count FROM actions GROUP BY action ORDER BY count DESC")
            action_types = cursor.fetchall()
            print(f"  üìù –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:")
            for row in action_types:
                print(f"    ‚Ä¢ {row['action']}: {row['count']}")
        else:
            print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ actions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

if __name__ == "__main__":
    analyze_production_db() 