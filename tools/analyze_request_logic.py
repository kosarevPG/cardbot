#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import sqlite3
import json
from datetime import datetime

def analyze_request_logic():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"üìÅ –ë–î: {db_path}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ user_requests
        print(f"\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ user_requests:")
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_requests = cursor.fetchone()[0]
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_requests}")
        
        cursor = conn.execute("SELECT COUNT(DISTINCT user_id) FROM user_requests")
        unique_users = cursor.fetchone()[0]
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ actions
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ actions:")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
        cursor = conn.execute("""
            SELECT action, COUNT(*) as count
            FROM actions 
            WHERE details LIKE '%request%' OR details LIKE '%response%'
            GROUP BY action
            ORDER BY count DESC
        """)
        
        action_types = cursor.fetchall()
        print(f"  ‚Ä¢ –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏/–æ—Ç–≤–µ—Ç–∞–º–∏:")
        for row in action_types:
            print(f"    - {row['action']}: {row['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É - –Ω–∞—Ö–æ–¥–∏–º card_flow_started
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É:")
        
        cursor = conn.execute("""
            SELECT COUNT(*) FROM actions WHERE action = 'card_flow_started'
        """)
        card_starts = cursor.fetchone()[0]
        print(f"  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π card_flow_started: {card_starts}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        proposed_actions = [
            'typed_question_submitted',
            'initial_response_provided', 
            'set_request',
            'request_text_provided',
            'initial_response',
            'card_drawn_with_request'
        ]
        
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:")
        for action_type in proposed_actions:
            cursor = conn.execute("""
                SELECT COUNT(*) FROM actions WHERE action = ?
            """, (action_type,))
            count = cursor.fetchone()[0]
            print(f"  ‚Ä¢ {action_type}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # 5. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:")
        
        cursor = conn.execute("""
            WITH relevant_actions AS (
                SELECT 
                    user_id,
                    username,
                    name,
                    action,
                    details,
                    timestamp
                FROM actions
                WHERE 
                    details LIKE '%request%' AND
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
            ),
            extracted_requests AS (
                SELECT
                    user_id,
                    username,
                    name,
                    json_extract(details, '$.request') AS request_text,
                    timestamp
                FROM relevant_actions
                WHERE json_extract(details, '$.request') IS NOT NULL
            )
            SELECT COUNT(*) as count
            FROM extracted_requests
        """)
        
        proposed_count = cursor.fetchone()[0]
        print(f"  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç: {proposed_count} –∑–∞–ø–∏—Å–µ–π")
        
        # 6. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–æ–π
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫:")
        print(f"  ‚Ä¢ –ù–∞—à–∞ –ª–æ–≥–∏–∫–∞ (user_requests): {total_requests} –∑–∞–ø–∏—Å–µ–π")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: {proposed_count} –∑–∞–ø–∏—Å–µ–π")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å card_flow_started:")
        
        cursor = conn.execute("""
            WITH card_starts AS (
                SELECT 
                    id AS card_action_id,
                    user_id,
                    timestamp AS card_time
                FROM actions
                WHERE action = 'card_flow_started'
            ),
            text_requests AS (
                SELECT 
                    id AS request_action_id,
                    user_id,
                    username,
                    name,
                    action,
                    json_extract(details, '$.request') AS request_text,
                    timestamp AS request_time
                FROM actions
                WHERE 
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
                    AND json_extract(details, '$.request') IS NOT NULL
                    AND json_extract(details, '$.request') != ''
            ),
            matched_requests AS (
                SELECT 
                    c.user_id,
                    r.username,
                    r.name,
                    r.request_text,
                    r.request_time,
                    c.card_time,
                    ROW_NUMBER() OVER (PARTITION BY c.card_action_id ORDER BY r.request_time DESC) AS rn
                FROM card_starts c
                JOIN text_requests r
                  ON c.user_id = r.user_id
                 AND r.request_time < c.card_time
            )
            SELECT COUNT(*) as count
            FROM matched_requests
            WHERE rn = 1
        """)
        
        matched_count = cursor.fetchone()[0]
        print(f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –∫–∞—Ä—Ç–∞–º–∏: {matched_count} –∑–∞–ø–∏—Å–µ–π")
        
        # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–∏
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–∏ (user_requests):")
        cursor = conn.execute("""
            SELECT ur.request_text, ur.timestamp, u.name, u.username, ur.user_id
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 5
        """)
        
        examples = cursor.fetchall()
        for i, row in enumerate(examples, 1):
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            request_text = row['request_text'][:50] + "..." if len(row['request_text']) > 50 else row['request_text']
            print(f"  {i}. {name} {username}: {request_text}")
        
        # 9. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏:")
        cursor = conn.execute("""
            WITH relevant_actions AS (
                SELECT 
                    user_id,
                    username,
                    name,
                    action,
                    details,
                    timestamp
                FROM actions
                WHERE 
                    details LIKE '%request%' AND
                    action IN (
                        'typed_question_submitted',
                        'initial_response_provided',
                        'set_request',
                        'request_text_provided',
                        'initial_response',
                        'card_drawn_with_request'
                    )
            ),
            extracted_requests AS (
                SELECT
                    user_id,
                    username,
                    name,
                    json_extract(details, '$.request') AS request_text,
                    timestamp
                FROM relevant_actions
                WHERE json_extract(details, '$.request') IS NOT NULL
            )
            SELECT username, name, request_text, timestamp
            FROM extracted_requests
            ORDER BY timestamp DESC
            LIMIT 5
        """)
        
        proposed_examples = cursor.fetchall()
        for i, row in enumerate(proposed_examples, 1):
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            username = f"@{row['username']}" if row['username'] else ""
            request_text = row['request_text'][:50] + "..." if len(row['request_text']) > 50 else row['request_text']
            print(f"  {i}. {name} {username}: {request_text}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    analyze_request_logic() 