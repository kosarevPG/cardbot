#!/usr/bin/env python3
"""
–†–∞—Å—á–µ—Ç DAU –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_scenarios —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
"""
import requests
import re
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any

class DAUCalculator:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.session = requests.Session()
        self.username = "admin"
        self.password = "root"
        self.session.auth = (self.username, self.password)
        
    def execute_sql_query(self, sql_query: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/actions/query/"
        try:
            data = {'sql': sql_query}
            response = self.session.post(url, data=data, timeout=30)
            if response.status_code == 200:
                return self.parse_query_results(response.text)
            else:
                print(f"‚ùå HTTP {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def parse_query_results(self, html_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ HTML"""
        try:
            result = {
                'headers': [],
                'rows': [],
                'total_rows': 0,
                'error': None
            }
            
            if 'error' in html_content.lower() or 'exception' in html_content.lower():
                error_match = re.search(r'<div[^>]*class="[^"]*error[^"]*"[^>]*>(.*?)</div>', html_content, re.IGNORECASE | re.DOTALL)
                if error_match:
                    result['error'] = error_match.group(1).strip()
                    return result
            
            table_pattern = r'<table[^>]*class="[^"]*table[^"]*"[^>]*>(.*?)</table>'
            table_match = re.search(table_pattern, html_content, re.DOTALL | re.IGNORECASE)
            
            if table_match:
                table_html = table_match.group(1)
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                header_pattern = r'<th[^>]*>(.*?)</th>'
                for match in re.findall(header_pattern, table_html, re.DOTALL):
                    header_text = re.sub(r'<[^>]+>', '', match).strip()
                    headers.append(header_text)
                result['headers'] = headers
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏
                rows = []
                row_pattern = r'<tr[^>]*>(.*?)</tr>'
                for row_match in re.findall(row_pattern, table_html, re.DOTALL):
                    cell_pattern = r'<td[^>]*>(.*?)</td>'
                    cells = []
                    for cell_match in re.findall(cell_pattern, row_match, re.DOTALL):
                        cell_text = re.sub(r'<[^>]+>', '', cell_match).strip()
                        cells.append(cell_text)
                    if cells and len(cells) == len(headers):
                        rows.append(cells)
                
                result['rows'] = rows
                result['total_rows'] = len(rows)
            
            return result
        except Exception as e:
            return {'error': str(e)}
    
    def calculate_dau_today(self):
        """DAU –∑–∞ —Å–µ–≥–æ–¥–Ω—è (30 –∏—é–ª—è)"""
        print("üîç DAU –ó–ê –°–ï–ì–û–î–ù–Ø (30 –∏—é–ª—è)")
        print("=" * 40)
        
        sql = """
        SELECT COUNT(DISTINCT user_id) as dau_today
        FROM user_scenarios 
        WHERE DATE(started_at, '+3 hours') = '2025-07-30'
        AND user_id NOT IN (6682555021, 392141189, 239719200, 7494824111, 171507422, 138192985, 999999999)
        """
        
        result = self.execute_sql_query(sql)
        if result and not result.get('error'):
            if result['rows']:
                dau = result['rows'][0][0]
                print(f"üìä DAU –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {dau}")
                return int(dau)
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
                return 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return 0
    
    def calculate_dau_yesterday(self):
        """DAU –∑–∞ –≤—á–µ—Ä–∞ (29 –∏—é–ª—è)"""
        print("\nüîç DAU –ó–ê –í–ß–ï–†–ê (29 –∏—é–ª—è)")
        print("=" * 40)
        
        sql = """
        SELECT COUNT(DISTINCT user_id) as dau_yesterday
        FROM user_scenarios 
        WHERE DATE(started_at, '+3 hours') = '2025-07-29'
        AND user_id NOT IN (6682555021, 392141189, 239719200, 7494824111, 171507422, 138192985, 999999999)
        """
        
        result = self.execute_sql_query(sql)
        if result and not result.get('error'):
            if result['rows']:
                dau = result['rows'][0][0]
                print(f"üìä DAU –∑–∞ –≤—á–µ—Ä–∞: {dau}")
                return int(dau)
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞")
                return 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return 0
    
    def calculate_dau_7_days(self):
        """–°—Ä–µ–¥–Ω–∏–π DAU –∑–∞ 7 –¥–Ω–µ–π"""
        print("\nüîç –°–†–ï–î–ù–ò–ô DAU –ó–ê 7 –î–ù–ï–ô")
        print("=" * 40)
        
        sql = """
        SELECT 
            DATE(started_at, '+3 hours') as date,
            COUNT(DISTINCT user_id) as daily_dau
        FROM user_scenarios 
        WHERE DATE(started_at, '+3 hours') >= '2025-07-24'
        AND user_id NOT IN (6682555021, 392141189, 239719200, 7494824111, 171507422, 138192985, 999999999)
        GROUP BY DATE(started_at, '+3 hours')
        ORDER BY date DESC
        """
        
        result = self.execute_sql_query(sql)
        if result and not result.get('error'):
            if result['rows']:
                print("üìã DAU –ø–æ –¥–Ω—è–º:")
                total_dau = 0
                days_count = 0
                for row in result['rows']:
                    date, dau = row
                    print(f"  ‚Ä¢ {date}: {dau}")
                    total_dau += int(dau)
                    days_count += 1
                
                avg_dau = total_dau / days_count if days_count > 0 else 0
                print(f"\nüìä –°—Ä–µ–¥–Ω–∏–π DAU –∑–∞ 7 –¥–Ω–µ–π: {avg_dau:.1f}")
                return avg_dau
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π")
                return 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return 0
    
    def calculate_dau_30_days(self):
        """–°—Ä–µ–¥–Ω–∏–π DAU –∑–∞ 30 –¥–Ω–µ–π"""
        print("\nüîç –°–†–ï–î–ù–ò–ô DAU –ó–ê 30 –î–ù–ï–ô")
        print("=" * 40)
        
        sql = """
        SELECT 
            DATE(started_at, '+3 hours') as date,
            COUNT(DISTINCT user_id) as daily_dau
        FROM user_scenarios 
        WHERE DATE(started_at, '+3 hours') >= '2025-07-01'
        AND user_id NOT IN (6682555021, 392141189, 239719200, 7494824111, 171507422, 138192985, 999999999)
        GROUP BY DATE(started_at, '+3 hours')
        ORDER BY date DESC
        """
        
        result = self.execute_sql_query(sql)
        if result and not result.get('error'):
            if result['rows']:
                print("üìã DAU –ø–æ –¥–Ω—è–º (–ø–µ—Ä–≤—ã–µ 10):")
                total_dau = 0
                days_count = 0
                for i, row in enumerate(result['rows']):
                    date, dau = row
                    if i < 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–Ω–µ–π
                        print(f"  ‚Ä¢ {date}: {dau}")
                    total_dau += int(dau)
                    days_count += 1
                
                if days_count > 10:
                    print(f"  ‚Ä¢ ... –∏ –µ—â–µ {days_count - 10} –¥–Ω–µ–π")
                
                avg_dau = total_dau / days_count if days_count > 0 else 0
                print(f"\nüìä –°—Ä–µ–¥–Ω–∏–π DAU –∑–∞ 30 –¥–Ω–µ–π: {avg_dau:.1f}")
                print(f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {days_count}")
                return avg_dau
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π")
                return 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return 0
    
    def run_full_calculation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç DAU"""
        print("üîç –†–ê–°–ß–ï–¢ DAU –ò–ó USER_SCENARIOS")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        today_dau = self.calculate_dau_today()
        yesterday_dau = self.calculate_dau_yesterday()
        avg_7_days = self.calculate_dau_7_days()
        avg_30_days = self.calculate_dau_30_days()
        
        print("\n" + "=" * 60)
        print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è (30 –∏—é–ª—è): {today_dau}")
        print(f"‚Ä¢ –í—á–µ—Ä–∞ (29 –∏—é–ª—è): {yesterday_dau}")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: {avg_7_days:.1f}")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π: {avg_30_days:.1f}")
        print("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    calculator = DAUCalculator()
    calculator.run_full_calculation()

if __name__ == "__main__":
    main() 