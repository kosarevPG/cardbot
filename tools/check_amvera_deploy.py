#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è –Ω–∞ Amvera
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ Git, –Ω–æ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
"""

import os
import sys
import subprocess
import time
import requests
from datetime import datetime

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        result = subprocess.run(["git", "--no-pager", "log", "--oneline", "-1"], 
                              capture_output=True, text=True, check=True)
        last_commit = result.stdout.strip()
        print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {last_commit}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ç–∫–∏
        result = subprocess.run(["git", "status", "--porcelain"], 
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout)
            return False
        else:
            print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git: {e}")
        return False

def check_amvera_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Amvera –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Amvera –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Amvera
        url = "https://cardbot-1-kosarevpg.amvera.io/"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ Amvera –æ—Ç–≤–µ—á–∞–µ—Ç: HTTP {response.status_code}")
            return True
        else:
            print(f"‚ö†Ô∏è Amvera –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Amvera –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def check_new_ai_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö AI —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        from modules.ai_service import get_empathetic_response, get_weekly_analysis
        print("‚úÖ –ù–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ callable
        if callable(get_empathetic_response) and callable(get_weekly_analysis):
            print("‚úÖ AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–∑–æ–≤–∞")
            return True
        else:
            print("‚ùå AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è callable")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def check_evening_reflection_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AI —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
    print("\nüåô –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")
    
    try:
        from modules.evening_reflection import process_hard_moments
        print("‚úÖ –ú–æ–¥—É–ª—å –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏
        import inspect
        source = inspect.getsource(process_hard_moments)
        
        if "get_empathetic_response" in source:
            print("‚úÖ –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            return False
            
        if "get_reflection_summary_and_card_synergy" in source:
            print("‚úÖ –°–∏–Ω–µ—Ä–≥–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ùå –°–∏–Ω–µ—Ä–≥–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏ –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return False
            
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_scheduler_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        from modules.scheduler import ReflectionAnalysisScheduler
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py
        with open("main.py", "r", encoding="utf-8") as f:
            main_content = f.read()
            
        if "ReflectionAnalysisScheduler" in main_content:
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
        else:
            print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            return False
            
        if "reflection_scheduler.start()" in main_content:
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ main.py")
        else:
            print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ main.py")
            return False
            
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

def check_database_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ë–î...")
    
    try:
        from database.db import Database
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        db = Database('database/dev.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hasattr(db, 'get_today_card_of_the_day'):
            print("‚úÖ get_today_card_of_the_day –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå get_today_card_of_the_day –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        if hasattr(db, 'get_reflections_for_last_n_days'):
            print("‚úÖ get_reflections_for_last_n_days –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå get_reflections_for_last_n_days –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        if hasattr(db, 'get_users_with_recent_reflections'):
            print("‚úÖ get_users_with_recent_reflections –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå get_users_with_recent_reflections –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def force_amvera_rebuild():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –Ω–∞ Amvera"""
    print("\nüöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –Ω–∞ Amvera...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open("main.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        if "# Last Amvera rebuild:" not in content:
            content = f"# Last Amvera rebuild: {timestamp}\n{content}"
            
            with open("main.py", "w", encoding="utf-8") as f:
                f.write(content)
            
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏")
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º
            commands = [
                "git add main.py",
                f'git commit -m "force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –Ω–∞ Amvera - {timestamp}"',
                "git push origin master"
            ]
            
            for cmd in commands:
                print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {cmd}")
            
            print("üéâ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞!")
            print("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
            return True
        else:
            print("‚ÑπÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –°–¢–ê–¢–£–°–ê DEPLOY –ù–ê AMVERA")
    print("=" * 60)
    
    checks = [
        ("Git —Å—Ç–∞—Ç—É—Å", check_git_status),
        ("–ó–¥–æ—Ä–æ–≤—å–µ Amvera", check_amvera_health),
        ("–ù–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏", check_new_ai_functions),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", check_evening_reflection_integration),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", check_scheduler_integration),
        ("–§—É–Ω–∫—Ü–∏–∏ –ë–î", check_database_functions)
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        try:
            if check_func():
                passed += 1
            else:
                print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ '{name}' –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! DEPLOY –†–ï–ê–õ–¨–ù–û –†–ê–ë–û–¢–ê–ï–¢!")
        print("ü§ñ –ù–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ!")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        print("üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –Ω–∞ Amvera")
        
        response = input("\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
            force_amvera_rebuild()
        else:
            print("‚ÑπÔ∏è –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")

if __name__ == "__main__":
    main()
