#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""

import sqlite3
import os

DB_PATH = "database/dev.db"

def check_db():
    if not os.path.exists(DB_PATH):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É scenario_logs
        cursor = conn.execute("SELECT COUNT(*) as count FROM scenario_logs")
        total_logs = cursor.fetchone()['count']
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ scenario_logs: {total_logs}")
        
        if total_logs > 0:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor = conn.execute("""
                SELECT scenario, step, user_id, timestamp 
                FROM scenario_logs 
                ORDER BY timestamp DESC 
                LIMIT 10
            """)
            recent = cursor.fetchall()
            
            print("\nüïí –ü–û–°–õ–ï–î–ù–ò–ï 10 –ó–ê–ü–ò–°–ï–ô:")
            for record in recent:
                print(f"  ‚Ä¢ {record['timestamp']} - {record['scenario']} - {record['step']} - user {record['user_id']}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
            cursor = conn.execute("""
                SELECT scenario, COUNT(*) as count
                FROM scenario_logs 
                GROUP BY scenario
                ORDER BY count DESC
            """)
            scenarios = cursor.fetchall()
            
            print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¶–ï–ù–ê–†–ò–Ø–ú:")
            for scenario in scenarios:
                print(f"  ‚Ä¢ {scenario['scenario']}: {scenario['count']} –∑–∞–ø–∏—Å–µ–π")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–≥–∞–º card_of_day
            cursor = conn.execute("""
                SELECT step, COUNT(*) as count
                FROM scenario_logs 
                WHERE scenario = 'card_of_day'
                GROUP BY step
                ORDER BY count DESC
            """)
            card_steps = cursor.fetchall()
            
            print("\nüé¥ –®–ê–ì–ò –ö–ê–†–¢–´ –î–ù–Ø:")
            for step in card_steps:
                print(f"  ‚Ä¢ {step['step']}: {step['count']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute("SELECT COUNT(*) as count FROM user_actions")
        actions = cursor.fetchone()['count']
        print(f"\nüìù –ó–∞–ø–∏—Å–µ–π –≤ user_actions: {actions}")
        
        cursor = conn.execute("SELECT COUNT(*) as count FROM users")
        users = cursor.fetchone()['count']
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ users: {users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    check_db() 