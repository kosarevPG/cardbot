#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–ø–ª–æ—é
"""

import os
import sys

def check_new_ai_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç"""
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö AI —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        from modules.ai_service import get_empathetic_response, get_weekly_analysis
        print("‚úÖ –ù–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ callable
        if callable(get_empathetic_response) and callable(get_weekly_analysis):
            print("‚úÖ AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–∑–æ–≤–∞")
            return True
        else:
            print("‚ùå AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è callable")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def check_evening_reflection_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AI —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
    print("\nüåô –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")
    
    try:
        from modules.evening_reflection import process_hard_moments
        print("‚úÖ –ú–æ–¥—É–ª—å –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏
        import inspect
        source = inspect.getsource(process_hard_moments)
        
        if "get_empathetic_response" in source:
            print("‚úÖ –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            return False
            
        if "get_reflection_summary_and_card_synergy" in source:
            print("‚úÖ –°–∏–Ω–µ—Ä–≥–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ùå –°–∏–Ω–µ—Ä–≥–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏ –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return False
            
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_scheduler_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        from modules.scheduler import ReflectionAnalysisScheduler
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py
        with open("main.py", "r", encoding="utf-8") as f:
            main_content = f.read()
            
        if "ReflectionAnalysisScheduler" in main_content:
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
        else:
            print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            return False
            
        if "reflection_scheduler.start()" in main_content:
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ main.py")
        else:
            print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ main.py")
            return False
            
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

def check_database_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ë–î...")
    
    try:
        from database.db import Database
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        db = Database('database/dev.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hasattr(db, 'get_today_card_of_the_day'):
            print("‚úÖ get_today_card_of_the_day –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå get_today_card_of_the_day –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        if hasattr(db, 'get_reflections_for_last_n_days'):
            print("‚úÖ get_reflections_for_last_n_days –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå get_reflections_for_last_n_days –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        if hasattr(db, 'get_users_with_recent_reflections'):
            print("‚úÖ get_users_with_recent_reflections –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå get_users_with_recent_reflections –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def check_amvera_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Amvera"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Amvera...")
    
    if os.path.exists("amvera.yml"):
        print("‚úÖ amvera.yml –Ω–∞–π–¥–µ–Ω")
        
        with open("amvera.yml", "r", encoding="utf-8") as f:
            content = f.read()
            
        if "cardbot-1-kosarevpg.amvera.io" in content:
            print("‚úÖ –î–æ–º–µ–Ω Amvera –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå –î–æ–º–µ–Ω Amvera –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        if "python main.py" in content:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        else:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return False
            
        return True
    else:
        print("‚ùå amvera.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö DEPLOY –ù–ê AMVERA")
    print("=" * 50)
    
    checks = [
        ("–ù–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏", check_new_ai_functions),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", check_evening_reflection_integration),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", check_scheduler_integration),
        ("–§—É–Ω–∫—Ü–∏–∏ –ë–î", check_database_functions),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Amvera", check_amvera_config)
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        try:
            if check_func():
                passed += 1
            else:
                print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ '{name}' –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ö–û–î –ì–û–¢–û–í –ö DEPLOY!")
        print("ü§ñ –ù–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ!")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. Push –≤ Git —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ")
        print("2. Amvera –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        print("3. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–æ–∑–º–æ–∂–Ω–æ:")
        print("   - Amvera –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É")
        print("   - –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö Amvera")
        print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")

if __name__ == "__main__":
    main()
