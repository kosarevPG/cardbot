#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ dump_production.db
"""
import sqlite3
import sys
import os
from datetime import datetime

def check_dump_requests():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ dump_production.db"""
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–û–í –í DUMP_PRODUCTION.DB")
    print("=" * 50)
    
    try:
        db_path = "database/dump_production.db"
        if not os.path.exists(db_path):
            print(f"‚ùå –§–∞–π–ª {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests
        print("üìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ user_requests:")
        print("-" * 40)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor = conn.execute("SELECT COUNT(*) as count FROM user_requests")
        count = cursor.fetchone()['count']
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {count}")
        
        if count > 0:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            cursor = conn.execute("PRAGMA table_info(user_requests)")
            columns = cursor.fetchall()
            print(f"üìù –°—Ç–æ–ª–±—Ü—ã:")
            for col in columns:
                print(f"  ‚Ä¢ {col['name']} ({col['type']})")
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor = conn.execute("SELECT COUNT(DISTINCT user_id) as unique_users FROM user_requests")
            unique_users = cursor.fetchone()['unique_users']
            print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
            cursor = conn.execute("""
                SELECT 
                    DATE(timestamp) as date,
                    COUNT(*) as requests_count
                FROM user_requests 
                GROUP BY DATE(timestamp)
                ORDER BY date DESC
                LIMIT 5
            """)
            dates = cursor.fetchall()
            print(f"üìÖ –ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–∞—Ç–∞–º:")
            for row in dates:
                print(f"  ‚Ä¢ {row['date']}: {row['requests_count']} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:")
            cursor = conn.execute("""
                SELECT user_id, request_text, timestamp, session_id, card_number
                FROM user_requests 
                ORDER BY timestamp DESC
                LIMIT 10
            """)
            
            for i, row in enumerate(cursor.fetchall(), 1):
                user_id = row['user_id']
                request_text = row['request_text']
                timestamp = row['timestamp']
                session_id = row['session_id']
                card_number = row['card_number']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_date = timestamp
                
                print(f"\nüî∏ –ó–ê–ü–†–û–° #{i}")
                print(f"   üìÖ –î–∞—Ç–∞: {formatted_date}")
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                print(f"   üé¥ –ö–∞—Ä—Ç–∞: {card_number}")
                print(f"   üîó Session: {session_id}")
                print(f"   üí¨ –ó–∞–ø—Ä–æ—Å: ¬´{request_text}¬ª")
                print(f"   {'‚îÄ' * 50}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor = conn.execute("""
                SELECT 
                    AVG(LENGTH(request_text)) as avg_length,
                    MIN(LENGTH(request_text)) as min_length,
                    MAX(LENGTH(request_text)) as max_length
                FROM user_requests
            """)
            stats = cursor.fetchone()
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–õ–ò–ù–ï:")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {stats['avg_length']:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {stats['min_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {stats['max_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            
        else:
            print("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ user_requests –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_dump_requests() 