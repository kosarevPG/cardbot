#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –∑–∞ 30 –¥–Ω–µ–π
"""

import sqlite3
import os

DB_PATH = "database/dev.db"

def check_funnel_30_days():
    if not os.path.exists(DB_PATH):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    
    try:
        print("üìä –í–û–†–û–ù–ö–ê '–ö–ê–†–¢–ê –î–ù–Ø' (–∑–∞ 30 –¥–Ω–µ–π)")
        print("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏
        steps_data = {}
        step_names = {
            'started': '1Ô∏è‚É£ –ù–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é',
            'initial_resource_selected': '2Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—É—Ä—Å', 
            'request_type_selected': '3Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞',
            'card_drawn': '4Ô∏è‚É£ –í—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É',
            'initial_response_provided': '5Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–ª–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é',
            'ai_reflection_choice': '6Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ª–æ–≥',
            'completed': '7Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏–ª–∏'
        }
        
        for step_name in step_names.keys():
            cursor = conn.execute(f"""
                SELECT COUNT(DISTINCT user_id) as count
                FROM scenario_logs 
                WHERE scenario = 'card_of_day' 
                AND step = ?
                AND timestamp >= datetime('now', '-30 days')
            """, (step_name,))
            count = cursor.fetchone()['count']
            steps_data[step_name] = count
        
        # –í—ã–≤–æ–¥–∏–º –≤–æ—Ä–æ–Ω–∫—É
        for step, count in steps_data.items():
            print(f"  {step_names[step]}: {count}")
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        if steps_data['started'] > 0:
            conversion = (steps_data['completed'] / steps_data['started']) * 100
            print(f"\n‚úÖ –ö–û–ù–í–ï–†–°–ò–Ø: {steps_data['completed']}/{steps_data['started']} = {conversion:.1f}%")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å
            print(f"\nüö® –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–†–¨:")
            print(f"  ‚Ä¢ –®–∞–≥ 1‚Üí2: {steps_data['started'] - steps_data['initial_resource_selected']} ({((steps_data['started'] - steps_data['initial_resource_selected']) / steps_data['started'] * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 2‚Üí3: {steps_data['initial_resource_selected'] - steps_data['request_type_selected']} ({((steps_data['initial_resource_selected'] - steps_data['request_type_selected']) / steps_data['started'] * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 3‚Üí4: {steps_data['request_type_selected'] - steps_data['card_drawn']} ({((steps_data['request_type_selected'] - steps_data['card_drawn']) / steps_data['started'] * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 4‚Üí5: {steps_data['card_drawn'] - steps_data['initial_response_provided']} ({((steps_data['card_drawn'] - steps_data['initial_response_provided']) / steps_data['started'] * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 5‚Üí6: {steps_data['initial_response_provided'] - steps_data['ai_reflection_choice']} ({((steps_data['initial_response_provided'] - steps_data['ai_reflection_choice']) / steps_data['started'] * 100):.1f}%)")
            print(f"  ‚Ä¢ –®–∞–≥ 6‚Üí7: {steps_data['ai_reflection_choice'] - steps_data['completed']} ({((steps_data['ai_reflection_choice'] - steps_data['completed']) / steps_data['started'] * 100):.1f}%)")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'text_request_provided'
            AND timestamp >= datetime('now', '-30 days')
        """)
        text_requests = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ù–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {text_requests}")
        
        # AI –æ—Ç–≤–µ—Ç—ã
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'ai_response_1_provided'
            AND timestamp >= datetime('now', '-30 days')
        """)
        ai_response_1 = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ AI –æ—Ç–≤–µ—Ç 1: {ai_response_1}")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'mood_change_recorded'
            AND timestamp >= datetime('now', '-30 days')
        """)
        mood_change = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –ó–∞–ø–∏—Å–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_change}")
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
        cursor = conn.execute("""
            SELECT COUNT(DISTINCT user_id) as count
            FROM scenario_logs 
            WHERE scenario = 'card_of_day' 
            AND step = 'usefulness_rating'
            AND timestamp >= datetime('now', '-30 days')
        """)
        usefulness_rating = cursor.fetchone()['count']
        print(f"  ‚Ä¢ –û—Ü–µ–Ω–∏–ª–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {usefulness_rating}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    check_funnel_30_days() 