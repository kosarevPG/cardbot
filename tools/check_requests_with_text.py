#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ actions
"""
import sqlite3
import json
from datetime import datetime

def check_requests_with_text():
    """–ò—â–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ actions"""
    print("üîç –ü–û–ò–°–ö –ó–ê–ü–†–û–°–û–í –° –¢–ï–ö–°–¢–û–ú –í ACTIONS")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('database/dump_production.db')
        conn.row_factory = sqlite3.Row
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å reflection_question
        cursor = conn.execute("""
            SELECT user_id, username, name, details, timestamp
            FROM actions 
            WHERE action = 'card_request' 
            AND details LIKE '%reflection_question%'
            ORDER BY timestamp DESC
            LIMIT 15
        """)
        
        requests_with_text = 0
        for row in cursor.fetchall():
            requests_with_text += 1
            user_id = row['user_id']
            username = row['username'] or "–±–µ–∑ username"
            name = row['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            details = row['details']
            timestamp = row['timestamp']
            
            # –ü–∞—Ä—Å–∏–º details (JSON)
            try:
                details_data = json.loads(details)
                card_number = details_data.get('card_number', 'N/A')
                reflection_question = details_data.get('reflection_question', '')
            except:
                card_number = 'N/A'
                reflection_question = details_data if isinstance(details_data, str) else str(details_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = timestamp
            
            print(f"\nüî∏ –ó–ê–ü–†–û–° –° –¢–ï–ö–°–¢–û–ú #{requests_with_text}")
            print(f"   üìÖ –î–∞—Ç–∞: {formatted_date}")
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | {name} | @{username}")
            print(f"   üé¥ –ö–∞—Ä—Ç–∞: {card_number}")
            print(f"   üí¨ –ó–∞–ø—Ä–æ—Å: ¬´{reflection_question}¬ª")
            print(f"   {'‚îÄ' * 50}")
        
        print(f"\nüìä –ò–¢–û–ì–û –ó–ê–ü–†–û–°–û–í –° –¢–ï–ö–°–¢–û–ú: {requests_with_text}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = conn.execute("SELECT COUNT(*) as total FROM actions WHERE action = 'card_request'")
        total_requests = cursor.fetchone()['total']
        
        cursor = conn.execute("SELECT COUNT(*) as with_text FROM actions WHERE action = 'card_request' AND details LIKE '%reflection_question%'")
        with_text = cursor.fetchone()['with_text']
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ card_request: {total_requests}")
        print(f"  ‚Ä¢ –° —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞: {with_text}")
        print(f"  ‚Ä¢ –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞: {total_requests - with_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –î–†–£–ì–ò–• –¢–ò–ü–û–í –î–ï–ô–°–¢–í–ò–ô:")
        
        action_types = ['set_request', 'first_grok_response', 'second_grok_response', 'third_grok_response']
        for action_type in action_types:
            cursor = conn.execute("SELECT COUNT(*) as count FROM actions WHERE action = ?", (action_type,))
            count = cursor.fetchone()['count']
            print(f"  ‚Ä¢ {action_type}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if count > 0:
                cursor = conn.execute("""
                    SELECT user_id, details, timestamp
                    FROM actions 
                    WHERE action = ?
                    ORDER BY timestamp DESC
                    LIMIT 2
                """, (action_type,))
                
                for row in cursor.fetchall():
                    details = row['details']
                    try:
                        details_data = json.loads(details)
                        if isinstance(details_data, dict) and 'request' in details_data:
                            print(f"    - –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å: ¬´{details_data['request']}¬ª")
                    except:
                        if 'request' in str(details):
                            print(f"    - –í–æ–∑–º–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ details")
        
        conn.close()
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_requests_with_text() 