#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import requests
import re
import json
from datetime import datetime
from typing import Optional, Dict, List, Any

class ProductionDBClient:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        self.username = "admin"
        self.password = "root"
        self.session.auth = (self.username, self.password)
        
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î"""
        print("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö PRODUCTION –ë–î")
        print("=" * 50)
        
        url = f"{self.base_url}/actions/content/"
        
        try:
            print(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫: {url}")
            response = self.session.get(url, timeout=15)
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return True
            elif response.status_code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401)")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.session.auth = None
                response = self.session.get(url, timeout=15)
                if response.status_code == 200:
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def get_table_content(self, table_name: str = "actions", page: int = 1) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã"""
        print(f"üîç –ü–û–õ–£–ß–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–ú–û–ì–û –¢–ê–ë–õ–ò–¶–´ {table_name}")
        print("=" * 50)
        
        url = f"{self.base_url}/{table_name}/content/"
        if page > 1:
            url += f"?page={page}"
        
        try:
            print(f"–ó–∞–ø—Ä–æ—Å: {url}")
            response = self.session.get(url, timeout=15)
            
            if response.status_code == 200:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                return self.parse_table_content(response.text, table_name)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def parse_table_content(self, html_content: str, table_name: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ HTML"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            result = {
                'table_name': table_name,
                'total_rows': 0,
                'current_page': 1,
                'total_pages': 1,
                'headers': [],
                'rows': []
            }
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
            rows_match = re.search(r'(\d+)\s+rows', html_content)
            if rows_match:
                result['total_rows'] = int(rows_match.group(1))
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            page_match = re.search(r'Page\s+(\d+)\s+/\s+(\d+)', html_content)
            if page_match:
                result['current_page'] = int(page_match.group(1))
                result['total_pages'] = int(page_match.group(2))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            headers = []
            header_pattern = r'<th[^>]*>(.*?)</th>'
            for match in re.findall(header_pattern, html_content):
                headers.append(match.strip())
            result['headers'] = headers
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            rows = []
            row_pattern = r'<tr[^>]*>(.*?)</tr>'
            for row_match in re.findall(row_pattern, html_content):
                cell_pattern = r'<td[^>]*>(.*?)</td>'
                cells = []
                for cell_match in re.findall(cell_pattern, row_match):
                    cells.append(cell_match.strip())
                if cells and len(cells) == len(headers):
                    rows.append(cells)
            result['rows'] = rows
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {result['current_page']} –∏–∑ {result['total_pages']}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}
    
    def search_actions(self, search_term: str) -> Optional[Dict[str, Any]]:
        """–ò—â–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        print(f"üîç –ü–û–ò–°–ö –î–ï–ô–°–¢–í–ò–ô: {search_term}")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        actions_data = self.get_table_content("actions")
        
        if not actions_data or 'rows' not in actions_data:
            return None
        
        filtered_rows = []
        for row in actions_data['rows']:
            if len(row) >= 5:  # id, user_id, username, name, action, details, timestamp
                action = row[4] if len(row) > 4 else ""
                details = row[5] if len(row) > 5 else ""
                
                if search_term.lower() in action.lower() or search_term.lower() in details.lower():
                    filtered_rows.append(row)
        
        return {
            'search_term': search_term,
            'total_found': len(filtered_rows),
            'rows': filtered_rows,
            'headers': actions_data.get('headers', [])
        }
    
    def get_user_actions(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üîç –î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
        print("=" * 40)
        
        actions_data = self.get_table_content("actions")
        
        if not actions_data or 'rows' not in actions_data:
            return None
        
        user_actions = []
        for row in actions_data['rows']:
            if len(row) >= 2 and row[1] == str(user_id):
                user_actions.append(row)
        
        return {
            'user_id': user_id,
            'total_actions': len(user_actions),
            'rows': user_actions,
            'headers': actions_data.get('headers', [])
        }
    
    def get_recent_actions(self, limit: int = 20) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        print(f"üîç –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø (–ª–∏–º–∏—Ç: {limit})")
        print("=" * 40)
        
        actions_data = self.get_table_content("actions")
        
        if not actions_data or 'rows' not in actions_data:
            return None
        
        recent_actions = actions_data['rows'][:limit]
        
        return {
            'limit': limit,
            'total_found': len(recent_actions),
            'rows': recent_actions,
            'headers': actions_data.get('headers', [])
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ö–õ–ò–ï–ù–¢ –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö PRODUCTION –ë–î")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    client = ProductionDBClient()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if client.test_connection():
        print("\n" + "="*50 + "\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        recent_actions = client.get_recent_actions(10)
        if recent_actions:
            print("üìä –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for row in recent_actions['rows']:
                if len(row) >= 7:
                    id_val, user_id, username, name, action, details, timestamp = row
                    print(f"ID: {id_val} | User: {user_id} | Action: {action} | Time: {timestamp}")
        
        print("\n" + "="*50 + "\n")
        
        # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏—è admin_requests_viewed
        admin_actions = client.search_actions("admin_requests_viewed")
        if admin_actions and admin_actions['total_found'] > 0:
            print("üö® –ù–ê–ô–î–ï–ù–´ –ê–î–ú–ò–ù–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for row in admin_actions['rows']:
                if len(row) >= 7:
                    id_val, user_id, username, name, action, details, timestamp = row
                    print(f"ID: {id_val} | User: {user_id} | Action: {action} | Time: {timestamp}")
        else:
            print("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("\n" + "="*50 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 865377684
        user_actions = client.get_user_actions(865377684)
        if user_actions and user_actions['total_actions'] > 0:
            print(f"üìä –î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 865377684 ({user_actions['total_actions']} –∑–∞–ø–∏—Å–µ–π):")
            for row in user_actions['rows']:
                if len(row) >= 7:
                    id_val, user_id, username, name, action, details, timestamp = row
                    print(f"ID: {id_val} | Action: {action} | Time: {timestamp}")
        else:
            print("‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 865377684 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("\n" + "="*50 + "\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        actions_data = client.get_table_content("actions")
        if actions_data:
            print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ actions: {actions_data['total_rows']}")
            print(f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {actions_data['current_page']} –∏–∑ {actions_data['total_pages']}")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

if __name__ == "__main__":
    main() 