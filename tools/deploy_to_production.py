#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–æ–≤—ã—Ö AI —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
"""
import os
import sys
import subprocess
import shutil
from datetime import datetime

def print_status(message, status="INFO"):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {status}: {message}")

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git"""
    print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        result = subprocess.run(["git", "status"], capture_output=True, text=True, check=True)
        print_status("Git —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print_status(f"–û—à–∏–±–∫–∞ Git: {e}", "ERROR")
        return False
    except FileNotFoundError:
        print_status("Git –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", "ERROR")
        return False

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"""
    print_status("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    backup_dir = f"backup_pre_deploy_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        files_to_backup = [
            "main.py",
            "modules/ai_service.py",
            "modules/evening_reflection.py",
            "modules/scheduler.py",
            "modules/card_of_the_day.py",
            "database/db.py"
        ]
        
        os.makedirs(backup_dir, exist_ok=True)
        
        for file_path in files_to_backup:
            if os.path.exists(file_path):
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
                backup_file_path = os.path.join(backup_dir, file_path)
                os.makedirs(os.path.dirname(backup_file_path), exist_ok=True)
                shutil.copy2(file_path, backup_file_path)
                print_status(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_path}")
        
        print_status(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
        return backup_dir
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}", "ERROR")
        return None

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"""
    print_status("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º...")
    
    try:
        result = subprocess.run([sys.executable, "run_all_tests.py"], 
                              capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print_status("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
            return True
        else:
            print_status("–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!", "ERROR")
            if result.stdout:
                print("–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:")
                print(result.stdout)
            if result.stderr:
                print("–û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤:")
                print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print_status("–¢–µ—Å—Ç—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "ERROR")
        return False
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}", "ERROR")
        return False

def deploy_to_production():
    """–î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω"""
    print_status("–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω–∞
    if not os.path.exists("config_local.py"):
        print_status("–§–∞–π–ª config_local.py –Ω–µ –Ω–∞–π–¥–µ–Ω!", "ERROR")
        print_status("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞", "ERROR")
        return False
    
    print_status("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–µ–ø–ª–æ—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç.–¥.
    
    print_status("–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("=" * 60)
    print("üöÄ –î–ï–ü–õ–û–ô –ù–û–í–´–• AI –§–£–ù–ö–¶–ò–ô –í –ü–†–û–î–ê–ö–®–ù")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞
    if not check_git_status():
        print_status("–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å Git", "ERROR")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_dir = create_backup()
    if not backup_dir:
        print_status("–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π", "ERROR")
        return False
    
    # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if not run_tests():
        print_status("–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤", "ERROR")
        return False
    
    # –®–∞–≥ 4: –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
    if not deploy_to_production():
        print_status("–î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–µ —É–¥–∞–ª—Å—è", "ERROR")
        return False
    
    print("\n" + "=" * 60)
    print_status("üéâ –î–ï–ü–õ–û–ô –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!", "SUCCESS")
    print_status(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup_dir}", "INFO")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 