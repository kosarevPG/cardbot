#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î
"""

import requests
import re
import json
from datetime import datetime
from typing import Optional, Dict, List, Any

class DetailedTableAnalyzer:
    def __init__(self):
        self.base_url = "https://cardbot-1-kosarevpg.amvera.io"
        self.session = requests.Session()
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        self.tables = [
            'actions',
            'card_feedback', 
            'daily_active_users',
            'evening_reflections',
            'feedback',
            'mailing_logs',
            'mailings',
            'posts',
            'referrals',
            'resource_states',
            'scenario_logs',
            'sqlite_sequence',
            'user_cards',
            'user_profiles',
            'user_recharge_methods',
            'user_requests',
            'user_scenarios',
            'users'
        ]
        
    def execute_sql_query(self, table_name: str, sql_query: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        url = f"{self.base_url}/{table_name}/query/"
        
        try:
            data = {'sql': sql_query}
            response = self.session.post(url, data=data, timeout=30)
            
            if response.status_code == 200:
                return self.parse_query_results(response.text)
            else:
                print(f"‚ùå HTTP {response.status_code} –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return None
    
    def parse_query_results(self, html_content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ HTML"""
        try:
            result = {
                'headers': [],
                'rows': [],
                'total_rows': 0,
                'error': None
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ SQL
            if 'error' in html_content.lower() or 'exception' in html_content.lower():
                error_match = re.search(r'<div[^>]*class="[^"]*error[^"]*"[^>]*>(.*?)</div>', html_content, re.IGNORECASE | re.DOTALL)
                if error_match:
                    result['error'] = error_match.group(1).strip()
                    return result
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            table_pattern = r'<table[^>]*class="[^"]*table[^"]*"[^>]*>(.*?)</table>'
            table_match = re.search(table_pattern, html_content, re.DOTALL | re.IGNORECASE)
            
            if table_match:
                table_html = table_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                header_pattern = r'<th[^>]*>(.*?)</th>'
                for match in re.findall(header_pattern, table_html, re.DOTALL):
                    header_text = re.sub(r'<[^>]+>', '', match).strip()
                    headers.append(header_text)
                result['headers'] = headers
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                rows = []
                row_pattern = r'<tr[^>]*>(.*?)</tr>'
                for row_match in re.findall(row_pattern, table_html, re.DOTALL):
                    cell_pattern = r'<td[^>]*>(.*?)</td>'
                    cells = []
                    for cell_match in re.findall(cell_pattern, row_match, re.DOTALL):
                        cell_text = re.sub(r'<[^>]+>', '', cell_match).strip()
                        cells.append(cell_text)
                    if cells and len(cells) == len(headers):
                        rows.append(cells)
                result['rows'] = rows
                result['total_rows'] = len(rows)
            
            return result
            
        except Exception as e:
            return {'error': str(e)}
    
    def analyze_table(self, table_name: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´: {table_name}")
        print("=" * 50)
        
        # 1. –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
        count_sql = f"SELECT COUNT(*) as total FROM {table_name}"
        count_result = self.execute_sql_query(table_name, count_sql)
        
        if count_result and not count_result.get('error'):
            if count_result['rows']:
                total_count = count_result['rows'][0][0]
                print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
                
                # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
                structure_sql = f"PRAGMA table_info({table_name})"
                structure_result = self.execute_sql_query(table_name, structure_sql)
                
                if structure_result and not structure_result.get('error'):
                    if structure_result['rows']:
                        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
                        for row in structure_result['rows']:
                            if len(row) >= 6:
                                cid, name, type_info, not_null, default_val, pk = row
                                print(f"  ‚Ä¢ {name} ({type_info})")
                
                # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                if int(total_count) > 0:
                    recent_sql = f"SELECT * FROM {table_name} ORDER BY rowid DESC LIMIT 3"
                    recent_result = self.execute_sql_query(table_name, recent_sql)
                    
                    if recent_result and not recent_result.get('error'):
                        if recent_result['rows']:
                            print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                            for i, row in enumerate(recent_result['rows'], 1):
                                print(f"  {i}. {row}")
                
                return {
                    'table': table_name,
                    'total_records': total_count,
                    'accessible': True,
                    'error': None
                }
            else:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                return {
                    'table': table_name,
                    'total_records': 0,
                    'accessible': False,
                    'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                }
        else:
            error = count_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if count_result else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {error}")
            return {
                'table': table_name,
                'total_records': 0,
                'accessible': False,
                'error': error
            }
    
    def analyze_all_tables(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –¢–ê–ë–õ–ò–¶ –ë–î")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        results = []
        
        for table in self.tables:
            result = self.analyze_table(table)
            results.append(result)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 60)
        
        accessible_tables = [r for r in results if r['accessible']]
        inaccessible_tables = [r for r in results if not r['accessible']]
        
        total_records = sum(int(r['total_records']) for r in accessible_tables)
        
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(accessible_tables)}")
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(inaccessible_tables)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {(len(accessible_tables)/(len(accessible_tables)+len(inaccessible_tables))*100):.1f}%")
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        if accessible_tables:
            print(f"\n‚úÖ –î–û–°–¢–£–ü–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
            for result in accessible_tables:
                print(f"  ‚Ä¢ {result['table']}: {result['total_records']} –∑–∞–ø–∏—Å–µ–π")
        
        if inaccessible_tables:
            print(f"\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
            for result in inaccessible_tables:
                print(f"  ‚Ä¢ {result['table']}: {result['error']}")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = DetailedTableAnalyzer()
    analyzer.analyze_all_tables()

if __name__ == "__main__":
    main() 