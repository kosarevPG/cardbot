#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã user_requests
"""
import sqlite3
import os

def fix_table_structure():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_requests"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_requests –≤ {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor = conn.execute("PRAGMA table_info(user_requests)")
        columns = cursor.fetchall()
        print(f"üìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_requests:")
        for col in columns:
            print(f"  ‚Ä¢ {col[1]} ({col[2]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ id
        column_names = [col[1] for col in columns]
        
        if 'id' not in column_names:
            print("\n‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'id' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            conn.execute("DROP TABLE IF EXISTS user_requests")
            conn.execute("""
                CREATE TABLE user_requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    request_text TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    session_id TEXT,
                    card_number INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            conn.execute("CREATE INDEX idx_user_requests_user_id ON user_requests(user_id)")
            conn.execute("CREATE INDEX idx_user_requests_timestamp ON user_requests(timestamp)")
            conn.execute("CREATE INDEX idx_user_requests_session_id ON user_requests(session_id)")
            
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_requests –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        else:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("PRAGMA table_info(user_requests)")
        columns = cursor.fetchall()
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_requests:")
        for col in columns:
            print(f"  ‚Ä¢ {col[1]} ({col[2]})")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã user_requests...")
    success = fix_table_structure()
    if success:
        print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã!") 