import os
import asyncio
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É modules –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–º–æ–¥—É–ª–µ–π
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'modules')))

from aiogram import types # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç types
from modules.purchase_menu import handle_purchase_menu, handle_purchase_callbacks, get_purchase_menu # –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –∏–∑ modules.purchase_menu
from modules.card_of_the_day import get_main_menu # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
from modules.logging_service import LoggingService # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç LoggingService
from database.db import Database # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Database

# --- –í–ê–ñ–ù–û ---
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª 'tools/google_creds.json'
# –∏ –ø–æ–º–µ—Å—Ç–∏–ª–∏ –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ JSON-–∫–ª—é—á–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets.
# –¢–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã,
# –ª–∏–±–æ –∑–∞–¥–∞–π—Ç–µ –∏—Ö –ø—Ä—è–º–æ –∑–¥–µ—Å—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.

# –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞:
os.environ['OZON_API_KEY'] = os.getenv('OZON_API_KEY', 'your_ozon_api_key')
os.environ['OZON_CLIENT_ID'] = os.getenv('OZON_CLIENT_ID', 'your_ozon_client_id')
os.environ['BOT_TOKEN'] = os.getenv('BOT_TOKEN', 'your_bot_token')
os.environ['ADMIN_ID'] = os.getenv('ADMIN_ID', 'your_admin_id')
os.environ['WB_API_TOKEN'] = os.getenv('WB_API_TOKEN', 'your_wb_api_token')

# ---- –ñ–Å–°–¢–ö–û –∑–∞–¥–∞—ë–º WB_API_KEY –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ù–ï –∫–æ–º–º–∏—Ç–∏—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π) ----
os.environ['WB_API_KEY'] = (
    "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjUwNTIwdjEiLCJ0eXAiOiJKV1QifQ."
    "eyJlbnQiOjEsImV4cCI6MTc3MjQxODc4OSwiaWQiOiIwMTk5MDA4Yi1kOWVjLTcw"
    "ZTEtOWE1My0xMzMyOWFiNjE4ZjEiLCJpaWQiOjgyMTIyMzE4LCJvaWQiOjI1MDAx"
    "MzM2OCwicyI6MTYxMjYsInNpZCI6IjBlYzZhYTIxLTQ5YWYtNGQ3MS05Y2E2LTk2"
    "NjU0MWQwMmZmZSIsInQiOmZhbHNlLCJ1aWQiOjgyMTIyMzE4fQ."
    "wBX-qYBreCEaQg4pNMV1tJQKcFE3_YmhRI7UMA2LQ29irj0e4mrv1RSIwCM9yde5"
    "NHJ2JZAonV6puSlmr1kokQ"
)
# -------------------------------------------------------------------------------


from modules.marketplace_manager import MarketplaceManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ JSON-—Ñ–∞–π–ª–∞
google_creds_info = None
try:
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç—Ç—É–¥–∞
    with open('tools/google_creds.json', 'r', encoding='utf-8') as f:
        google_creds_info = json.load(f)
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: –§–∞–π–ª 'tools/google_creds.json' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ JSON-–∫–ª—é—á–∞.")
except json.JSONDecodeError:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ —Ñ–∞–π–ª–∞ 'tools/google_creds.json'.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏: {e}")

async def main():
    if not google_creds_info:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return

    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MarketplaceManager...")
    manager = MarketplaceManager(google_creds=google_creds_info)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞
    logging_service = LoggingService()
    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'bot.db')
    db = Database(db_path)

    print("\n--- –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ \"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ú–ê–ö\" ---")
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ Message –∏ CallbackQuery
    class MockMessage:
        def __init__(self):
            self.text = "üõç –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ú–ê–ö"
            self.from_user = types.User(id=12345, is_bot=False, first_name="Test", last_name="User")
            self.answer_text = None
            self.reply_markup = None

        async def answer(self, text, reply_markup=None):
            print(f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {text}")
            self.answer_text = text
            self.reply_markup = reply_markup
            return self

        async def edit_text(self, text, reply_markup=None):
            print(f"–ë–æ—Ç –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
            self.answer_text = text
            self.reply_markup = reply_markup
            return self

    class MockCallbackQuery:
        def __init__(self, data):
            self.data = data
            self.from_user = types.User(id=12345, is_bot=False, first_name="Test", last_name="User")
            self.message = MockMessage() # –°–≤—è–∑—ã–≤–∞–µ–º —Å MockMessage –¥–ª—è edit_text
            self.answer_called = False

        async def answer(self):
            print(f"CallbackQuery.answer() –≤—ã–∑–≤–∞–Ω –¥–ª—è: {self.data}")
            self.answer_called = True

    # –î–ª—è `handle_purchase_menu`
    mock_message = MockMessage()
    # –ü–µ—Ä–µ–¥–∞–µ–º db –∏ logging_service
    await handle_purchase_menu(mock_message, db, logging_service)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ú–ê–ö"
    assert mock_message.answer_text == "–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ú–ê–ö:", f"Expected '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ú–ê–ö:', got {mock_message.answer_text}"
    assert mock_message.reply_markup is not None, "Reply markup should not be None"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–æ–∫
    markup_buttons = [button.text for row in mock_message.reply_markup.inline_keyboard for button in row]
    print(f"–ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é: {markup_buttons}")
    assert "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞ Ozon" in markup_buttons, "Ozon button missing"
    assert "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞ WB" in markup_buttons, "WB button missing"
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" in markup_buttons, "Back button missing"

    # –î–ª—è `handle_purchase_callbacks` (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
    print("\n--- –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ \"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\" ---")
    mock_callback_back = MockCallbackQuery(data="back_to_main_menu")
    # –ü–µ—Ä–µ–¥–∞–µ–º db
    await handle_purchase_callbacks(mock_callback_back, db)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    expected_main_menu_markup = await get_main_menu(mock_callback_back.from_user.id, db) # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Ä–∞–∑–º–µ—Ç–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    assert mock_callback_back.message.answer_text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", f"Expected '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', got {mock_callback_back.message.answer_text}"
    assert mock_callback_back.message.reply_markup == expected_main_menu_markup, "Reply markup for main menu is incorrect"
    assert mock_callback_back.answer_called, "Callback answer not called for back button"
    
    db.close()

if __name__ == "__main__":
    # –î–ª—è Windows –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
    # asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
