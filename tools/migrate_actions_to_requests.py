#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã actions –≤ user_requests
"""
import sqlite3
import json
import os
from datetime import datetime

def migrate_actions_to_requests():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ actions –≤ user_requests"""
    try:
        db_path = "database/bot (20).db"
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print(f"üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ actions –≤ user_requests")
        print(f"üìÅ –ë–î: {db_path}")
        
        migrated_count = 0
        
        # 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º card_request –∑–∞–ø–∏—Å–∏
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º card_request –∑–∞–ø–∏—Å–∏...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'card_request' 
            AND details LIKE '%reflection_question%'
            ORDER BY timestamp DESC
        """)
        
        card_requests = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(card_requests)} card_request –∑–∞–ø–∏—Å–µ–π")
        
        for row in card_requests:
            try:
                details = json.loads(row['details'])
                reflection_question = details.get('reflection_question')
                
                if reflection_question:
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    session_id = f"card_request_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, reflection_question, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                            (user_id, reflection_question, timestamp, session_id)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω card_request: {reflection_question[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {reflection_question[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ card_request: {e}")
        
        # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º set_request –∑–∞–ø–∏—Å–∏
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º set_request –∑–∞–ø–∏—Å–∏...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'set_request' 
            AND details LIKE '%request%'
            ORDER BY timestamp DESC
        """)
        
        set_requests = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(set_requests)} set_request –∑–∞–ø–∏—Å–µ–π")
        
        for row in set_requests:
            try:
                details = json.loads(row['details'])
                request_text = details.get('request')
                
                if request_text:
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    session_id = f"set_request_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, request_text, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                            (user_id, request_text, timestamp, session_id)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω set_request: {request_text[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ set_request: {e}")
        
        # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º request_text_provided –∑–∞–ø–∏—Å–∏
        print(f"\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º request_text_provided –∑–∞–ø–∏—Å–∏...")
        cursor = conn.execute("""
            SELECT user_id, details, timestamp 
            FROM actions 
            WHERE action = 'request_text_provided' 
            AND details LIKE '%request%'
            ORDER BY timestamp DESC
        """)
        
        text_requests = cursor.fetchall()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(text_requests)} request_text_provided –∑–∞–ø–∏—Å–µ–π")
        
        for row in text_requests:
            try:
                details = json.loads(row['details'])
                request_text = details.get('request')
                
                if request_text:
                    user_id = row['user_id']
                    timestamp = row['timestamp']
                    session_id = f"text_provided_{user_id}_{migrated_count}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    cursor = conn.execute(
                        "SELECT id FROM user_requests WHERE user_id = ? AND request_text = ? AND session_id = ?",
                        (user_id, request_text, session_id)
                    )
                    
                    if not cursor.fetchone():
                        conn.execute(
                            "INSERT INTO user_requests (user_id, request_text, timestamp, session_id) VALUES (?, ?, ?, ?)",
                            (user_id, request_text, timestamp, session_id)
                        )
                        migrated_count += 1
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω request_text_provided: {request_text[:50]}...")
                    else:
                        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): {request_text[:50]}...")
            
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ request_text_provided: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = conn.execute("SELECT COUNT(*) FROM user_requests")
        total_requests = cursor.fetchone()[0]
        
        print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ user_requests: {total_requests}")
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {migrated_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        cursor = conn.execute("""
            SELECT ur.request_text, ur.timestamp, u.name, u.username 
            FROM user_requests ur 
            LEFT JOIN users u ON ur.user_id = u.user_id 
            ORDER BY ur.timestamp DESC 
            LIMIT 10
        """)
        
        examples = cursor.fetchall()
        if examples:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:")
            for i, row in enumerate(examples, 1):
                name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                username = f"@{row['username']}" if row['username'] else ""
                print(f"  {i}. {name} {username}: {row['request_text'][:60]}...")
                print(f"     üìÖ {row['timestamp']}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = migrate_actions_to_requests()
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!") 