#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON –≤ SQLite –ë–î
"""
import json
import sys
import os
from datetime import datetime
import uuid

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db import Database

def migrate_user_requests():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON –≤ SQLite"""
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–ü–†–û–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        json_file = "data/user_requests.json"
        if not os.path.exists(json_file):
            print(f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(json_file, 'r', encoding='utf-8') as f:
            user_requests = json.load(f)
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db = Database('database/dev.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ user_requests
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        existing_count = cursor.fetchone()['count']
        print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {existing_count}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        migrated_count = 0
        skipped_count = 0
        
        for user_id_str, request_data in user_requests.items():
            try:
                user_id = int(user_id_str)
                request_text = request_data['request']
                timestamp_str = request_data['timestamp']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                session_id = f"migrated_{uuid.uuid4().hex[:16]}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
                cursor = db.conn.execute("""
                    SELECT COUNT(*) as count 
                    FROM user_requests 
                    WHERE user_id = ? AND request_text = ? AND timestamp = ?
                """, (user_id, request_text, timestamp_str))
                
                if cursor.fetchone()['count'] == 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    db.save_user_request(user_id, request_text, session_id)
                    migrated_count += 1
                    print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ¬´{request_text[:30]}...¬ª")
                else:
                    skipped_count += 1
                    print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = db.conn.execute("SELECT COUNT(*) as count FROM user_requests")
        final_count = cursor.fetchone()['count']
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print(f"  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ JSON: {len(user_requests)}")
        print(f"  ‚Ä¢ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {skipped_count}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –≤ –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {final_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ú–ò–ì–†–ò–†–û–í–ê–ù–ù–´–• –ó–ê–ü–†–û–°–û–í:")
        cursor = db.conn.execute("""
            SELECT ur.user_id, ur.request_text, ur.timestamp, u.name, u.username
            FROM user_requests ur
            LEFT JOIN users u ON ur.user_id = u.user_id
            ORDER BY ur.timestamp DESC
            LIMIT 5
        """)
        
        for row in cursor.fetchall():
            user_id = row['user_id']
            request_text = row['request_text']
            timestamp = row['timestamp']
            name = row['name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            username = row['username'] or "–±–µ–∑ username"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = timestamp
            
            print(f"  ‚Ä¢ {formatted_date} | {user_id} | {name} | @{username}")
            print(f"    ¬´{request_text}¬ª")
            print()
        
        db.close()
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    migrate_user_requests() 