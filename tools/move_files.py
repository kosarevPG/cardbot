#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É tools/
"""

import os
import shutil
import glob
from pathlib import Path

def create_tools_directory():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É tools/ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    tools_dir = Path("tools")
    if not tools_dir.exists():
        tools_dir.mkdir()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ tools/")
    else:
        print("‚ÑπÔ∏è –ü–∞–ø–∫–∞ tools/ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def move_test_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    test_files = glob.glob("test_*.py") + ["run_all_tests.py"]
    for file_path in test_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_check_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    check_files = glob.glob("check_*.py")
    for file_path in check_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_debug_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç–ª–∞–¥–∫–∏"""
    debug_files = glob.glob("debug_*.py")
    for file_path in debug_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_deploy_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–µ–ø–ª–æ—è"""
    deploy_files = glob.glob("deploy_*.py") + glob.glob("deploy_*.bat") + glob.glob("deploy_*.ps1") + ["deploy.cmd"]
    for file_path in deploy_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_migrate_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
    migrate_files = glob.glob("migrate_*.py") + glob.glob("production_*.py")
    for file_path in migrate_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_analysis_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    analysis_files = glob.glob("analyze_*.py") + glob.glob("dashboard_*.py") + glob.glob("detailed_*.py") + glob.glob("verify_*.py")
    for file_path in analysis_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_documentation():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    md_files = glob.glob("*.md")
    for file_path in md_files:
        if file_path not in ["README.md", "tools/REORGANIZATION_PLAN.md"]:
            if os.path.exists(file_path):
                dest = f"tools/{file_path}"
                shutil.move(file_path, dest)
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def move_backup_directories():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤"""
    backup_dirs = glob.glob("backup_*")
    for dir_path in backup_dirs:
        if os.path.isdir(dir_path):
            dest = f"tools/{dir_path}"
            shutil.move(dir_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_path} ‚Üí tools/")

def move_temporary_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    temp_files = ["tatus", "h origin master", "ection && git push origin master"]
    for file_path in temp_files:
        if os.path.exists(file_path):
            dest = f"tools/{file_path}"
            shutil.move(file_path, dest)
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")

def update_gitignore():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .gitignore"""
    gitignore_path = ".gitignore"
    if os.path.exists(gitignore_path):
        with open(gitignore_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        if "tools/" not in content:
            with open(gitignore_path, "a", encoding="utf-8") as f:
                f.write("\n# Tools directory (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)\ntools/\n")
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore")
        else:
            print("‚ÑπÔ∏è .gitignore —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tools/")

def create_readme():
    """–°–æ–∑–¥–∞–µ—Ç README.md –≤ –∫–æ—Ä–Ω–µ"""
    readme_content = """# ü§ñ CardBot - Telegram Bot

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

### –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
- `main.py` - –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞
- `requirements.txt` - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
- `amvera.yml` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Amvera
- `config.py` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏
- `modules/` - –º–æ–¥—É–ª–∏ –±–æ—Ç–∞ (AI, –∫–∞—Ä—Ç—ã –¥–Ω—è, —Ä–µ—Ñ–ª–µ–∫—Å–∏—è)
- `database/` - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ö–µ–º—ã
- `cards/` - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –¥–Ω—è
- `data/` - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

### –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
–í—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (—Ç–µ—Å—Ç—ã, –¥–µ–ø–ª–æ–π, –º–∏–≥—Ä–∞—Ü–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è) –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ `tools/`.

## üöÄ –ó–∞–ø—É—Å–∫

```bash
python main.py
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ `tools/`.
"""
    
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω README.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê CARDBOT")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É tools/
    create_tools_directory()
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    move_test_files()
    move_check_files()
    move_debug_files()
    move_deploy_files()
    move_migrate_files()
    move_analysis_files()
    move_documentation()
    move_backup_directories()
    move_temporary_files()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\n‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    update_gitignore()
    create_readme()
    
    print("\nüéâ –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ tools/")
    print("‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore")
    print("‚úÖ –°–æ–∑–¥–∞–Ω README.md")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –±–æ—Ç–∞!")
    print("üìÅ –í—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ tools/")

if __name__ == "__main__":
    main()
