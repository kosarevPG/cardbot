#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –ø–µ—Ä–≤—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º
"""

import os
import shutil
import glob

def move_remaining_files():
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("üîß –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤...")
    
    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
    files_to_move = [
        "quick_deploy.py",
        "force_amvera_rebuild.py", 
        "simple_test.py",
        "push_fix.py",
        "fix_deploy.bat",
        "fix_amvera_deploy.py",
        "ection && git push origin master",
        "rollback_production.py",
        "monitor_deployment.py",
        "monitor_production_deployment.py",
        "direct_db_analysis.py",
        "final_comparison.py",
        "find_specific_action.py",
        "fix_table_structure.py",
        "deduplicate_requests.py",
        "db_web_client.py",
        "compare_logics.py",
        "create_user_requests_table.py",
        "calculate_dau_from_user_scenarios.py",
        "add_initial_response.py",
        "add_missing_requests.py",
        "advanced_db_client.py",
        "et --hard c3ffc63",
        "how c3ffc63 --oneline",
        "secure_sqlite_web.py",
        "security_analysis.py",
        "security_monitor_realtime.py",
        "connect_to_production_db.py",
        "authenticated_db_client.py",
        "simple_db_check.py",
        "security_monitor.log",
        "security_monitor.sql",
        "quick_period_test.py",
        "quick_funnel_check.py",
        "init_production.py",
        "quick_check_dump.py",
        "view_scenario_data.py"
    ]
    
    moved_count = 0
    for file_path in files_to_move:
        if os.path.exists(file_path):
            try:
                dest = f"tools/{file_path}"
                shutil.move(file_path, dest)
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file_path} ‚Üí tools/")
                moved_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {file_path}: {e}")
    
    print(f"\nüìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {moved_count}")
    return moved_count

def check_final_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ
    required_files = [
        "main.py",
        "requirements.txt", 
        "amvera.yml",
        "config.py",
        "config_local.py",
        "README.md",
        ".gitignore",
        "pyproject.toml",
        "uv.lock",
        ".replit"
    ]
    
    # –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ
    required_dirs = [
        "modules",
        "database", 
        "cards",
        "data",
        "config",
        ".github"
    ]
    
    print("\nüìÅ –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ:")
    root_files = [f for f in os.listdir(".") if os.path.isfile(f)]
    for file in sorted(root_files):
        if file in required_files:
            print(f"‚úÖ {file} (–æ—Å–Ω–æ–≤–Ω–æ–π)")
        else:
            print(f"‚ö†Ô∏è {file} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å)")
    
    print("\nüìÅ –ü–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ:")
    root_dirs = [d for d in os.listdir(".") if os.path.isdir(d)]
    for dir_name in sorted(root_dirs):
        if dir_name in required_dirs:
            print(f"‚úÖ {dir_name}/ (–æ—Å–Ω–æ–≤–Ω–∞—è)")
        elif dir_name == "tools":
            print(f"üìÅ {dir_name}/ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)")
        else:
            print(f"‚ö†Ô∏è {dir_name}/ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–û–†–ê–ë–û–¢–ö–ê –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã
    moved_count = move_remaining_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    check_final_structure()
    
    print(f"\nüéâ –î–û–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {moved_count}")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω!")

if __name__ == "__main__":
    main()
