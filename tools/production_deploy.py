#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –≤ production
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
"""
import os
import sys
import sqlite3
from datetime import datetime

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é production"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ production...")
    
    try:
        from config import ADMIN_ID, ADMIN_IDS, NO_LOGS_USERS, TOKEN
        print(f"‚úÖ ADMIN_ID: {ADMIN_ID}")
        print(f"‚úÖ ADMIN_IDS: {ADMIN_IDS}")
        print(f"‚úÖ NO_LOGS_USERS: {len(NO_LOGS_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"‚úÖ TOKEN: {'*' * 10 + TOKEN[-10:] if TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ADMIN_ID –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if ADMIN_ID in NO_LOGS_USERS:
            print("‚úÖ ADMIN_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: ADMIN_ID –ù–ï –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
            return False
            
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config.py: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
    
    try:
        from database.db import Database
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
        db = Database('database/dev.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        required_tables = ['users', 'scenario_logs', 'user_scenarios']
        existing_tables = []
        
        cursor = db.conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        for row in cursor.fetchall():
            existing_tables.append(row['name'])
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}")
        for table in required_tables:
            if table in existing_tables:
                print(f"  ‚úÖ {table}")
            else:
                print(f"  ‚ùå {table} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
        db._run_migrations()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'aiogram',
        'pytz', 
        'requests',
        'pydantic-core',
        'httpx',
        'sqlite-web'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {missing_packages}")
        return False
    
    return True

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'main.py',
        'config.py',
        'database/db.py',
        'modules/logging_service.py',
        'modules/user_management.py',
        'requirements.txt',
        'amvera.yml'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    return True

def generate_deployment_commands():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è"""
    print("\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è:")
    print("=" * 50)
    print("# 1. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git")
    print("git add .")
    print("git commit -m \"feat: add admin panel, advanced user stats, and scenario logging\"")
    print()
    print("# 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GitHub")
    print("git push origin main")
    print()
    print("# 3. Amvera –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞")
    print()
    print("# 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ Amvera –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è")
    print("# –õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
    print()
    print("# 5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ production")
    print("# - /admin - –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å")
    print("# - /user_profile - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
    print("# - /scenario_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö DEPLOY –í PRODUCTION")
    print("=" * 60)
    
    checks = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_config),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î", check_database_structure),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_requirements),
        ("–§–∞–π–ª—ã", check_files)
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        try:
            if check_func():
                passed += 1
            else:
                print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ '{name}' –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ì–û–¢–û–í –ö DEPLOY!")
        generate_deployment_commands()
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò–°–ü–†–ê–í–ò–¢–ï –ò–• –ü–ï–†–ï–î DEPLOY!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")

if __name__ == "__main__":
    main() 