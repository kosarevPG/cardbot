#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ GitHub
"""

import os
import subprocess
import sys

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}: {command}")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {description}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}: {e}")
        print(f"stderr: {e.stderr}")
        return False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")
    
    try:
        result = subprocess.run(["git", "status", "--porcelain"], 
                              capture_output=True, text=True, check=True)
        
        if result.stdout.strip():
            print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞:")
            print(result.stdout)
            return True
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def push_to_github():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ GitHub"""
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ GitHub...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if not check_git_status():
        print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return True
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    commands = [
        ("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"),
        ("git commit -m \"feat: –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–Ω—è, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ tools/\"", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"),
        ("git push origin master", "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub")
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
            return False
    
    print("\nüéâ –ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù –í GITHUB!")
    return True

def show_final_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
    print("=" * 50)
    
    print("\nüöÄ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–∞):")
    root_files = [f for f in os.listdir(".") if os.path.isfile(f) and not f.startswith('.')]
    root_dirs = [d for d in os.listdir(".") if os.path.isdir(d) and not d.startswith('.')]
    
    for file in sorted(root_files):
        if file in ["main.py", "requirements.txt", "amvera.yml", "config.py", "README.md"]:
            print(f"  ‚úÖ {file}")
        else:
            print(f"  üìÑ {file}")
    
    for dir_name in sorted(root_dirs):
        if dir_name in ["modules", "database", "cards", "data"]:
            print(f"  üìÅ {dir_name}/ (–æ—Å–Ω–æ–≤–Ω–∞—è)")
        elif dir_name == "tools":
            print(f"  üõ†Ô∏è {dir_name}/ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)")
        else:
            print(f"  üìÅ {dir_name}/")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ: {len(root_files)}")
    print(f"  ‚Ä¢ –ü–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ: {len(root_dirs)}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ tools/
    tools_dir = "tools"
    if os.path.exists(tools_dir):
        tools_files = []
        for root, dirs, files in os.walk(tools_dir):
            tools_files.extend(files)
        print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ –≤ tools/: {len(tools_files)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–¢–ü–†–ê–í–ö–ê –†–ï–û–†–ì–ê–ù–ò–ó–û–í–ê–ù–ù–û–ì–û –ü–†–û–ï–ö–¢–ê –í GITHUB")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("main.py"):
        print("‚ùå –û—à–∏–±–∫–∞: main.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        return False
    
    if not os.path.exists("tools/"):
        print("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ tools/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub
    if push_to_github():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        show_final_structure()
        
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—á–∏—â–µ–Ω–∞")
        print("‚úÖ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
        print("‚úÖ Amvera –ø–æ–ª—É—á–∏—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub")
        print("2. Amvera –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É")
        print("3. –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω—ã —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç")
        
        return True
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –í GITHUB")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
