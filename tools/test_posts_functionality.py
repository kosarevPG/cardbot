#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ—Å—Ç–æ–≤
"""
import sys
import os
import asyncio
import tempfile
import shutil
from unittest.mock import Mock, AsyncMock, patch
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config_local import ADMIN_ID
from database.db import Database
from modules.logging_service import LoggingService
from modules.post_management import PostManager
from modules.user_management import UserManager

class TestPostFunctionality:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.test_db_path = None
        self.db = None
        self.logger_service = None
        self.user_manager = None
        self.post_manager = None
        self.mock_bot = None
        
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_db_path = tempfile.mktemp(suffix='.db')
        shutil.copy('database/dev.db', self.test_db_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = Database(self.test_db_path)
        self.logger_service = LoggingService(self.db)
        self.user_manager = UserManager(self.db)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
        self.mock_bot = Mock()
        self.mock_bot.send_message = AsyncMock()
        self.mock_bot.send_photo = AsyncMock()
        
        self.post_manager = PostManager(self.db, self.mock_bot, self.logger_service)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def teardown(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if self.db:
            self.db.close()
        if self.test_db_path and os.path.exists(self.test_db_path):
            os.remove(self.test_db_path)
        print("üßπ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
    
    def test_post_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        print("\nüìù –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...")
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            title = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
            content = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"
            created_by = int(ADMIN_ID)
            
            post_id = self.post_manager.create_post(title, content, created_by)
            print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {post_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–∑–¥–∞–ª—Å—è
            post = self.post_manager.get_post(post_id)
            assert post is not None, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
            assert post['title'] == title, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
            assert post['content'] == content, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
            assert post['created_by'] == created_by, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
            
            print("‚úÖ –ü–æ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def test_post_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
        print("\n‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤...")
        try:
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            valid_result = self.post_manager.validate_post_data("–ó–∞–≥–æ–ª–æ–≤–æ–∫", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
            assert valid_result['valid'] == True, "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É"
            print("‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
            
            # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            invalid_title = self.post_manager.validate_post_data("", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
            assert invalid_title['valid'] == False, "–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            assert "–∑–∞–≥–æ–ª–æ–≤–æ–∫" in str(invalid_title['errors']).lower(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –∑–∞–≥–æ–ª–æ–≤–∫–µ"
            print("‚úÖ –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            long_title = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ " * 10
            invalid_long_title = self.post_manager.validate_post_data(long_title, "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
            assert invalid_long_title['valid'] == False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            print("‚úÖ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            invalid_content = self.post_manager.validate_post_data("–ó–∞–≥–æ–ª–æ–≤–æ–∫", "")
            assert invalid_content['valid'] == False, "–ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            print("‚úÖ –ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            return False
    
    def test_post_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
        print("\nüé® –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤...")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            title = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
            content = "–û–±—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
            created_by = int(ADMIN_ID)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            formatted_content = f"<b>{title}</b>\n\n{content}"
            
            post_id = self.post_manager.create_post(title, formatted_content, created_by)
            post = self.post_manager.get_post(post_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            assert "<b>" in post['content'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ <b>"
            assert "</b>" in post['content'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç </b>"
            assert "\n\n" in post['content'], "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏"
            
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return False
    
    def test_mailing_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        print("\nüìß –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏...")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            post_id = self.post_manager.create_post("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏", int(ADMIN_ID))
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            mailing_id = self.post_manager.create_mailing(
                post_id=post_id,
                title="–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
                send_to_all=True,
                created_by=int(ADMIN_ID)
            )
            
            print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {mailing_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            mailing = self.post_manager.get_mailing(mailing_id)
            assert mailing is not None, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î"
            assert mailing['post_id'] == post_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞"
            assert mailing['send_to_all'] == True, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"
            assert mailing['status'] == 'pending', "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å pending"
            
            print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return False
    
    def test_mailing_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        print("\n‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫...")
        try:
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º
            valid_all = self.post_manager.validate_mailing_data(send_to_all=True)
            assert valid_all['valid'] == True, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–∞"
            print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            valid_specific = self.post_manager.validate_mailing_data(
                send_to_all=False, 
                target_user_ids=[123456, 789012]
            )
            assert valid_specific['valid'] == True, "–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–∞"
            print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            
            # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–µ –≤—Å–µ–º –∏ –±–µ–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            invalid = self.post_manager.validate_mailing_data(send_to_all=False)
            assert invalid['valid'] == False, "–†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            return False
    
    async def test_post_sending(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤"""
        print("\nüì§ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤...")
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (get_user –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å)
            test_user_id = 999999999
            user_data = self.db.get_user(test_user_id)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.update_user(test_user_id, {"name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"})
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post_id = self.post_manager.create_post("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", int(ADMIN_ID))
            post = self.post_manager.get_post(post_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
            success = await self.post_manager.send_post_to_user(test_user_id, post)
            assert success == True, "–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω
            self.mock_bot.send_message.assert_called_once()
            call_args = self.mock_bot.send_message.call_args
            assert call_args[1]['chat_id'] == test_user_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å"
            assert call_args[1]['parse_mode'] == 'HTML', "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å HTML —Ä–µ–∂–∏–º"
            
            print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            return False
    
    async def test_mailing_processing(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        print("\nüì® –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫...")
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (get_user –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏)
            test_users = [111111111, 222222222, 333333333]
            for user_id in test_users:
                user_data = self.db.get_user(user_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.update_user(user_id, {"name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"})
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –∏ —Ä–∞—Å—Å—ã–ª–∫—É
            post_id = self.post_manager.create_post("–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", int(ADMIN_ID))
            mailing_id = self.post_manager.create_mailing(
                post_id=post_id,
                title="–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
                send_to_all=True,
                created_by=int(ADMIN_ID)
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            result = await self.post_manager.process_mailing({
                'id': mailing_id,
                'post_content': f"<b>–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                'send_to_all': True
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert result['total'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–∏"
            assert result['sent'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result['sent']}/{result['total']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            return False
    
    def test_post_preview(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
        print("\nüëÅÔ∏è –¢–µ—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤...")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
            long_content = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ " * 20
            post_id = self.post_manager.create_post("–ó–∞–≥–æ–ª–æ–≤–æ–∫", long_content, int(ADMIN_ID))
            post = self.post_manager.get_post(post_id)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            preview = self.post_manager.format_post_preview(post, max_length=100)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            assert "üìù" in preview, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏ –ø–æ—Å—Ç–∞"
            assert "..." in preview, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
            assert len(preview) > 0, "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            
            print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return False
    
    def test_post_management_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏"""
        print("\nüîß –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏...")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post_id = self.post_manager.create_post("–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫", "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", int(ADMIN_ID))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
            success = self.post_manager.update_post(
                post_id=post_id,
                title="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
                content="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
            )
            assert success == True, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updated_post = self.post_manager.get_post(post_id)
            assert updated_post['title'] == "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫", "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω"
            assert updated_post['content'] == "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
            all_posts = self.post_manager.get_all_posts(limit=10)
            assert len(all_posts) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å—Ç—ã –≤ —Å–ø–∏—Å–∫–µ"
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
            delete_success = self.post_manager.delete_post(post_id)
            assert delete_success == True, "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_post = self.post_manager.get_post(post_id)
            assert deleted_post is None, "–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
            
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ—Å—Ç–æ–≤...")
        
        self.setup()
        
        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤", self.test_post_creation),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤", self.test_post_validation),
            ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤", self.test_post_formatting),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫", self.test_mailing_creation),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", self.test_mailing_validation),
            ("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤", self.test_post_sending),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", self.test_mailing_processing),
            ("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", self.test_post_preview),
            ("–û–ø–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", self.test_post_management_operations),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if asyncio.iscoroutinefunction(test_func):
                    result = await test_func()
                else:
                    result = test_func()
                
                if result:
                    passed += 1
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                    
            except Exception as e:
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        self.teardown()
        return passed == total

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TestPostFunctionality()
    success = await tester.run_all_tests()
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 